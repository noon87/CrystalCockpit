/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Controller.*;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author Nan
 * @Write Program by Nan
 * 
 * Delete Tablespace Description
 * ===============================
 * This function allow user to delete existing tablesapce.
 * Allow user to see script by pressing “Show Script” and also let user to change 
 * script by click on “Edit Script”.
 * At the same time, allow user to save current script into drive/temp drive. 
 * So that user can take that script to anywhere.
 * 
 * How Function work
 * =================
 * When Frame open, load all data from Database.
 * 
 * When user click on "Show Script" set the choose=2 and call actions() to
 * connect Controller's functions to execute statement.
 * 
 * When user click on "Edit Script" text area will enabled and allow user to
 * change current script. Than set choice=3 and call actions() to connect
 * Controller's functions to execute statement.
 * 
 * When user click on "Save Script", system show dialog box and allow user to
 * choose file to save script. And get directory from user choose one and set
 * into writeScrpitForSave(directory,script) to write the script into the file.
 * 
 * When user click on "Delete", system start to run script. If script no error proceed
 * and if script is error show error message on user interface.
 * 
 * When user click "Cancel", system clean the GUI.
 * 
 * When user click "re-flash icon 'image'", system will load existing data on
 * pane.
 * 
 */
public class DeleteTablespaces extends javax.swing.JPanel {

    /**
     * Creates new form DeleteTablespaces
     */
    public DeleteTablespaces() {
        initComponents();
        AutoCompleteDecorator.decorate(_tbsList);
        AutoCompleteDecorator.decorate(deleteIncluding);
        saveScript.setEnabled(false);
        
        scriptText.setDisabledTextColor(Color.BLACK);
    }

    public Controller thisController = new Controller();
    public int choice = 0 ;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
      
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        delete = new javax.swing.JButton();
        _tbsList = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        deleteIncluding = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        scriptText = new javax.swing.JTextArea();
        showScript = new javax.swing.JButton();
        editScript = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        update = new javax.swing.JButton();
        saveScript = new javax.swing.JButton();

        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                frameAction(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel1.setText("Tablespace Name:");

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        delete.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deleteKeyPressed(evt);
            }
        });

        _tbsList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));

        jLabel2.setText("Delete Including:");

        deleteIncluding.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--", "CONTENTS AND DATAFILES", "CONTENTS" }));

        scriptText.setColumns(20);
        scriptText.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        scriptText.setRows(5);
        scriptText.setEnabled(false);
        jScrollPane1.setViewportView(scriptText);

        showScript.setText("Show Script");
        showScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showScriptActionPerformed(evt);
            }
        });
        showScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                showScriptKeyPressed(evt);
            }
        });

        editScript.setText("Edit Script");
        editScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editScriptActionPerformed(evt);
            }
        });
        editScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                editScriptKeyPressed(evt);
            }
        });

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });
        cancel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancelKeyPressed(evt);
            }
        });

        update.setIcon(thisController.refreshIcon(15));
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        update.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                updateKeyPressed(evt);
            }
        });

        saveScript.setText("Save Script");
        saveScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveScriptActionPerformed(evt);
            }
        });
        saveScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saveScriptKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(delete))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(saveScript, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                            .addComponent(editScript, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(showScript, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(38, 38, 38)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteIncluding, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(_tbsList, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(_tbsList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(deleteIncluding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(showScript)
                        .addGap(18, 18, 18)
                        .addComponent(editScript)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveScript))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(delete)
                            .addComponent(cancel))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        
        int reply = JOptionPane.showConfirmDialog(null, "Are you sure you would like to Delete "
                +(String) _tbsList.getSelectedItem(), 
                "Click Yes or No", JOptionPane.YES_NO_OPTION);
        
        if(reply == JOptionPane.YES_OPTION){
            delete.setEnabled(false);
            enableAll(false);
            if(choice == 3){//Edit Script
                
                //get tablespace location
                thisController.method = "getTbsLoc";
                thisController.script = "SELECT FILE_NAME\n" +
                                "FROM DBA_DATA_FILES\n" +
                                "WHERE TABLESPACE_NAME = '"+_tbsList.getSelectedItem()+"'";
                
                thisController.connectiontoDB("getTbsLoc");
                
                //set tablespace location into part
                String path = thisController.dir;
                      
                thisController.script = scriptText.getText();
                
                Boolean check = thisController.connectiontoDB("script");
                
                if(check == true){//script is successful executed
                    
                    //try to delete datafile
                    if(path != "--Please Select One--"){
                        final File file = new File(path);
                        if(file.exists()){//data file is still in drive
                            try {
                                //delete file
                                thisController.deleteFile(file);
                            } catch (IOException ex) {
                                Logger.getLogger(Controller.class.getName()).
                                        log(Level.SEVERE, null, ex);
                            }
                        }
                    }
             
                    JOptionPane.showMessageDialog(this, "Tablespace is Deleted.");
                    thisController.history(thisController.script);
                    retrieveDataFromDB();
                    clean();
                }else{//script is execute fail
                    JOptionPane.showMessageDialog(this, thisController.errorMsg,
                        "Error",JOptionPane.ERROR_MESSAGE);
                    scriptText.setEnabled(true);
                    editScript.setEnabled(true);
                    cancel.setEnabled(true);
                    delete.setEnabled(true);
                }   
            }else{
                choice = 1;//user didn't click on edit script
                actions();
            }                 
            retrieveDataFromDB();
        }else{
            clean();
        }  
    }//GEN-LAST:event_deleteActionPerformed

    private void showScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showScriptActionPerformed
        saveScript.setEnabled(true);
        choice = 2;
        actions();
    }//GEN-LAST:event_showScriptActionPerformed

    private void editScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editScriptActionPerformed
        choice = 3;
        _tbsList.setEnabled(false);
        deleteIncluding.setEnabled(false);
        showScript.setEnabled(false);
        scriptText.setEnabled(true);
        saveScript.setEnabled(true);
    }//GEN-LAST:event_editScriptActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        clean();
    }//GEN-LAST:event_cancelActionPerformed

    private void frameAction(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_frameAction
        retrieveDataFromDB();
    }//GEN-LAST:event_frameAction

    private void showScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_showScriptKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            showScript.doClick();
        }
    }//GEN-LAST:event_showScriptKeyPressed

    private void editScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editScriptKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            editScript.doClick();
        }
    }//GEN-LAST:event_editScriptKeyPressed

    private void cancelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancelKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            cancel.doClick();
        }
    }//GEN-LAST:event_cancelKeyPressed

    private void deleteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deleteKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            delete.doClick();
        }
    }//GEN-LAST:event_deleteKeyPressed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        retrieveDataFromDB();
    }//GEN-LAST:event_updateActionPerformed

    private void updateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_updateKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            update.doClick();
        }
    }//GEN-LAST:event_updateKeyPressed

    private void saveScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveScriptActionPerformed

        int val = 0;

        //set button name for fileChooser
        UIManager.put("FileChooser.openDialogTitleText", "Load Script File");
        UIManager.put("FileChooser.openButtonText", "Save Script");

        //Browse file from drive
        JFileChooser fileChooser = new JFileChooser();

        try {
            val = fileChooser.showOpenDialog(null);
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Error opening the file dialogue",
                null, JOptionPane.ERROR_MESSAGE);
        }

        //if file is approve to open start to save the script to that file
        if (val == JFileChooser.APPROVE_OPTION) {
            String saveScriptPath = fileChooser.getSelectedFile().getAbsolutePath();
            if(saveScriptPath.endsWith(".sql")){
                thisController.writeScrpitForSave(saveScriptPath,scriptText.getText());
            }else{
                saveScriptPath = saveScriptPath+".sql";
                thisController.writeScrpitForSave(saveScriptPath,scriptText.getText());
            }
            JOptionPane.showMessageDialog(null, "Script is Saved.");
        }
    }//GEN-LAST:event_saveScriptActionPerformed

    private void saveScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saveScriptKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            saveScript.doClick();
        }
    }//GEN-LAST:event_saveScriptKeyPressed

    private void retrieveDataFromDB(){

        //get the list of tablespaces
        thisController.connectiontoDB("getTbs");
  
        //set the list of tablespaces into array
        ArrayList<String> arrList = new ArrayList<String>();
        arrList.addAll(thisController.arrList);
        
        //remove existing data
        _tbsList.removeAllItems();
        _tbsList.addItem("--Please Select One--");
        
        //added tablespaces list from dtabase to gui design
        for(int i = 0; i<arrList.size();i++){
            _tbsList.addItem(arrList.get(i));
        }
    }
    
    private void actions(){
        if(choice == 1){//user run script without click on edit script
            //save location into file
            thisController.method = "getTbsLoc";
            thisController.script = "SELECT FILE_NAME\n" +
                "FROM DBA_DATA_FILES\n" +
                "WHERE TABLESPACE_NAME = '"+_tbsList.getSelectedItem()+"'";
            thisController.connectiontoDB("getTbsLoc");
            //set directory part
            String path = thisController.dir;
            //convert to file type
            final File file = new File(path);

            Boolean check = thisController.connectiontoDB("DeleteTablespace");  
            if(check == true){
                
                //try to delete datafile
                if(file.exists()){
                    try {
                        thisController.deleteFile(file);
                    } catch (IOException ex) {
                        Logger.getLogger(Controller.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
                JOptionPane.showMessageDialog(this, "Tablspace is deleted.");
                thisController.history(thisController.deleteTablespace());
                retrieveDataFromDB();
                clean();           
            }else{
                JOptionPane.showMessageDialog(this, thisController.errorMsg,
                        "Error",JOptionPane.ERROR_MESSAGE);
                enableAll(true);
            }
        }else if (choice == 2){//user click on show script
            scriptText.setText(thisController.deleteTablespace());
        }      
    }
    
    private void clean(){//reflash GUI
        _tbsList.setEnabled(true);
        deleteIncluding.setEnabled(true);
        showScript.setEnabled(true);
        editScript.setEnabled(true);
        delete.setEnabled(true);
        scriptText.setText("");
        scriptText.setEnabled(false);
        _tbsList.setSelectedIndex(0);
        deleteIncluding.setSelectedIndex(0);
        saveScript.setEnabled(false);
    }
    
    private void enableAll(boolean b){//Enable all feature
        _tbsList.setEnabled(b);
        deleteIncluding.setEnabled(b);
        showScript.setEnabled(b);
        editScript.setEnabled(b);
        scriptText.setEnabled(b);
        delete.setEnabled(b);
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JComboBox _tbsList;
    private javax.swing.JButton cancel;
    private javax.swing.JButton delete;
    public static javax.swing.JComboBox deleteIncluding;
    private javax.swing.JButton editScript;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveScript;
    private javax.swing.JTextArea scriptText;
    private javax.swing.JButton showScript;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}