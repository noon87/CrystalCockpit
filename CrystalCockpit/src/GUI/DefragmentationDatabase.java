/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Controller.Controller;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author Nan
 * @Write Program by Nan
 * 
 * Defragmentation Database Description
 * =====================================
 * Allow user to defragment current database and show current situation in text area.
 * 
 * How Function work
 * =================
 * When Frame open, load all data from Database.
 * 
 * When user click on "Defragment", call check space function from controller.
 * If space is enough to defragment proceed and if not let user to make same space
 * from drive.
 * 
 * After space is enough, create the temporary folder. Than start to do defragmentation 
 * by calling method from controller. 
 * 
 * After defragmentation complete remove temporary folder.
 * 
 */

public class DefragmentationDatabase extends javax.swing.JPanel {

    /**
     * Creates new form DefragmentationDatabase
     */
    
    public DefragmentationDatabase() {
        initComponents();
        progressBar.setVisible(false);
        statusFile.setEnabled(false);
        
        statusFile.setDisabledTextColor(Color.BLACK);
    }
    
    public Controller thisController = new Controller();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
      
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        defragment = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        statusFile = new javax.swing.JTextArea();
        progressBar = new javax.swing.JProgressBar();
        clearText = new javax.swing.JButton();

        jLabel1.setText("Defragmentation Database");

        defragment.setText("Defragment");
        defragment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defragmentActionPerformed(evt);
            }
        });
        defragment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                defragmentKeyPressed(evt);
            }
        });

        statusFile.setColumns(20);
        statusFile.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        statusFile.setRows(5);
        jScrollPane1.setViewportView(statusFile);

        clearText.setText("Clear Text");
        clearText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTextActionPerformed(evt);
            }
        });
        clearText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                clearTextKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(defragment)
                        .addContainerGap(232, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(clearText)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(progressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(defragment))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearText)
                .addGap(10, 10, 10))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void defragmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defragmentActionPerformed
        statusFile.setText("");
        defragment.setEnabled(false);
        clearText.setEnabled(false);
        
        thisController.connectiontoDB("getDBSize");
        addStatus("Checking free space......");
        thisController.checkSpace();
        
        if(thisController._checkSpace == true){
            addStatus("Space is enough to make defragmentation.");
            
            SwingWorker sw = new SwingWorker<Boolean,Integer>(){
                protected Boolean doInBackground()throws Exception{
                    progressBar.setVisible(true);
                    publish(0);
                    addStatus("Creating temporary folder....");
                    thisController.createTempFolder();
                    addStatus("Temporary folder is created.");

                    publish(10);
                    addStatus("Start defragment....");
                    thisController.defgDB();
                    addStatus("Database is defragmented.");

                    publish(95);

                    defragment.setEnabled(true);
                    return true;
                }

                protected void process(List<Integer> chunks) {
                    for (Integer i : chunks)
                    progressBar.setValue(i);
                }
                protected void done() {
                    try{
                        boolean b = get();
                        if(b){
                            progressBar.setValue(100);
                            progressBar.setVisible(false);
                            clearText.setEnabled(true);
                        }
                    }catch (ExecutionException ex) {
                        Logger.getLogger(MigrationTable.class.getName()).log(Level.SEVERE, null, ex);
                        statusFile.setText("");
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MigrationTable.class.getName()).log(Level.SEVERE, null, ex);
                        statusFile.setText("");
                    }
                }
            };
            sw.execute();
            progressBar.setVisible(false);
            
        }else{
            JOptionPane.showMessageDialog(this, "Hard drive space is not enought to defragment.\n"
                    + "Please manage your space and try it again.",
                        "Error",JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_defragmentActionPerformed

    private void defragmentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_defragmentKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            defragment.doClick();
        }
    }//GEN-LAST:event_defragmentKeyPressed

    private void clearTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTextActionPerformed
        statusFile.setText("");
    }//GEN-LAST:event_clearTextActionPerformed

    private void clearTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clearTextKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            clearText.doClick();
        }
    }//GEN-LAST:event_clearTextKeyPressed

    public static void addStatus(String status) {
        if (status == null) {
            statusFile.setText("");
        } else {
            if (statusFile.getText().equals("")) {
                statusFile.setText(status);
            } else {
                statusFile.setText(statusFile.getText() + "\n" + status);
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearText;
    private javax.swing.JButton defragment;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JProgressBar progressBar;
    public static javax.swing.JTextArea statusFile;
    // End of variables declaration//GEN-END:variables
}
