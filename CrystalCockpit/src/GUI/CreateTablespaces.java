/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Controller.*;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author Nan
 * @Write Program by Nan
 * 
 * Create Tablespace Description
 * ===============================
 * This function allow user to create new tablespace into current database.
 * Make sure user fill up all necessary information before process to execute 
 * script. If information is not enough to execute script show dialog box to 
 * user interface let user to fill up necessary information.
 * Allow user to see script by pressing “Show Script” and also let user to 
 * change script by click on “Edit Script”.
 * At the same time, allow user to save current script into drive/temp drive. 
 * So that user can take that script to anywhere.
 * 
 * How Function work
 * =================
 * When Frame open, load all data from Database.
 * 
 * When user click on "Show Script" set the choose=2 and call actions() to
 * connect Controller's functions to execute statement.
 * 
 * When user click on "Edit Script" text area will enabled and allow user to
 * change current script. Than set choice=3 and call actions() to connect
 * Controller's functions to execute statement.
 * 
 * When user click on "Save Script", system show dialog box and allow user to
 * choose file to save script. And get directory from user choose one and set
 * into writeScrpitForSave(directory,script) to write the script into the file.
 * 
 * When user click on "Browse", system show dialog box and allow user to 
 * select directory to save data file.
 * 
 * When user click on "OK", system start to run script. If script no error proceed
 * and if script is error show error message on user interface.
 * 
 * When user click "Cancel", system clean the GUI.
 * 
 * When user click "re-flash icon 'image'", system will load existing data on
 * pane.
 * 
 */
public class CreateTablespaces extends javax.swing.JPanel {

    /**
     * Creates new form CreateTablespaces
     */
    public CreateTablespaces() {
        initComponents();
        AutoCompleteDecorator.decorate(method);
        saveScript.setEnabled(false);
        
        scriptText.setDisabledTextColor(Color.BLACK);
    }

    public Controller thisController = new Controller();
    public int choice;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        ok = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tbsName = new javax.swing.JTextField();
        path = new javax.swing.JTextField();
        cancel = new javax.swing.JButton();
        browseFile = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        size = new javax.swing.JTextField();
        measureSize = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        method = new javax.swing.JComboBox();
        showScript = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        scriptText = new javax.swing.JTextArea();
        editScript = new javax.swing.JButton();
        saveScript = new javax.swing.JButton();

        ok.setText("Create");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });
        ok.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                okKeyPressed(evt);
            }
        });

        jLabel1.setText("Tablespace Name:");

        jLabel2.setText("Data File Location:");

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });
        cancel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancelKeyPressed(evt);
            }
        });

        browseFile.setText("Browse");
        browseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseFileActionPerformed(evt);
            }
        });
        browseFile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                browseFileKeyPressed(evt);
            }
        });

        jLabel3.setText("Size:");

        size.setText("0");

        measureSize.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "K", "M", "G", "T" }));

        jLabel4.setText("Exten:");

        method.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--", "AUTOALLOCATE", "UNIFORM SIZE 128K" }));

        showScript.setText("Show Script");
        showScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showScriptActionPerformed(evt);
            }
        });
        showScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                showScriptKeyPressed(evt);
            }
        });

        scriptText.setColumns(20);
        scriptText.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        scriptText.setRows(5);
        scriptText.setWrapStyleWord(true);
        scriptText.setEnabled(false);
        jScrollPane1.setViewportView(scriptText);

        editScript.setText("Edit Script");
        editScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editScriptActionPerformed(evt);
            }
        });
        editScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                editScriptKeyPressed(evt);
            }
        });

        saveScript.setText("Save Script");
        saveScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveScriptActionPerformed(evt);
            }
        });
        saveScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saveScriptKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cancel)
                        .addGap(18, 18, 18)
                        .addComponent(ok))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(showScript, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(editScript, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(saveScript, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jScrollPane1))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel3)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1))
                            .addGap(26, 26, 26)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(tbsName, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(path, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(size)
                                        .addGap(18, 18, 18)
                                        .addComponent(measureSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(method, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addComponent(browseFile))))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(tbsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(browseFile))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(size, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(measureSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(method, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addComponent(showScript)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editScript)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveScript)
                        .addGap(34, 34, 34))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ok)
                    .addComponent(cancel))
                .addContainerGap(32, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseFileActionPerformed

        //Browse location to save datafile
        int val = 0; 
        
        //Browse file from drive
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        try {
            val = fileChooser.showOpenDialog(null);
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Error opening the file dialogue", 
                    null, JOptionPane.ERROR_MESSAGE);
        }

        if (val == JFileChooser.APPROVE_OPTION) {
            //set directory that user chossed
            path.setText(fileChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_browseFileActionPerformed

    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        int reply = JOptionPane.showConfirmDialog(null, "Are you sure you would like to Create "
                + tbsName.getText(), 
                "Click Yes or No", JOptionPane.YES_NO_OPTION);
        if(reply == JOptionPane.YES_OPTION){
            //checking for not null
            if(tbsName.getText()!= "" && path.getText() != "" &&
                    size.getText() != "0"){
                enableAll(false);
                if(choice == 3){
                    thisController.script = scriptText.getText();
                    Boolean check = thisController.connectiontoDB("script");
                    if(check == true){
                        thisController.history(scriptText.getText());
                        JOptionPane.showMessageDialog(this, "New Tablspace is created."); 
                        clean();
                    }else{
                        JOptionPane.showMessageDialog(this, thisController.errorMsg,
                            "Error",JOptionPane.ERROR_MESSAGE);
                        scriptText.setEnabled(true);
                        editScript.setEnabled(true);
                        cancel.setEnabled(true);
                        ok.setEnabled(true);
                    }
                }else {
                    choice = 1;
                    actions();
                }
            }else{
                JOptionPane.showMessageDialog(this, "Please fill up all information.",
                        "Error",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_okActionPerformed

    private void showScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showScriptActionPerformed
        saveScript.setEnabled(true);
        choice = 2;
        actions();
    }//GEN-LAST:event_showScriptActionPerformed

    private void editScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editScriptActionPerformed
        choice = 3;
        tbsName.setEnabled(false);
        path.setEnabled(false);
        size.setEnabled(false);
        method.setEnabled(false);
        measureSize.setEnabled(false);
        scriptText.setEnabled(true);
        saveScript.setEnabled(true);
    }//GEN-LAST:event_editScriptActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        clean();
    }//GEN-LAST:event_cancelActionPerformed

    private void showScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_showScriptKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            showScript.doClick();
        }
    }//GEN-LAST:event_showScriptKeyPressed

    private void editScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editScriptKeyPressed
           if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            editScript.doClick();
        }
    }//GEN-LAST:event_editScriptKeyPressed

    private void cancelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancelKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            cancel.doClick();
        }
    }//GEN-LAST:event_cancelKeyPressed

    private void okKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_okKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            ok.doClick();
        }
    }//GEN-LAST:event_okKeyPressed

    private void browseFileKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_browseFileKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            browseFile.doClick();
        }
    }//GEN-LAST:event_browseFileKeyPressed

    private void saveScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveScriptActionPerformed
        //Clicked on Save Script
        int val = 0;

        //set button name for fileChooser
        UIManager.put("FileChooser.openDialogTitleText", "Load Script File");
        UIManager.put("FileChooser.openButtonText", "Save Script");
        
        //Browse file from drive
        JFileChooser fileChooser = new JFileChooser();

        try {
            val = fileChooser.showOpenDialog(null);
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Error opening the file dialogue",
                null, JOptionPane.ERROR_MESSAGE);
        }

        //if file is approve to open start to save the script to that file
        if (val == JFileChooser.APPROVE_OPTION) {
            String saveScriptPath = fileChooser.getSelectedFile().getAbsolutePath();
            if(saveScriptPath.endsWith(".sql")){
                thisController.writeScrpitForSave(saveScriptPath,scriptText.getText());
            }else{
                saveScriptPath = saveScriptPath+".sql";
                thisController.writeScrpitForSave(saveScriptPath,scriptText.getText());
            }
            JOptionPane.showMessageDialog(null, "Script is Saved.");
        }
    }//GEN-LAST:event_saveScriptActionPerformed

    private void saveScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saveScriptKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            saveScript.doClick();
        }
    }//GEN-LAST:event_saveScriptKeyPressed

    private void actions(){
        if(choice == 1){//start create new tablespace
            Boolean check = thisController.connectiontoDB("CreateTablespace");
            if(check == true){//if true tablespace is created
                thisController.history(thisController.createTablespace());
                JOptionPane.showMessageDialog(this, "New Tablspace is created."); 
                clean();//clean the GUI form
            }else{//if false tablespace creation fail and show error msg to user
                JOptionPane.showMessageDialog(this, thisController.errorMsg,
                  "Error",JOptionPane.ERROR_MESSAGE);
                enableAll(true);
                scriptText.setEnabled(false);
                scriptText.setText("");
            }
        }else if (choice == 2){//show script to scriptText file in GUI
              scriptText.setText(thisController.createTablespace());
        }
    }
    
    private void clean(){//clean the GUI interface
        tbsName.setText("");
        tbsName.setEnabled(true);
        path.setText("");
        path.setEnabled(true);
        size.setText("0");
        size.setEnabled(true);
        measureSize.setEnabled(true);
        scriptText.setText("");
        scriptText.setEnabled(false);
        showScript.setEnabled(true);
        editScript.setEnabled(true);
        method.setEnabled(true);
        cancel.setEnabled(true);
        ok.setEnabled(true);
        method.setSelectedIndex(0);
        saveScript.setEnabled(false);
    }
    
    private void enableAll(boolean b){//Enable all when program is running
        tbsName.setEnabled(b);
        path.setEnabled(b);
        size.setEnabled(b);
        measureSize.setEnabled(b);
        method.setEnabled(b);
        showScript.setEnabled(b);
        editScript.setEnabled(b);
        cancel.setEnabled(b);
        ok.setEnabled(b);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseFile;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancel;
    private javax.swing.JButton editScript;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JComboBox measureSize;
    public static javax.swing.JComboBox method;
    private javax.swing.JButton ok;
    public static javax.swing.JTextField path;
    private javax.swing.JButton saveScript;
    public static javax.swing.JTextArea scriptText;
    private javax.swing.JButton showScript;
    public static javax.swing.JTextField size;
    public static javax.swing.JTextField tbsName;
    // End of variables declaration//GEN-END:variables
}
