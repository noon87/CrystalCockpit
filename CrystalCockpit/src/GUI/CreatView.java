/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Controller.Controller;
import static Controller.Controller.connection;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author Ben
 */
public class CreatView extends javax.swing.JPanel {

    /**
     * Creates new form CreatView
     */
    static int i=0;
    boolean checkEdit = false;
   
    public Controller thisController = new Controller();
    

    public CreatView() {
        if(i==1){
            initComponents();
            table_store = new ArrayList<String>();
            column_store = new ArrayList<String>();
            cons_store = new ArrayList<String>();

            joinText.setEditable(false);
            checkEdit = false;
            saveScript.setEnabled(false);
            AutoCompleteDecorator.decorate(tableName);
            AutoCompleteDecorator.decorate(columnName);
            
            joinText.setDisabledTextColor(Color.BLACK);
            scriptText.setDisabledTextColor(Color.BLACK);
        }
    }
  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
//    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        columnName = new javax.swing.JComboBox();
        create = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        showScript = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        viewName = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        scriptText = new javax.swing.JTextArea();
        tableName = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        joinText = new javax.swing.JTextArea();
        editScript = new javax.swing.JButton();
        addList = new javax.swing.JButton();
        clearScript = new javax.swing.JButton();
        update = new javax.swing.JButton();
        createList = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        colName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        saveScript = new javax.swing.JButton();

        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel2.setText("Name");

        columnName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));

        create.setText("Create");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });
        create.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                createKeyPressed(evt);
            }
        });

        jLabel3.setText("Select Table");

        showScript.setText("Show Script");
        showScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showScriptActionPerformed(evt);
            }
        });
        showScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                showScriptKeyPressed(evt);
            }
        });

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });
        cancel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancelKeyPressed(evt);
            }
        });

        scriptText.setColumns(20);
        scriptText.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        scriptText.setRows(5);
        scriptText.setWrapStyleWord(true);
        scriptText.setEnabled(false);
        jScrollPane2.setViewportView(scriptText);

        tableName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));
        tableName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableNameActionPerformed(evt);
            }
        });

        jLabel4.setText("Select Column");

        joinText.setColumns(20);
        joinText.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        joinText.setRows(5);
        jScrollPane1.setViewportView(joinText);

        editScript.setText("Edit Script");
        editScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editScriptActionPerformed(evt);
            }
        });
        editScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                editScriptKeyPressed(evt);
            }
        });

        addList.setText("Add");
        addList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addListActionPerformed(evt);
            }
        });
        addList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addListKeyPressed(evt);
            }
        });

        clearScript.setText("Clear Script");
        clearScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearScriptActionPerformed(evt);
            }
        });
        clearScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                clearScriptKeyPressed(evt);
            }
        });

        update.setIcon(thisController.refreshIcon(15));
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        update.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                updateKeyPressed(evt);
            }
        });

        createList.setText("Clear List");
        createList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createListActionPerformed(evt);
            }
        });
        createList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                createListKeyPressed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Name of column");

        jLabel6.setText("Please note that system is trying to guess best script for join more than one tables, we suggest to double check");

        saveScript.setText("Save Script");
        saveScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveScriptActionPerformed(evt);
            }
        });
        saveScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saveScriptKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 84, Short.MAX_VALUE)
                                .addComponent(update))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(saveScript, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(editScript, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                                        .addComponent(clearScript, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
                                    .addComponent(showScript, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(createList)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addList, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4))
                                        .addGap(18, 18, 18))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(32, 32, 32)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tableName, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(columnName, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(viewName, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(colName, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane1)))
                .addGap(44, 44, 44))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cancel)
                .addGap(18, 18, 18)
                .addComponent(create)
                .addGap(79, 79, 79))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(viewName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(tableName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(columnName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(colName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 67, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(update, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(createList)
                                .addComponent(addList))))
                    .addComponent(jScrollPane1))
                .addGap(32, 32, 32)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(showScript)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editScript)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearScript)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveScript))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cancel)
                            .addComponent(create))))
                .addGap(11, 11, 11))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed

        thisController.connectiontoDB("openConn");        
        if(checkEdit){//User clicked on edit script
           int checkSure = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to create the view?", "Notice", JOptionPane.YES_NO_OPTION);
           if(checkSure==0){ 
                script = scriptText.getText();
                boolean ch = true;
                try {

                    PreparedStatement st = connection.prepareStatement(script);
                    st.executeUpdate();
                    st.close();
                    thisController.history(script);
                    
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    ch = false;
                }
                if(ch == true){
                    JOptionPane.showMessageDialog(this," View created");
                    viewName.setText("");
                    joinText.setText("");
                    colName.setText("");
                    tableName.setSelectedIndex(0);
                }
                ArrayList<String> arr = new ArrayList<String>();      
                arr = getTableNames();
                tableName.removeAllItems();
                tableName.addItem("--Please Select One--");
                for(int i = 0; i<arr.size();i++){
                    if(arr.get(i).toUpperCase().equals("HISTORY")){}else{
                        tableName.addItem(arr.get(i));
                    }      
                }
           }
        }
        else//user didn't click on edit script
        {
           int checkSure = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to create the view?", "Notice", JOptionPane.YES_NO_OPTION);
           if(checkSure==0){ 
                script = "";
                scriptText.setEnabled(false);
                String fileds = " ";
                String tables = " ";
                scriptText.setText("");
                for(int i=0;i<table_store.size();i++){
                    fileds = fileds.concat(" " + table_store.get(i) +"."+column_store.get(i)+ " \n " );
                    tables = tables.concat(" "+ table_store.get(i)+" ");
                }
                
                script = "CREATE VIEW " + viewName.getText() + "\n AS SELECT " + fileds + "\n from" + tables;
                scriptText.setEditable(false);
                scriptText.append(script);
                script = scriptText.getText();
                
                boolean ch = true;
                try {

                    PreparedStatement st = connection.prepareStatement(script);
                    st.executeUpdate();
                    thisController.history(script);
                    st.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    ch = false;
                }
                if(ch == true){
                    JOptionPane.showMessageDialog(this," View created");
                    viewName.setText("");
                    joinText.setText("");
                    colName.setText("");
                    tableName.setSelectedIndex(0);
                }
                ArrayList<String> arr = new ArrayList<String>();      
                arr = getTableNames();
                
                tableName.removeAllItems();
                tableName.addItem("--Please Select One--");
                for(int i = 0; i<arr.size();i++){
                    if(arr.get(i).toUpperCase().equals("HISTORY")){}else{
                    tableName.addItem(arr.get(i));
                    }
                }  
           }
       }   
        try {
               connection.close();
        } catch (SQLException ex1) {
               Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
        }
        table_store.clear();
        column_store.clear(); 
        viewName.setText("");
        joinText.setText("");
        scriptText.setText("");
        script = "";
        cons_store.clear();
        
    }//GEN-LAST:event_createActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        table_store.clear();
        column_store.clear(); 
        viewName.setText("");
        joinText.setText("");
        scriptText.setText("");
        script = "";
        colName.setText("");
        saveScript.setEnabled(false);
        tableName.setSelectedIndex(0);
        columnName.setSelectedIndex(0);
        
    }//GEN-LAST:event_cancelActionPerformed

    private void tableNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableNameActionPerformed

    String tableSelected;
        tableSelected = (String) tableName.getSelectedItem();
        if(tableName.getSelectedIndex()==0){
            //do nothing
        }else{
            ArrayList<String> arr = new ArrayList<String>();
            arr.addAll(Arrays.asList(getTableColumnNames(tableSelected)));
            columnName.removeAllItems();
            columnName.addItem("--Please Select One--");
            for(int i = 0; i<arr.size();i++){
                columnName.addItem(arr.get(i));
                }
        }
    }//GEN-LAST:event_tableNameActionPerformed

    private void addListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addListActionPerformed
        if(viewName.getText().length()!=0
                && tableName.getSelectedIndex()!=0
                && columnName.getSelectedIndex()!=0
                && colName.getText().length()!=0){
        try {
            thisController.connectiontoDB("openConn");
    
            table_store .add((String) tableName.getSelectedItem());
            column_store.add(  (String) columnName.getSelectedItem().toString() + " AS " + colName.getText()  );

            joinText.append(((String) columnName.getSelectedItem())+ "\n");
            //To get primary key
            String scriptPKey =
                        "select ucc.column_name"
                       + " from "
                       + " user_constraints uc "
                       + ", user_cons_columns ucc "
                       + " where "
                       + " uc.table_name = ucc.table_name "
                       + " and "
                       + " uc.constraint_name = ucc.constraint_name "
                       + " and "
                       + " uc.constraint_type = 'P' "
                       + " and "
                       + " uc.table_name = '" +  (String) tableName.getSelectedItem() + "'"
                       + " order by "
                       + " uc.table_name"
                       + ", uc.constraint_name"
                       + ", ucc.position ";
            
                ArrayList<String> pKey = new ArrayList<String>();
                Statement stmQuery = connection.createStatement();
                ResultSet rsQuery = stmQuery.executeQuery (scriptPKey);
                
                while(rsQuery.next())
                {
                    pKey.add( rsQuery.getString(1));
                }
                if(pKey.size() == 0)
                {
                    joinText.append("There is no PRIMARY KEY in this table \n");
                }
                for(int i=0;i<pKey.size();i++)
                {
                    joinText.append("Primary key in this table key is " + pKey.get(i));
                    String s = tableName.getSelectedItem().toString() + "."+pKey.get(i);
                    cons_store.add(s);
                }
                joinText.append(" \n");
                
                
        } catch (SQLException ex) {
            
            Logger.getLogger(Controller.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
                connection.close();
            }
        catch (SQLException ex1) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
        }

         try {
            thisController.connectiontoDB("openConn");

                //To get foreign key
                String scriptPKey2 ="SELECT c_list.CONSTRAINT_NAME as NAME, "+
                "substr(c_src.COLUMN_NAME, 1, 20) as SRC_COLUMN, "+
                "c_dest.TABLE_NAME as DEST_TABLE, "+
                "substr(c_dest.COLUMN_NAME, 1, 20) as DEST_COLUMN "+
                "FROM ALL_CONSTRAINTS c_list, ALL_CONS_COLUMNS c_src, ALL_CONS_COLUMNS c_dest "+
                "WHERE c_list.CONSTRAINT_NAME = c_src.CONSTRAINT_NAME "+
                "AND c_list.R_CONSTRAINT_NAME = c_dest.CONSTRAINT_NAME "+
                "AND c_list.CONSTRAINT_TYPE = 'R' "+
                "AND c_src.TABLE_NAME = '" + (String) tableName.getSelectedItem() + "' " + 
                "GROUP BY c_list.CONSTRAINT_NAME, c_src.TABLE_NAME, "+
                "c_src.COLUMN_NAME, c_dest.TABLE_NAME,    c_dest.COLUMN_NAME ";
                
                Statement stmQuery2 = connection.createStatement();
                ResultSet rsQuery2 = stmQuery2.executeQuery (scriptPKey2);
                
                while(rsQuery2.next())
                {    
                    String NAME  = rsQuery2.getString("NAME");
                    String SRC_COLUMN = rsQuery2.getString("SRC_COLUMN");
                    String DEST_TABLE = rsQuery2.getString("DEST_TABLE");
                    String DEST_COLUMN = rsQuery2.getString("DEST_COLUMN");
                    joinText.append(/*"FOREIGN KEY NAME= " + NAME + */" SRC_COLUMN= " + SRC_COLUMN 
                            + " \nDEST_TABLE= "+ DEST_TABLE
                            + "\n DEST_COLUMN= " + DEST_COLUMN );
                    String s = tableName.getSelectedItem().toString() +"." + SRC_COLUMN;
                    cons_store.add(s);
                }
                joinText.append("\n");
 
         } catch (SQLException ex) {
            Logger.getLogger(Controller.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
                connection.close();
            } catch (SQLException ex1) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }else{
            JOptionPane.showMessageDialog(this, "Please fill up correct information.");
        }
    }//GEN-LAST:event_addListActionPerformed

    
    private void showScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showScriptActionPerformed
        checkEdit = true;
        script = "";
        int k = 0;
        scriptText.enable(false);
        String fileds = " ";
        String tables = " ";
        String join = " ";
        scriptText.setText("");
        saveScript.setEnabled(true);
        for(int i=0;i<table_store.size();i++){
            fileds = fileds.concat(" " + table_store.get(i) +"."+column_store.get(i)+ ", " + " \n " );
            //If there is not the name of table add it
            if(!tables.contains(table_store.get(i)))
            {
                k++;
                if(k == 1)
                {
                    tables = tables.concat(" "+ table_store.get(i)+" ");
                }
                else
                {
                    tables = tables.concat(" JOIN "+ table_store.get(i)+" ");
                }
            }
        }
        join = join.concat("( ");
        for(int i=0; i<cons_store.size(); i++)
        {            
            join = join.concat(cons_store.get(i) + " = "  );
        }
        if(join.contains("="))
        {
            join = join.substring(0,join.lastIndexOf("=") );
        }
        join = join.concat(" )");
        if(fileds.equals(" ")){
         //do nothing   
        }else {
        fileds = fileds.substring(0,fileds.lastIndexOf(",") );
        }
        if(k > 1)
        {
            script = "CREATE VIEW " + viewName.getText() + "\n AS SELECT " + fileds + "\n from" + tables + " on " + join;
        }
        else
        {
            script = "CREATE VIEW " + viewName.getText() + "\n AS SELECT " + fileds + "\n from" + tables;
        }
        scriptText.setEditable(false);
        scriptText.append(script);

    }//GEN-LAST:event_showScriptActionPerformed

    private void editScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editScriptActionPerformed
        saveScript.setEnabled(false);
        scriptText.setEditable(true);
        scriptText.setEnabled(true);
        script = "";
    }//GEN-LAST:event_editScriptActionPerformed

    private void clearScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearScriptActionPerformed

        table_store.clear();
        column_store.clear(); 
        script = "";
        scriptText.setText("");
        joinText.setText("");
        scriptText.setEditable(true);
        viewName.setEnabled(true);
        
    }//GEN-LAST:event_clearScriptActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        ArrayList<String> arr = new ArrayList<String>();      
        arr = getTableNames();
        tableName.removeAllItems();
        tableName.addItem("--Please Select One--");
        for(int i = 0; i<arr.size();i++){
            if(arr.get(i).toUpperCase().equals("HISTORY")){}else{
            tableName.addItem(arr.get(i));
            }
        }    
    }//GEN-LAST:event_updateActionPerformed

    private void createListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createListActionPerformed
        scriptText.setText("");
        joinText.setText("");
        table_store.removeAll(table_store);
        column_store.removeAll(table_store);
    }//GEN-LAST:event_createListActionPerformed

    private void updateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_updateKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            update.doClick();
        }
    }//GEN-LAST:event_updateKeyPressed

    private void createListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_createListKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            createList.doClick();
        }
    }//GEN-LAST:event_createListKeyPressed

    private void addListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addListKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            addList.doClick();
        }
    }//GEN-LAST:event_addListKeyPressed

    private void showScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_showScriptKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            showScript.doClick();
        }
    }//GEN-LAST:event_showScriptKeyPressed

    private void editScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editScriptKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            editScript.doClick();
        }
    }//GEN-LAST:event_editScriptKeyPressed

    private void clearScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clearScriptKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            clearScript.doClick();
        }
    }//GEN-LAST:event_clearScriptKeyPressed

    private void cancelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancelKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            cancel.doClick();
        }
    }//GEN-LAST:event_cancelKeyPressed

    private void createKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_createKeyPressed
          if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            create.doClick();
        }
    }//GEN-LAST:event_createKeyPressed

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        
        ArrayList<String> arr = new ArrayList<String>();      
        arr = getTableNames();
        tableName.removeAllItems();
        tableName.addItem("--Please Select One--");
        for(int i = 0; i<arr.size();i++){
            if(arr.get(i).toUpperCase().equals("HISTORY")){}else{
            tableName.addItem(arr.get(i));
            }
        }
    }//GEN-LAST:event_formAncestorAdded

    private void saveScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveScriptActionPerformed

        int val = 0;

        //set button name for fileChooser
        UIManager.put("FileChooser.openDialogTitleText", "Load Script File");
        UIManager.put("FileChooser.openButtonText", "Save Script");

        //Browse file from drive
        JFileChooser fileChooser = new JFileChooser();

        try {
            val = fileChooser.showOpenDialog(null);
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Error opening the file dialogue",
                null, JOptionPane.ERROR_MESSAGE);
        }

        //if file is approve to open start to save the script to that file
        if (val == JFileChooser.APPROVE_OPTION) {
            String saveScriptPath = fileChooser.getSelectedFile().getAbsolutePath();
            if(saveScriptPath.endsWith(".sql")){
                thisController.writeScrpitForSave(saveScriptPath,scriptText.getText());
            }else{
                saveScriptPath = saveScriptPath+".sql";
                thisController.writeScrpitForSave(saveScriptPath,scriptText.getText());
            }
            JOptionPane.showMessageDialog(null, "Script is Saved.");
        }
    }//GEN-LAST:event_saveScriptActionPerformed

    private void saveScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saveScriptKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            saveScript.doClick();
        }
    }//GEN-LAST:event_saveScriptKeyPressed
   
    
    
    
  
    //Return name of the database by Ben
    public  String getDBName(){
        
        
        thisController.connectiontoDB("openConn");
        String dbNameTmp = null;
        String script = "SELECT sys_context('userenv','instance_name') from dual"; 
        try {
            //thisController.connectCmd("openConn");

            Statement stmQuery = connection.createStatement();
            
            
            
            ResultSet rsQuery = stmQuery.executeQuery (script);
            rsQuery.next();
            dbNameTmp = rsQuery.getString(1);
                    
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "\n Problem with database name "+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        try {
              connection.close();
        } catch (SQLException ex1) {
           Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
        }
        return dbNameTmp;
    }
    
    //Return name of the all the tables and views user can access by Ben
        public  ArrayList<String> getTableNames(){
            ArrayList<String> Table_List = new ArrayList<String>();
            thisController.connectiontoDB("openConn");

            
        try {
            
            String script = "SELECT VIEW_NAME from USER_VIEWS";
            String script2 = "SELECT table_name from user_tables";

            Statement stmQuery = connection.createStatement();
            ResultSet rsQuery = stmQuery.executeQuery (script);
            
            while(rsQuery.next())
            {
                
                Table_List.add( rsQuery.getString(1));
                
            }  

            Statement stmQuery2 = connection.createStatement();
            ResultSet rsQuery2 = stmQuery2.executeQuery (script2);
            while(rsQuery2.next())
            {
                Table_List.add( rsQuery2.getString(1));
            }  
        } catch (SQLException ex) {
            Logger.getLogger(Controller.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
              connection.close();
        } catch (SQLException ex1) {
           Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
        }
         
        return Table_List;
    }

        //Return name of all the columns in the table in arguments by Ben
        public  String[] getTableColumnNames(String tableName){
            
            
            thisController.connectiontoDB("openConn");
        
           int sizeTable;
           String[] Table_List = null;
           try {
            
            String script = "select count(*)  from all_tab_cols  where table_name = '"+ tableName +"'";            
            String script2 = ""
                    + "SELECT COLUMN_NAME "
                    + " FROM ALL_TAB_COLS "
                    + " WHERE TABLE_NAME = '"+ tableName +"'"; 
                   
            
             Statement stmQuery = connection.createStatement();
             ResultSet rsQuery = stmQuery.executeQuery (script);
             rsQuery.next();
             sizeTable = rsQuery.getInt(1);
            int i=0;
            Table_List = new String[sizeTable];
            Statement stmQuery2 = connection.createStatement();
            ResultSet rsQuery2 = stmQuery2.executeQuery (script2);
            while(rsQuery2.next())
            {
                
                Table_List[i] = rsQuery2.getString(1);
                i++;
            }  
        } catch (SQLException ex) {
            Logger.getLogger(Controller.class.getName()).log(Level.SEVERE, null, ex);
        }
           
         
        try {
              connection.close();
        } catch (SQLException ex1) {
           Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
        }
           
        return Table_List;
     }    
    
    private ArrayList<String> cons_store;
    private String script;
    private ArrayList<String> table_store;
    private ArrayList<String> column_store;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addList;
    private javax.swing.JButton cancel;
    private javax.swing.JButton clearScript;
    private javax.swing.JTextField colName;
    private javax.swing.JComboBox columnName;
    private javax.swing.JButton create;
    private javax.swing.JButton createList;
    private javax.swing.JButton editScript;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea joinText;
    private javax.swing.JButton saveScript;
    private javax.swing.JTextArea scriptText;
    private javax.swing.JButton showScript;
    private javax.swing.JComboBox tableName;
    private javax.swing.JButton update;
    private javax.swing.JTextField viewName;
    // End of variables declaration//GEN-END:variables
}
