/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Controller.Controller;
import static Controller.Controller.connection;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author Ben
 */
public class CreatSequence extends javax.swing.JPanel {

    /**
     * Creates new form CreatSequence
     */
    boolean editCheck = false;
    static int i = 0;
    
    public Controller thisController = new Controller();
    public CreatSequence() {
        if(i==1)
        {
            
            initComponents();
            saveScript.setEnabled(false);
            scriptText.setEnabled(false);
            scriptText.setDisabledTextColor(Color.BLACK);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        create = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        startWithF = new javax.swing.JTextField();
        cache = new javax.swing.JComboBox();
        maxValF = new javax.swing.JTextField();
        minValF = new javax.swing.JTextField();
        seqNameF = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cycle = new javax.swing.JRadioButton();
        order = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        showScript = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        scriptText = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        schema_list = new javax.swing.JComboBox();
        edit = new javax.swing.JButton();
        saveScript = new javax.swing.JButton();

        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        create.setText("Create");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });
        create.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                createKeyPressed(evt);
            }
        });

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });
        cancel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancelKeyPressed(evt);
            }
        });

        jLabel2.setText("Sequence Name:");

        jLabel3.setText("Start with:");

        startWithF.setText("1");
        startWithF.setCaretColor(new java.awt.Color(153, 153, 0));

        cache.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cacheActionPerformed(evt);
            }
        });

        seqNameF.setToolTipText("");

        jLabel4.setText("Min value");

        jSpinner1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jSpinner1.setValue(1);
        jSpinner1.setVerifyInputWhenFocusTarget(false);

        jLabel5.setText("Increment By");

        jLabel6.setText("Max value");

        jLabel7.setText("Cache");

        cycle.setText("Cycle");

        order.setText("Order");

        jLabel8.setText("Size:");

        showScript.setText("Show Script");
        showScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showScriptActionPerformed(evt);
            }
        });
        showScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                showScriptKeyPressed(evt);
            }
        });

        scriptText.setColumns(20);
        scriptText.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        scriptText.setRows(5);
        scriptText.setEnabled(false);
        jScrollPane1.setViewportView(scriptText);

        jLabel9.setText("Schema");

        schema_list.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));

        edit.setText("Edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });
        edit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                editKeyPressed(evt);
            }
        });

        saveScript.setText("Save Script");
        saveScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveScriptActionPerformed(evt);
            }
        });
        saveScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saveScriptKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(startWithF)
                                    .addComponent(seqNameF)
                                    .addComponent(jSpinner1, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE))
                                .addGap(33, 33, 33)
                                .addComponent(jLabel9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(cycle)
                                        .addComponent(order))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addComponent(schema_list, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cache, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(40, 40, 40)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(minValF, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(maxValF, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(saveScript, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(showScript, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                            .addComponent(edit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cancel)
                                .addGap(18, 18, 18)
                                .addComponent(create))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(76, 76, 76))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(seqNameF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(schema_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(startWithF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cycle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(order))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minValF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(maxValF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cache, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(showScript)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(edit)
                        .addGap(18, 18, 18)
                        .addComponent(saveScript))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancel)
                    .addComponent(create))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        startWithF.getAccessibleContext().setAccessibleName("");
        seqNameF.getAccessibleContext().setAccessibleName("seqNameF");
    }// </editor-fold>//GEN-END:initComponents
    private String script;
    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        
       
        if(editCheck){//click on edit script
            int checkSure = JOptionPane.showConfirmDialog(null, 
                    "Are you sure you want to create the materialized view?", "Notice", JOptionPane.YES_NO_OPTION);
            if(checkSure==0){ 
                script = scriptText.getText();
                boolean ch = true;  
                PreparedStatement st;
                try {
                    thisController.connectiontoDB("openConn");
                    st = connection.prepareStatement(script);
                    st.executeUpdate();
                    thisController.history(script);
                    ch = true;
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage() + script, "Error", JOptionPane.ERROR_MESSAGE);
                    ch = false;
                }
                try {
                    connection.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
                if(ch==true)
                {
                    seqNameF.setText("");
                    maxValF.setText("");
                    minValF.setText("");
                    startWithF.setText("");
                    jSpinner1.setValue(0);
                    jTextField1.setText("");
                    cycle.setSelected(false);
                    order.setSelected(false);
                    scriptText.setText("");
                    JOptionPane.showMessageDialog(this, "Sequence created");
                }
            }
        }
        else// didn't click on edit script
        {
            if(schema_list.getSelectedIndex()!=0){
            int checkSure = JOptionPane.showConfirmDialog(null, 
                   "Are you sure you want to create the materialized view?", "Notice", 
                   JOptionPane.YES_NO_OPTION);
            if(checkSure==0){ 
                script = "CREATE SEQUENCE " + schema_list.getSelectedItem() + "."+  seqNameF.getText() + " \n "
                + "MINVALUE  " + minValF.getText()
                +  "\n MAXVALUE " + maxValF.getText()
                + " \n INCREMENT BY " + jSpinner1.getValue()
                + "\n START WITH " + startWithF.getText();
                if(!jTextField1.getText().equals(""))
                {
                    script = script.concat(" CACHE " + jTextField1.getText());
                }
                else
                {
                    script = script.concat(" CACHE 20  ");
                }

                if(cycle.isSelected())
                {
                    script = script.concat(" CYCLE  ");
                }
                else
                {
                    script = script.concat(" NOCYCLE  ");
                }

                if(order.isSelected())
                {
                    script = script.concat(" ORDER  ");
                }
                else
                {
                    script = script.concat(" NOORDER  ");
                }  
                scriptText.setText(script);
                }
            
            boolean ch = true;  
            PreparedStatement st;
            try {
                thisController.connectiontoDB("openConn");
                st = connection.prepareStatement(script);
                st.executeUpdate();
                thisController.history(script);
                ch = true;
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage() + script, "Error", JOptionPane.ERROR_MESSAGE);
                ch = false;
            }
            try {
                connection.close();
            } catch (SQLException ex1) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
            }
            if(ch==true)
            {
                seqNameF.setText("");
                maxValF.setText("");
                minValF.setText("");
                startWithF.setText("");
                jSpinner1.setValue(0);
                jTextField1.setText("");
                cycle.setSelected(false);
                order.setSelected(false);
                scriptText.setText("");
                JOptionPane.showMessageDialog(this, "Sequence created");
            }
        }else{
        JOptionPane.showMessageDialog(this, "Please select schema name.");
        }
        }
    }//GEN-LAST:event_createActionPerformed

    private void cacheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cacheActionPerformed
        if(cache.getSelectedIndex() == 2)
        {
            jTextField1.setEnabled(true);
        }
        else
        {
            jTextField1.setEnabled(false);
        }
    }//GEN-LAST:event_cacheActionPerformed

    private void showScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showScriptActionPerformed
                      
        script = "CREATE SEQUENCE " + schema_list.getSelectedItem() + "."+  seqNameF.getText() + " \n "
                + "MINVALUE  " + minValF.getText()
                +  "\n MAXVALUE " + maxValF.getText()
                + " \n INCREMENT BY " + jSpinner1.getValue()
                + "\n START WITH " + startWithF.getText();
        if(!jTextField1.getText().equals(""))
        {
            script = script.concat(" CACHE " + jTextField1.getText());
        }
        else
        {
            script = script.concat(" CACHE 20  ");
        }
        
        if(cycle.isSelected())
        {
            script = script.concat(" CYCLE  ");
        }
        else
        {
            script = script.concat(" NOCYCLE  ");
        }
        
        if(order.isSelected())
        {
            script = script.concat(" ORDER  ");
        }
        else
        {
            script = script.concat(" NOORDER  ");
        }  
        scriptText.setText(script);
        saveScript.setEnabled(true);
    }//GEN-LAST:event_showScriptActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed

        editCheck = true;
        scriptText.setEnabled(true);
        saveScript.setEnabled(true);
    }//GEN-LAST:event_editActionPerformed

    private void showScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_showScriptKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            showScript.doClick();
        }
    }//GEN-LAST:event_showScriptKeyPressed

    private void editKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            edit.doClick();
        }
    }//GEN-LAST:event_editKeyPressed

    private void cancelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancelKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            cancel.doClick();
        }
    }//GEN-LAST:event_cancelKeyPressed

    private void createKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_createKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            create.doClick();
        }
    }//GEN-LAST:event_createKeyPressed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed

        seqNameF.setText("");
        maxValF.setText("");
        minValF.setText("");
        startWithF.setText("");
        jSpinner1.setValue(0);
        jTextField1.setText("");
        cycle.setSelected(false);
        order.setSelected(false);
        scriptText.setText("");
        scriptText.setEnabled(false);
        saveScript.setEnabled(false);
        schema_list.setSelectedIndex(0);
        cache.setSelectedIndex(0);
        
    }//GEN-LAST:event_cancelActionPerformed

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
            
            scriptText.setEnabled(false);
            jTextField1.setEnabled(false);
            cache.removeAllItems();
            cache.insertItemAt("", 0);
            cache.insertItemAt("NOCACHE",1 );
            cache.insertItemAt("CACHE",2 );


            schema_list.removeAllItems();

            ArrayList<String> arr = new ArrayList<String>();
            try
            { 
                thisController.connectiontoDB("openConn");   
                Statement stmt = connection.createStatement();
                ResultSet rs = stmt.executeQuery ("select tablespace_name from user_tablespaces");
                while(rs.next()){
                    arr.add(rs.getString(1));
            }
            } catch (SQLException ex) 
            {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            schema_list.addItem("--Please Select One--");
            for(int i = 0; i<arr.size();i++)
            {     
                schema_list.addItem(arr.get(i)); 
            }
            try {
                connection.close();
            } 
            catch (SQLException ex1) 
            {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
            }
    }//GEN-LAST:event_formAncestorAdded

    private void saveScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveScriptActionPerformed

        int val = 0;

        //set button name for fileChooser
        UIManager.put("FileChooser.openDialogTitleText", "Load Script File");
        UIManager.put("FileChooser.openButtonText", "Save Script");

        //Browse file from drive
        JFileChooser fileChooser = new JFileChooser();

        try {
            val = fileChooser.showOpenDialog(null);
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Error opening the file dialogue",
                null, JOptionPane.ERROR_MESSAGE);
        }

        //if file is approve to open start to save the script to that file
        if (val == JFileChooser.APPROVE_OPTION) {
            String saveScriptPath = fileChooser.getSelectedFile().getAbsolutePath();
            if(saveScriptPath.endsWith(".sql")){
                thisController.writeScrpitForSave(saveScriptPath,scriptText.getText());
            }else{
                saveScriptPath = saveScriptPath+".sql";
                thisController.writeScrpitForSave(saveScriptPath,scriptText.getText());
            }
            JOptionPane.showMessageDialog(null, "Script is Saved.");
        }
    }//GEN-LAST:event_saveScriptActionPerformed

    private void saveScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saveScriptKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            saveScript.doClick();
        }
    }//GEN-LAST:event_saveScriptKeyPressed

        //Return name of the database by Ben
    public  String getDBName(){
        String dbNameTmp = null;
        String script = "SELECT sys_context('userenv','instance_name') from dual"; 
        try 
        {
            thisController.connectiontoDB("openConn");
            Statement stmQuery = connection.createStatement();
            ResultSet rsQuery = stmQuery.executeQuery (script);
            rsQuery.next();
            dbNameTmp = rsQuery.getString(1);
                    
        } catch (SQLException ex) {
            Logger.getLogger(Controller.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            connection.close();
        } catch (SQLException ex1) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
        }
        return dbNameTmp;
    }
    
    //Return name of the all the tables and views user can access by Ben
        public  ArrayList<String> getTableNames(){
            ArrayList<String> Table_List = new ArrayList<String>();
        try {
            
            String script = "SELECT VIEW_NAME from USER_VIEWS";
            String script2 = "SELECT table_name from user_tables";

            thisController.connectiontoDB("openConn");  
            Statement stmQuery = connection.createStatement();
            ResultSet rsQuery = stmQuery.executeQuery (script);
            
            while(rsQuery.next())
            {
                
                Table_List.add( rsQuery.getString(1));
            }  
            
            Statement stmQuery2 = connection.createStatement();
            ResultSet rsQuery2 = stmQuery2.executeQuery (script2);
            while(rsQuery2.next())
            {
                Table_List.add( rsQuery2.getString(1));;
            }  
        } catch (SQLException ex) {
            Logger.getLogger(Controller.class.getName()).log(Level.SEVERE, null, ex);
        }
         try {
            connection.close();
        } catch (SQLException ex1) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
        }       

        return Table_List;
    }

        //Return name of all the columns in the table in arguments by Ben
        public  String[] getTableColumnNames(String tableName){
           int sizeTable;
            thisController.connectiontoDB("openConn");  
           String[] Table_List = null;
           try {
            
            String script = "select count(*)  from all_tab_cols  where table_name = '"+ tableName +"'";            
            String script2 = ""
                    + "SELECT COLUMN_NAME "
                    + " FROM ALL_TAB_COLS "
                    + " WHERE TABLE_NAME = '"+ tableName +"'"; 

             Statement stmQuery = connection.createStatement();
             ResultSet rsQuery = stmQuery.executeQuery (script);
             rsQuery.next();
             sizeTable = rsQuery.getInt(1);
             
            int i=0;
            Table_List = new String[sizeTable];
            Statement stmQuery2 = connection.createStatement();
            ResultSet rsQuery2 = stmQuery2.executeQuery (script2);
            while(rsQuery2.next())
            {
                
                Table_List[i] = rsQuery2.getString(1);
                i++;
            }  
        } catch (SQLException ex) {
            Logger.getLogger(Controller.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            connection.close();
        } catch (SQLException ex1) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
        }
        return Table_List;
     }    
        
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cache;
    private javax.swing.JButton cancel;
    private javax.swing.JButton create;
    private javax.swing.JRadioButton cycle;
    private javax.swing.JButton edit;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField maxValF;
    private javax.swing.JTextField minValF;
    private javax.swing.JRadioButton order;
    private javax.swing.JButton saveScript;
    private javax.swing.JComboBox schema_list;
    private javax.swing.JTextArea scriptText;
    private javax.swing.JTextField seqNameF;
    private javax.swing.JButton showScript;
    private javax.swing.JTextField startWithF;
    // End of variables declaration//GEN-END:variables
}