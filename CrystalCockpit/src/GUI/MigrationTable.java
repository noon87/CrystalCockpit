
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Controller.Controller;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import static Controller.Controller.connection;
import java.awt.event.KeyEvent;

/**
 *
 * @author Nan
 * @Write Program by Nan
 * 
 * Migration Table Description
 * ===========================
 * Allow user to migration one or more table at the same time.
 * User can select table name that they want to export/import.
 * This function checking
 * -	Make sure user fill up all necessary information before process to execute 
 * script. If information is not enough to execute script show dialog box to user 
 * interface let user to fill up necessary information. 
 * -	Exporting part, log and dump file is already existing in the current 
 * directory or not? If yes re-write files name and if no proceed.
 * -	Importing part, dump file already exists or not, if yes proceeds. Log file 
 * is already exist or not, if yes re-write and if no proceed.
 * “Export Table”: allow user to export dump file(.dmp) for backup data or for 
 * migration to same/other database.
 * “Import Table”: allow user to import data from dump file (.dmp) to current database.
 * 
 * How Function work
 * =================
 * When Frame open, load all data from Database.
 * 
 * When user click on "Export", system checking information that user key in. If
 * information not correct let user to re-key in and if correct call Controller's
 * functions to run the script to generate export .dmp and .log files.
 * 
 * When user click on "Show Exp Log File", system call controller's function and
 * show log file on user interface.
 * 
 * When user click on "Import", system checking information that user key in. If
 * information not correct let user to re-key in and if correct call Controller's
 * functions to run the script to get data from .dmp into current database.
 * 
 * When user click on "Show Imp Log File", system call controller's function and
 * show log file on user interface.
 * 
 * When user click on "Select All", system select all the check box from Table.
 * 
 * When user click on "DeSelect All", system un-select all the check box from Table.
 * 
 * When user click "Cancel", system clean the GUI.
 * 
 * When user click "re-flash icon 'image'", system will load existing data on
 * pane.
 * 
 */
public class MigrationTable extends javax.swing.JPanel {
 
    /**
     * Creates new form MigrationTable
     */
    public MigrationTable() {
        initComponents();
        progressBar.setVisible(false);
        showImpLogFile.setEnabled(false);
        showExpLogFile.setEnabled(false);
        currentTableName.setEnabled(false);
        AutoCompleteDecorator.decorate(dir);
    }

    public Controller thisController = new Controller();
    public static String tabName = "";
    int choice = 0;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        selectAll = new javax.swing.JButton();
        deSelectAll = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        dumpFile = new javax.swing.JTextField();
        dir = new javax.swing.JComboBox();
        progressBar = new javax.swing.JProgressBar();
        cancel = new javax.swing.JButton();
        update = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        expPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        expLog = new javax.swing.JTextField();
        exp = new javax.swing.JButton();
        showExpLogFile = new javax.swing.JButton();
        delTable = new javax.swing.JLabel();
        impPanel1 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        usernameImp = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        passImp = new javax.swing.JPasswordField();
        impLog = new javax.swing.JTextField();
        imp = new javax.swing.JButton();
        showImpLogFile = new javax.swing.JButton();
        currentTableName = new javax.swing.JTextField();
        edit = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        dbImp = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        hostImp = new javax.swing.JTextField();
        portImp = new javax.swing.JTextField();
        importIntoCurrentDb = new javax.swing.JToggleButton();
        createNewDir = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(844, 512));
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                panelActions(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel1.setText("Dumfile Name: ");

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Table Name", "Select"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        selectAll.setText("Select All");
        selectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllActionPerformed(evt);
            }
        });
        selectAll.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                selectAllKeyPressed(evt);
            }
        });

        deSelectAll.setText("DeSelect All");
        deSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deSelectAllActionPerformed(evt);
            }
        });
        deSelectAll.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deSelectAllKeyPressed(evt);
            }
        });

        jLabel2.setText("Directory: ");

        dir.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });
        cancel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancelKeyPressed(evt);
            }
        });

        update.setIcon(thisController.refreshIcon(15));
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        update.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                updateKeyPressed(evt);
            }
        });

        expPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        expPanel.setToolTipText("");

        jLabel4.setText("Logfilename For Export:");

        exp.setText("Export");
        exp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expActionPerformed(evt);
            }
        });
        exp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                expKeyPressed(evt);
            }
        });

        showExpLogFile.setText("Show Exp Log File");
        showExpLogFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showExpLogFileActionPerformed(evt);
            }
        });
        showExpLogFile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                showExpLogFileKeyPressed(evt);
            }
        });

        delTable.setText("Click Here to Delete Table");
        delTable.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        delTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                delTableMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout expPanelLayout = new javax.swing.GroupLayout(expPanel);
        expPanel.setLayout(expPanelLayout);
        expPanelLayout.setHorizontalGroup(
            expPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(expPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(expPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(delTable)
                    .addGroup(expPanelLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(expPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(expPanelLayout.createSequentialGroup()
                                .addComponent(showExpLogFile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(exp))
                            .addComponent(expLog, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        expPanelLayout.setVerticalGroup(
            expPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, expPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(expPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(expLog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(expPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showExpLogFile)
                    .addComponent(exp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(delTable)
                .addContainerGap(233, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Export Table", expPanel);

        impPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        impPanel1.setEnabled(false);

        jLabel10.setText("LogFile:");

        jLabel12.setText("Username");

        jLabel13.setText("Password:");

        imp.setText("Import");
        imp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                impActionPerformed(evt);
            }
        });
        imp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                impKeyPressed(evt);
            }
        });

        showImpLogFile.setText("Show Imp Log File");
        showImpLogFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showImpLogFileActionPerformed(evt);
            }
        });
        showImpLogFile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                showImpLogFileKeyPressed(evt);
            }
        });

        edit.setText("Edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });
        edit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                editKeyPressed(evt);
            }
        });

        jLabel3.setText("Table Name");

        dbImp.setText("orcl");

        jLabel14.setText("Database Name:");

        jLabel15.setText("Host:");

        jLabel16.setText("Port:");

        hostImp.setText("localhost");

        portImp.setText("1521");

        importIntoCurrentDb.setText("Import Into Current Database");
        importIntoCurrentDb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importIntoCurrentDbActionPerformed(evt);
            }
        });
        importIntoCurrentDb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                importIntoCurrentDbKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout impPanel1Layout = new javax.swing.GroupLayout(impPanel1);
        impPanel1.setLayout(impPanel1Layout);
        impPanel1Layout.setHorizontalGroup(
            impPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(impPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(impPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(impPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, impPanel1Layout.createSequentialGroup()
                            .addComponent(showImpLogFile)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(imp))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, impPanel1Layout.createSequentialGroup()
                            .addGroup(impPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel16)
                                .addComponent(jLabel10)
                                .addComponent(jLabel15)
                                .addComponent(jLabel14)
                                .addComponent(jLabel13)
                                .addComponent(jLabel12))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(impPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(impLog)
                                .addComponent(portImp)
                                .addComponent(hostImp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                                .addComponent(dbImp, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(passImp, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(usernameImp, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, impPanel1Layout.createSequentialGroup()
                                    .addComponent(currentTableName)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(edit))))
                        .addComponent(importIntoCurrentDb, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(jLabel3))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        impPanel1Layout.setVerticalGroup(
            impPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, impPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(impPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentTableName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edit)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(importIntoCurrentDb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(impPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameImp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addGroup(impPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passImp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(18, 18, 18)
                .addGroup(impPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dbImp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(18, 18, 18)
                .addGroup(impPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostImp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(18, 18, 18)
                .addGroup(impPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portImp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addGap(18, 18, 18)
                .addGroup(impPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(impLog, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(impPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imp)
                    .addComponent(showImpLogFile))
                .addGap(20, 20, 20))
        );

        jTabbedPane1.addTab("Import Table", impPanel1);

        createNewDir.setText("Click Here to Create New Directory");
        createNewDir.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        createNewDir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createNewDirMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(30, 30, 30)
                            .addComponent(selectAll, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(deSelectAll, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cancel)))
                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(createNewDir)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addComponent(jLabel2)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(dumpFile)
                                    .addComponent(dir, 0, 299, Short.MAX_VALUE))))))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(dir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(createNewDir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dumpFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(update, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(deSelectAll)
                                .addComponent(cancel))
                            .addComponent(selectAll))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(54, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void selectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllActionPerformed
        DefaultTableModel model = (DefaultTableModel)table.getModel();  
        for(int i =0; i<model.getRowCount();i++){
                model.setValueAt(true, i, 1);
        }
    }//GEN-LAST:event_selectAllActionPerformed

    private void deSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deSelectAllActionPerformed
        DefaultTableModel model = (DefaultTableModel)table.getModel();  
        for(int i =0; i<model.getRowCount();i++){
                model.setValueAt(false, i, 1);
        }
    }//GEN-LAST:event_deSelectAllActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
            clean();
    }//GEN-LAST:event_cancelActionPerformed

    private void panelActions(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_panelActions
        retrieveDataFromDB();
    }//GEN-LAST:event_panelActions

    private void selectAllKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_selectAllKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            selectAll.doClick();
        }
    }//GEN-LAST:event_selectAllKeyPressed

    private void deSelectAllKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deSelectAllKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            deSelectAll.doClick();
        }
    }//GEN-LAST:event_deSelectAllKeyPressed

    private void cancelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancelKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            cancel.doClick();
        }
    }//GEN-LAST:event_cancelKeyPressed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        retrieveDataFromDB();
    }//GEN-LAST:event_updateActionPerformed

    private void updateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_updateKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            update.doClick();
        }
    }//GEN-LAST:event_updateKeyPressed

    private void expActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expActionPerformed

                
        if(dir.getSelectedIndex()!=0){
            //get directory location
            thisController.dirName = dir.getSelectedItem().toString();
            thisController.connectiontoDB("getDirLoc");

            //set directory part
            String path = thisController.dir + "\\" + dumpFile.getText()+".dmp";
            String path2 = thisController.dir+ "\\" +expLog.getText()+".log";
            
            //check it is exist or not
            boolean check = thisController.checkFileExist(path);
            boolean check2 = thisController.checkFileExist(path2);

            if(check == false){
                if(check2==false){
                   int reply = JOptionPane.showConfirmDialog(null, "Are you sure "
                           + "you would like to Export! ",
                        "Click Yes or No", JOptionPane.YES_NO_OPTION);

                    if(reply == JOptionPane.YES_OPTION){

                        String tmpName="";
                        DefaultTableModel model = (DefaultTableModel)table.getModel();
                        for(int i =0; i<model.getRowCount();i++){
                            if(model.getValueAt(i, 1)== true){
                                tmpName = tmpName.concat(model.getValueAt(i,0).toString() + ",");
                            }
                        }

                        if(tmpName.length()!= 0 && expLog.getText().length()!=0 &&
                            dumpFile.getText().length() != 0 &&
                            dir.getSelectedItem()!= "--Please Select One--"){
                            exp.setEnabled(false);

                            //GUI.MainFrame.disableAllMenu(false);
                            int j = tmpName.lastIndexOf(',');
                            tmpName = tmpName.substring(0,j);
                            tabName = tmpName;

                            currentTableName.setText(tabName);
                            SwingWorker sw = new SwingWorker<Boolean,Integer>(){
                                protected Boolean doInBackground()throws Exception{
                                    progressBar.setVisible(true);
                                    publish(0);
                                    enableAll(false);
                                    choice = 1;

                                    publish(20);
                                    actions();
                                    publish(90);

                                    enableAll(true);
                                    return true;
                                }

                                protected void process(List<Integer> chunks) {
                                    for (Integer i : chunks)
                                    progressBar.setValue(i);
                                }
                                protected void done() {
                                    try{
                                        boolean b = get();
                                        if(b){
                                            progressBar.setValue(100);
                                            showExpLogFile.setEnabled(true);
                                            enableAll(true);
                                            progressBar.setVisible(false);
                                        }
                                    }catch (ExecutionException ex) {
                                        clean();
                                    } catch (InterruptedException ex) {
                                        clean();
                                    }
                                }
                            };
                            sw.execute();
                        }else{
                            JOptionPane.showMessageDialog(this, "Please fill up informations.",
                                "Error",JOptionPane.ERROR_MESSAGE);
                        }
                    }else{
                        clean();
                    }
                }else{
                    JOptionPane.showMessageDialog(this, "Log file name already exist."
                            + "Please fill up again.",
                            "Error",JOptionPane.ERROR_MESSAGE);
                } 
            }else{
                JOptionPane.showMessageDialog(this, "Dump file name already exist."
                        + "Please fill up again.",
                            "Error",JOptionPane.ERROR_MESSAGE);
            }  
        }else{
            JOptionPane.showMessageDialog(this, "Please select correct name.",
                            "Error",JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_expActionPerformed

    private void expKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_expKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            exp.doClick();
        }
    }//GEN-LAST:event_expKeyPressed

    private void showExpLogFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showExpLogFileActionPerformed
        thisController.showExpFile();
    }//GEN-LAST:event_showExpLogFileActionPerformed

    private void showExpLogFileKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_showExpLogFileKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            showExpLogFile.doClick();
        }
    }//GEN-LAST:event_showExpLogFileKeyPressed

    private void impActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_impActionPerformed

        if(dir.getSelectedIndex()!=0){
            //get directory location
            thisController.dirName = dir.getSelectedItem().toString();
            thisController.connectiontoDB("getDirLoc");

            //set directory part
            String path = thisController.dir + "\\" + dumpFile.getText()+".dmp";
            String path2 = thisController.dir+ "\\" +impLog.getText()+".log";
            
            //check it is exist or not
            boolean check = thisController.checkFileExist(path);
            boolean check2 = thisController.checkFileExist(path2);

            if(check == true){
                if(check2==false){
                   int reply = JOptionPane.showConfirmDialog(null, "Are you sure "
                           + "you would like to Import! ",
                        "Click Yes or No", JOptionPane.YES_NO_OPTION);

                    if(reply == JOptionPane.YES_OPTION){
                        if(impLog.getText().length()!=0 && usernameImp.getText().length() != 0
                            && passImp.getText().length() != 0
                            && dumpFile.getText().length() != 0
                            && dir.getSelectedItem()!= "--Please Select One--"
                            && currentTableName.getText().length()!=0
                            && dbImp.getText().length()!=0
                            && hostImp.getText().length()!=0
                            && portImp.getText().length()!=0){

                            boolean check3 = thisController.checkImpInfo(usernameImp.getText(),
                                passImp.getText(), dbImp.getText(), hostImp.getText(),
                                portImp.getText());
                            if(check3 == true){
                                try {
                                    connection.close();
                                } catch (SQLException ex) {
                                    Logger.getLogger(Controller.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                imp.setEnabled(false);
                                tabName = currentTableName.getText();
                                SwingWorker sw = new SwingWorker<Boolean,Integer>(){
                                    protected Boolean doInBackground()throws Exception{
                                        progressBar.setVisible(true);
                                        publish(0);
                                        enableAll(false);
                                        choice = 2;
                                        publish(20);
                                        actions();
                                        publish(90);
                                        return true;
                                    }

                                    protected void process(List<Integer> chunks) {
                                        for (Integer i : chunks)
                                        progressBar.setValue(i);
                                    }
                                    protected void done() {
                                        try{
                                            boolean b = get();
                                            if(b){
                                                progressBar.setValue(100);
                                                progressBar.setVisible(false);
                                                enableAll(true);
                                                showImpLogFile.setEnabled(true);
                                                retrieveDataFromDB();
                                                clean();
                                            }
                                        }catch (ExecutionException ex) {
                                            clean();
                                        } catch (InterruptedException ex) {
                                            clean();
                                        }
                                    }
                                };
                                sw.execute();

                            }else{
                                JOptionPane.showMessageDialog(this, "Please fill up informations.",
                                    "Error",JOptionPane.ERROR_MESSAGE);
                            }

                        }else{
                            JOptionPane.showMessageDialog(this, "Login Fail please fill up correct information.",
                                "Error",JOptionPane.ERROR_MESSAGE);
                        }
                    }else{
                        clean();
                    }
                }else{
                    JOptionPane.showMessageDialog(this, "Log file name already exist."
                            + "Please fill up again.",
                            "Error",JOptionPane.ERROR_MESSAGE);
                } 
            }else{
                JOptionPane.showMessageDialog(this, "Dump file is not exist."
                        + "Please fill up again.",
                            "Error",JOptionPane.ERROR_MESSAGE);
            }  
        }else{
            JOptionPane.showMessageDialog(this, "Please select correct name.",
                            "Error",JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_impActionPerformed

    private void impKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_impKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            imp.doClick();
        }
    }//GEN-LAST:event_impKeyPressed

    private void showImpLogFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showImpLogFileActionPerformed
        thisController.showImpFile();
    }//GEN-LAST:event_showImpLogFileActionPerformed

    private void showImpLogFileKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_showImpLogFileKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            showImpLogFile.doClick();
        }
    }//GEN-LAST:event_showImpLogFileKeyPressed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        currentTableName.setEnabled(true);
    }//GEN-LAST:event_editActionPerformed

    private void editKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            edit.doClick();
        }
    }//GEN-LAST:event_editKeyPressed

    private void importIntoCurrentDbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importIntoCurrentDbActionPerformed
        usernameImp.setText(thisController.name);
        passImp.setText(thisController.pass);
        dbImp.setText(thisController.db);
        hostImp.setText(thisController.host);
        portImp.setText(thisController.port);

        usernameImp.setEnabled(false);
        passImp.setEnabled(false);
        dbImp.setEnabled(false);
        hostImp.setEnabled(false);
        portImp.setEnabled(false);
    }//GEN-LAST:event_importIntoCurrentDbActionPerformed

    private void importIntoCurrentDbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_importIntoCurrentDbKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            importIntoCurrentDb.doClick();
        }
    }//GEN-LAST:event_importIntoCurrentDbKeyPressed

    private void createNewDirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createNewDirMouseClicked
        GUI.MainFrame.createDirectoryItem.doClick();
    }//GEN-LAST:event_createNewDirMouseClicked

    private void delTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_delTableMouseClicked
        GUI.MainFrame.deleteTableItem.doClick();
    }//GEN-LAST:event_delTableMouseClicked
    
    private void retrieveDataFromDB(){
        //get the list of directory
        thisController.connectiontoDB("getDir");
  
        //set the list of directory into array
        ArrayList<String> dirList = new ArrayList<String>();
        dirList.addAll(thisController.arrList);
        
        //remove existing data
        dir.removeAllItems();
        dir.addItem("--Please Select One--");
        
        //added directory list from dtabase to gui design
        for(int i = 0; i<dirList.size();i++){
            dir.addItem(dirList.get(i));
        } 
        
        
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        model.addTableModelListener(table);    
        
        //get the list of tablespaces
        thisController.connectiontoDB("getTab");
  
        //set the list of table into array
        ArrayList<String> tabList = new ArrayList<String>();
        tabList.addAll(thisController.arrList);
        
        //remove existing data
        int rowCount = model.getRowCount();
        for(int i = rowCount - 1; i >=0; i--)
        {
            model.removeRow(i); 
        }
        
        //added table list from dtabase to gui design
        for(int i = 0; i<tabList.size();i++){
            if(tabList.get(i).toUpperCase().equals("HISTORY")){}else{
            model.addRow(new Object[]{tabList.get(i),false});
            }
        }
        
        usernameImp.setText(thisController.name);
    }
    
    private void actions(){

        Boolean check = false;
        if(choice == 1){
          check = thisController.connectCmd("expTab");
        }else if(choice == 2){
          check = thisController.connectCmd("impTab");
        }
        if(check == false){
          JOptionPane.showMessageDialog(this, thisController.errorMsg,
                "Error",JOptionPane.ERROR_MESSAGE);
        }
    }
        
    private void enableExpPanel(boolean value){
        expLog.setEnabled(value);
        exp.setEnabled(value);
        createNewDir.setVisible(value);
        delTable.setVisible(value);
    }
        
    private void enableImpPanel(boolean value){
        usernameImp.setEnabled(value);
        passImp.setEnabled(value);
        impLog.setEnabled(value);
        imp.setEnabled(value);
        hostImp.setEnabled(value);
        portImp.setEnabled(value);
        dbImp.setEnabled(value);
        createNewDir.setVisible(value);
    }
        
    private void enableAll(boolean value){
        dir.setEnabled(value);
        dumpFile.setEnabled(value);
        update.setEnabled(value);
        selectAll.setEnabled(value);
        deSelectAll.setEnabled(value);
        enableImpPanel(value);
        enableExpPanel(value);
        showImpLogFile.setEnabled(value);
        showExpLogFile.setEnabled(value);
        importIntoCurrentDb.setEnabled(value);
        createNewDir.setVisible(value);
    }
        
    private void clean(){
        enableAll(true);
        dumpFile.setText("");
        usernameImp.setText("");
        passImp.setText("");
        expLog.setText("");
        impLog.setText("");
        currentTableName.setText("");
        progressBar.setVisible(false);
        currentTableName.setEnabled(false);
        dir.setSelectedIndex(0);
        createNewDir.setVisible(true);
        DefaultTableModel model = (DefaultTableModel)table.getModel();  
        for(int i =0; i<model.getRowCount();i++){
                model.setValueAt(false, i, 1);
        }
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JLabel createNewDir;
    public static javax.swing.JTextField currentTableName;
    public static javax.swing.JTextField dbImp;
    private javax.swing.JButton deSelectAll;
    private javax.swing.JLabel delTable;
    public static javax.swing.JComboBox dir;
    public static javax.swing.JTextField dumpFile;
    private javax.swing.JButton edit;
    private javax.swing.JButton exp;
    public static javax.swing.JTextField expLog;
    private javax.swing.JPanel expPanel;
    public static javax.swing.JTextField hostImp;
    private javax.swing.JButton imp;
    public static javax.swing.JTextField impLog;
    private javax.swing.JPanel impPanel1;
    private javax.swing.JToggleButton importIntoCurrentDb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    public static javax.swing.JPasswordField passImp;
    public static javax.swing.JTextField portImp;
    public static javax.swing.JProgressBar progressBar;
    private javax.swing.JButton selectAll;
    private javax.swing.JButton showExpLogFile;
    private javax.swing.JButton showImpLogFile;
    private javax.swing.JTable table;
    private javax.swing.JButton update;
    public static javax.swing.JTextField usernameImp;
    // End of variables declaration//GEN-END:variables
}