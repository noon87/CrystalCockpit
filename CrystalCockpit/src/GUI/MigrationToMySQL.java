/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Controller.Controller;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Nan
 * @Write Program by Nan
 * 
 * Migration Cross Platform Description
 * ====================================
 * Allow user to migrate table from Oracle to MySQL.
 * This Function checking
 * -	Make sure user fill up all necessary information before process to execute 
 * script. If information is not enough to execute script show dialog box to user 
 * interface let user to fill up necessary information.
 * -	Before import table to MySQL check the column is mismatch or not? If yes 
 * proceed, if no re-select table.
 * 
 * How Function work
 * =================
 * When Frame open, load all data from Database.
 * 
 * When user click on "Browse", system show dialog box and allow user to 
 * select directory to save data file.
 * 
 * When user click on "Export", system checking information that user key in. If
 * information not correct let user to re-key in and if correct call Controller's
 * functions to run the script to generate .csv file.
 * 
 * When user click on "Connect", system checking information that user key in. If
 * information not correct let user to re-key in and if correct call Controller's
 * function to run the script to login to MySQL.
 * 
 * When user click on "import", system checking information that user key in. If
 * information not correct let user to re-key in and if correct proceed to import
 * table into MySQL database.
 * 
 * When user click "Cancel", system clean the GUI.
 * 
 * When user click "re-flash icon 'image'", system will load existing data on
 * pane.
 * 
 */
public class MigrationToMySQL extends javax.swing.JPanel {

     /**
     * Creates new form MigrationToMySQL
     */
    public MigrationToMySQL() {
        initComponents();
        user.setEnabled(false);
        password.setEnabled(false);
        host.setEditable(false);
        db.setEnabled(false);
        tabListSQL.setEnabled(false);
        importToMySQL.setEnabled(false);
    }
    
    public Controller thisController = new Controller();
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cancel = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        path = new javax.swing.JTextField();
        browseFile = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        tableList = new javax.swing.JComboBox();
        updateDB = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        exp = new javax.swing.JButton();
        csvFileName = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        user = new javax.swing.JTextField();
        password = new javax.swing.JPasswordField();
        connectToMySQL = new javax.swing.JButton();
        host = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        db = new javax.swing.JTextField();
        selectLabel = new javax.swing.JLabel();
        tabListSQL = new javax.swing.JComboBox();
        importToMySQL = new javax.swing.JButton();
        updateMySQL = new javax.swing.JButton();

        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });
        cancel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancelKeyPressed(evt);
            }
        });

        jLabel7.setText("Choose Folder to Export");

        jLabel5.setText("Choose Folder: ");

        browseFile.setText("Browse");
        browseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseFileActionPerformed(evt);
            }
        });
        browseFile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                browseFileKeyPressed(evt);
            }
        });

        jLabel6.setText("Choose Table From Oracle");

        jLabel1.setText("Select Table:");

        tableList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));

        updateDB.setIcon(thisController.refreshIcon(15));
        updateDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDBActionPerformed(evt);
            }
        });
        updateDB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                updateDBKeyPressed(evt);
            }
        });

        jLabel8.setText("CSV File Name:");

        exp.setText("Export");
        exp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expActionPerformed(evt);
            }
        });
        exp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                expKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(exp, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tableList, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel8))
                                    .addGap(32, 32, 32)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(csvFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(path, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(browseFile)
                                .addComponent(updateDB, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(csvFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(tableList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(updateDB, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(exp)
                .addContainerGap(70, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Export Table From Oracle", jPanel1);

        jLabel2.setText("Connect to MySQL to Import Table from Oracle");

        jLabel3.setText("Username:");

        jLabel4.setText("Password:");

        connectToMySQL.setText("Connect");
        connectToMySQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectToMySQLActionPerformed(evt);
            }
        });
        connectToMySQL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                connectToMySQLKeyPressed(evt);
            }
        });

        jLabel9.setText("Host:");

        jLabel10.setText("Database:");

        selectLabel.setText("Select Table:");

        tabListSQL.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));

        importToMySQL.setText("Import");
        importToMySQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importToMySQLActionPerformed(evt);
            }
        });
        importToMySQL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                importToMySQLKeyPressed(evt);
            }
        });

        updateMySQL.setIcon(thisController.refreshIcon(15));
        updateMySQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateMySQLActionPerformed(evt);
            }
        });
        updateMySQL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                updateMySQLKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(importToMySQL, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(selectLabel)
                                    .addGap(27, 27, 27)
                                    .addComponent(tabListSQL, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(db, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(host, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(37, 37, 37)
                                        .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGap(26, 26, 26)
                                    .addComponent(connectToMySQL))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(updateMySQL, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(db, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(host, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectToMySQL))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectLabel)
                    .addComponent(tabListSQL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateMySQL, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(importToMySQL)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Import Table To MySQL", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(350, 350, 350)
                        .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cancel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void expActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expActionPerformed
        //Export from Oracle
        
        user.setEnabled(true);
        password.setEnabled(true);
        host.setEditable(true);
        db.setEnabled(true);
        
        if(path.getText().length()!=0 && tableList.getSelectedIndex()!=0 &&
                csvFileName.getText().length()!=0){//check null
     
            boolean check = thisController.generateCsvFile(path.getText()+"\\"
                    +csvFileName.getText()+".csv");
            if(check == true){//csv file is generated
                JOptionPane.showMessageDialog(this, "Table is exported."); 
            }else{//fail to generate csv file
                JOptionPane.showMessageDialog(this, thisController.errorMsg,
                            "Error",JOptionPane.ERROR_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Please fill up correct information.",
                null, JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_expActionPerformed

    private void browseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseFileActionPerformed

        String Directory;
        int val = 0;

        //Browse file from drive
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        try {
            val = fileChooser.showOpenDialog(null);
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Error opening the file dialogue",
                null, JOptionPane.ERROR_MESSAGE);
        }

        if (val == JFileChooser.APPROVE_OPTION) {
            Directory = fileChooser.getSelectedFile().getAbsolutePath();
            path.setText(Directory);
        }
    }//GEN-LAST:event_browseFileActionPerformed

    private void browseFileKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_browseFileKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            browseFile.doClick();
        }
    }//GEN-LAST:event_browseFileKeyPressed

    private void connectToMySQLKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_connectToMySQLKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            connectToMySQL.doClick();
        }
    }//GEN-LAST:event_connectToMySQLKeyPressed

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        retrieveDataFromDB();
    }//GEN-LAST:event_formAncestorAdded

    private void connectToMySQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectToMySQLActionPerformed
        //connect to MYSQL
        path.setEnabled(false);
        tableList.setEnabled(false);
        csvFileName.setEnabled(false);
        browseFile.setEnabled(false);
        exp.setEnabled(false);
        
        //get the list of table from MySql
        boolean check = thisController.connectionMySQL("getSQLTab");
        
        if(check == true){
            retrieveDataFromMySQL();
            JOptionPane.showMessageDialog(this, "Connected to MySQL.");
            
            tabListSQL.setEnabled(true);
            importToMySQL.setEnabled(true);
        
        }else{
            JOptionPane.showMessageDialog(null, "Connection Fail. "+thisController.errorMsg,
                null, JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_connectToMySQLActionPerformed

    private void importToMySQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importToMySQLActionPerformed
        
        thisController.connectionMySQL("countCol");
        if (thisController.colSizeMySQL==thisController.colSizeOracle){
            boolean check = thisController.connectionMySQL("import");
            if(check == true){
            
                JOptionPane.showMessageDialog(this,"Successful Import.");
                clean();
            }else{
                JOptionPane.showMessageDialog(this, thisController.errorMsg,
                                "Error",JOptionPane.ERROR_MESSAGE);        
            }
        }else{
            JOptionPane.showMessageDialog(this, "Columns from Oracle is not match with columns from MySQL.",
                                "Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_importToMySQLActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        clean();
    }//GEN-LAST:event_cancelActionPerformed

    private void expKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_expKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            exp.doClick();
        }
    }//GEN-LAST:event_expKeyPressed

    private void importToMySQLKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_importToMySQLKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            importToMySQL.doClick();
        }
    }//GEN-LAST:event_importToMySQLKeyPressed

    private void cancelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancelKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            cancel.doClick();
        }
    }//GEN-LAST:event_cancelKeyPressed

    private void updateDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDBActionPerformed
        retrieveDataFromDB();
    }//GEN-LAST:event_updateDBActionPerformed

    private void updateDBKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_updateDBKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            updateDB.doClick();
        }
    }//GEN-LAST:event_updateDBKeyPressed

    private void updateMySQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateMySQLActionPerformed
        retrieveDataFromMySQL();
    }//GEN-LAST:event_updateMySQLActionPerformed

    private void updateMySQLKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_updateMySQLKeyPressed
        retrieveDataFromMySQL();
    }//GEN-LAST:event_updateMySQLKeyPressed

    private void retrieveDataFromDB(){
        //get the list of table from oracle
        thisController.connectiontoDB("getTab");
  
        //set the list of table into array
        ArrayList<String> tabList = new ArrayList<String>();
        tabList.addAll(thisController.arrList);
        
        //remove existing data
        tableList.removeAllItems();
        tableList.addItem("--Please Select One--");
        
        //added table list from dtabase to gui design
        for(int i = 0; i<tabList.size();i++){
            tableList.addItem(tabList.get(i));
        } 
    }
        
    private void retrieveDataFromMySQL(){
        //set the list of table into array
        ArrayList<String> tableListSQL = new ArrayList<String>();
        tableListSQL.addAll(thisController.arrList);

        //remove existing Data
        tabListSQL.removeAllItems();
        tabListSQL.addItem("--Please Select One--");

        //add table list from the database to gui design
        for(int i=0; i<tableListSQL.size();i++){
            tabListSQL.addItem(tableListSQL.get(i));
        }
    }
        
    public void clean(){
        path.setText("");
        csvFileName.setText("");
        user.setText("");
        password.setText("");
        host.setText("");
        db.setText("");
        path.setEnabled(true);
        tableList.setEnabled(true);
        csvFileName.setEnabled(true);
        browseFile.setEnabled(true);
        exp.setEnabled(true);
        user.setEnabled(true);
        password.setEnabled(true);
        host.setEnabled(true);
        db.setEditable(true);
        connectToMySQL.setEnabled(true);
        importToMySQL.setEnabled(true);
        tableList.setSelectedIndex(0);
        tabListSQL.setSelectedIndex(0);
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseFile;
    private javax.swing.JButton cancel;
    private javax.swing.JButton connectToMySQL;
    public static javax.swing.JTextField csvFileName;
    public static javax.swing.JTextField db;
    private javax.swing.JButton exp;
    public static javax.swing.JTextField host;
    private javax.swing.JButton importToMySQL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTabbedPane1;
    public static javax.swing.JPasswordField password;
    public static javax.swing.JTextField path;
    private javax.swing.JLabel selectLabel;
    public static javax.swing.JComboBox tabListSQL;
    public static javax.swing.JComboBox tableList;
    private javax.swing.JButton updateDB;
    private javax.swing.JButton updateMySQL;
    public static javax.swing.JTextField user;
    // End of variables declaration//GEN-END:variables
}