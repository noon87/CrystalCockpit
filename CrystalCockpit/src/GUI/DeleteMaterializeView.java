/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Controller.Controller;
import static Controller.Controller.connection;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author Behzad
 */

public class DeleteMaterializeView extends javax.swing.JPanel {
    
    public Controller thisController = new Controller();
    static int i = 0;
    boolean checkEdit = false;
    /**
     * Creates new form CreateTable
     */
    public DeleteMaterializeView() {
        if(i==1){
            initComponents();
            scriptText.setEditable(false);
            saveScript.setEnabled(false);
            scriptText.setDisabledTextColor(Color.BLACK);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editScript = new javax.swing.JButton();
        showScript = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        scriptText = new javax.swing.JTextArea();
        update = new javax.swing.JButton();
        matViewName = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cancel = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        saveScript = new javax.swing.JButton();

        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        editScript.setText("Edit");
        editScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editScriptActionPerformed(evt);
            }
        });
        editScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                editScriptKeyPressed(evt);
            }
        });

        showScript.setText("Show Script");
        showScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showScriptActionPerformed(evt);
            }
        });
        showScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                showScriptKeyPressed(evt);
            }
        });

        scriptText.setColumns(20);
        scriptText.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        scriptText.setRows(5);
        jScrollPane1.setViewportView(scriptText);

        update.setIcon(thisController.refreshIcon(15));
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        update.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                updateKeyPressed(evt);
            }
        });

        matViewName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));

        jLabel2.setText("Select the view you want to delete");

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });
        cancel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancelKeyPressed(evt);
            }
        });

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        delete.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deleteKeyPressed(evt);
            }
        });

        saveScript.setText("Save Script");
        saveScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveScriptActionPerformed(evt);
            }
        });
        saveScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saveScriptKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(showScript, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addComponent(editScript, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(saveScript, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(update)
                                .addGap(18, 18, 18)
                                .addComponent(cancel)
                                .addGap(18, 18, 18)
                                .addComponent(delete))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(matViewName, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(71, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(matViewName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(showScript)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editScript)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveScript))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(delete)
                        .addComponent(cancel))
                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    private ArrayList<String> View_List = new ArrayList<String>();
    
    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed

        if(!checkEdit){
            int checkSure = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to delete the materialized view?", "Notice", JOptionPane.YES_NO_OPTION);
            if(checkSure==0){ 
                boolean k = true;
                thisController.connectiontoDB("openConn");  
                try {
                    String drop_Item = null;
                    drop_Item = (String) matViewName.getSelectedItem();
                    String script = "DROP MATERIALIZED VIEW " + drop_Item;
                    PreparedStatement st = connection.prepareStatement(script);
                    st.executeUpdate();
                    thisController.history(script);
                }
                catch (SQLException ex)
                {
                    k= false;
                    JOptionPane.showMessageDialog(this,"1"+ex.getMessage());
                }
                if(k==true)
                {
                    JOptionPane.showMessageDialog(this," MATERIALIZED View deleted");
                }
                 View_List.clear();
                try {
                    //all_views ARE THE LIST OF TABLES ARE ACCESIBLE TO THE CURRENT USRER
                    String script ="SELECT MVIEW_NAME FROM USER_MVIEWS";
                    thisController.connectiontoDB("openConn");
                    Statement stmQuery = connection.createStatement();
                    ResultSet rsQuery = stmQuery.executeQuery (script);
                    while(rsQuery.next()){
                        View_List.add(rsQuery.getString(1));
                    }
                } catch (SQLException ex)
                {
                    JOptionPane.showMessageDialog(this,"2"+ex.getMessage());
                }
                try {
                    connection.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }     


                matViewName.removeAllItems();
                matViewName.addItem("--Please Select One--");
                for(int i=0;i<View_List.size();i++)
                {
                    matViewName.addItem(View_List.get(i));
                }
                scriptText.setText("");
            }
        }
        else
        {
         int checkSure = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to delete the materialized view?", "Notice", JOptionPane.YES_NO_OPTION);
            if(checkSure==0){ 
                boolean k = true;
                thisController.connectiontoDB("openConn");  
                try {
                    String script = scriptText.getText();
                    PreparedStatement st = connection.prepareStatement(script);
                    st.executeUpdate();
                    thisController.history(script);
                }
                catch (SQLException ex)
                {
                    k= false;
                    JOptionPane.showMessageDialog(this,"3"+ex.getMessage());
                }
                if(k==true)
                {
                    JOptionPane.showMessageDialog(this," MATERIALIZED View deleted");
                }
                       View_List.clear();
                try {
                    //all_views ARE THE LIST OF TABLES ARE ACCESIBLE TO THE CURRENT USRER
                    String script ="SELECT MVIEW_NAME FROM USER_MVIEWS";
                    thisController.connectiontoDB("openConn");
                    Statement stmQuery = connection.createStatement();
                    ResultSet rsQuery = stmQuery.executeQuery (script);
                    while(rsQuery.next()){
                        View_List.add(rsQuery.getString(1));
                    }
                } catch (SQLException ex)
                {
                    JOptionPane.showMessageDialog(this,"4"+ex.getMessage());
                }
                try {
                    connection.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }     


                matViewName.removeAllItems();
                matViewName.addItem("--Please Select One--");
                for(int i=0;i<View_List.size();i++)
                {
                    matViewName.addItem(View_List.get(i));
                }
                scriptText.setText("");
            }   
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed

        View_List.clear();
        try {
            thisController.connectiontoDB("openConn");
            //all_views ARE THE LIST OF TABLES ARE ACCESIBLE TO THE CURRENT USRER
            String script ="SELECT MVIEW_NAME FROM USER_MVIEWS";
            Statement stmQuery = connection.createStatement();
            ResultSet rsQuery = stmQuery.executeQuery (script);
            while(rsQuery.next()){
                View_List.add(rsQuery.getString(1));
            }
        } catch (SQLException ex)
        {
            JOptionPane.showMessageDialog(this,"5"+ex.getMessage());
        }
        try {
            connection.close();
        } catch (SQLException ex1) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
        }
        matViewName.removeAllItems();
        matViewName.addItem("--Please Select One--");
        for(int i=0;i<View_List.size();i++)
        {
            matViewName.addItem(View_List.get(i));
        }
    }//GEN-LAST:event_updateActionPerformed

    private void editScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editScriptActionPerformed
        checkEdit = true;
        scriptText.setEditable(true);
        saveScript.setEnabled(true);
    }//GEN-LAST:event_editScriptActionPerformed

    private void showScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showScriptActionPerformed
        String drop_Item = null;
        drop_Item = (String) matViewName.getSelectedItem();
        String script = "DROP MATERIALIZED VIEW " + drop_Item;    
        scriptText.setText(script);
        saveScript.setEnabled(true);
    }//GEN-LAST:event_showScriptActionPerformed

    private void updateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_updateKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            update.doClick();
        }
    }//GEN-LAST:event_updateKeyPressed

    private void deleteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deleteKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            delete.doClick();
        }
    }//GEN-LAST:event_deleteKeyPressed

    private void cancelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancelKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            cancel.doClick();
        }
    }//GEN-LAST:event_cancelKeyPressed

    private void showScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_showScriptKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            showScript.doClick();
        }
    }//GEN-LAST:event_showScriptKeyPressed

    private void editScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editScriptKeyPressed
          if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            editScript.doClick();
        }
    }//GEN-LAST:event_editScriptKeyPressed

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        update.doClick();
    }//GEN-LAST:event_formAncestorAdded

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        scriptText.setText("");
        saveScript.setEnabled(false);   
        matViewName.setSelectedIndex(0);
    }//GEN-LAST:event_cancelActionPerformed

    private void saveScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveScriptActionPerformed

        int val = 0;

        //set button name for fileChooser
        UIManager.put("FileChooser.openDialogTitleText", "Load Script File");
        UIManager.put("FileChooser.openButtonText", "Save Script");

        //Browse file from drive
        JFileChooser fileChooser = new JFileChooser();

        try {
            val = fileChooser.showOpenDialog(null);
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Error opening the file dialogue",
                null, JOptionPane.ERROR_MESSAGE);
        }

        //if file is approve to open start to save the script to that file
        if (val == JFileChooser.APPROVE_OPTION) {
            String saveScriptPath = fileChooser.getSelectedFile().getAbsolutePath();
            if(saveScriptPath.endsWith(".sql")){
                thisController.writeScrpitForSave(saveScriptPath,scriptText.getText());
            }else{
                saveScriptPath = saveScriptPath+".sql";
                thisController.writeScrpitForSave(saveScriptPath,scriptText.getText());
            }
            JOptionPane.showMessageDialog(null, "Script is Saved.");
        }
    }//GEN-LAST:event_saveScriptActionPerformed

    private void saveScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saveScriptKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            saveScript.doClick();
        }
    }//GEN-LAST:event_saveScriptKeyPressed

    
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JButton delete;
    private javax.swing.JButton editScript;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox matViewName;
    private javax.swing.JButton saveScript;
    private javax.swing.JTextArea scriptText;
    private javax.swing.JButton showScript;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}