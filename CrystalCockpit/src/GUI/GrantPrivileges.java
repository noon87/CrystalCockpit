/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Controller.*;
import static Controller.Controller.connection;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
/**
 *
 * @author Shan Mey
 */
public class GrantPrivileges extends javax.swing.JPanel {

    /**
     * Creates new form GrantPrivileges
     */
    public GrantPrivileges() {
        initComponents();
     
        //Grant For Table***
        Option_TP.setSelectedIndex(0);       
        scriptText_TP.setEnabled(false);   
        user_role_list_TP.setVisible(false);
        //End Grant For Table***
        
        //Assign System Privileges****
         Option_SP.setSelectedItem("--Please Select One--");
         user_role_list_SP.setVisible(false);
         SciptText_SP.setEnabled(false);
        //End
     
        //Assign Role***
         Option_AR.setSelectedItem("Role");
         ScriptText_AR.setEnabled(false);
         checkEdit=false;
           
        //End
         
         //Revoke sys p**
         SciptText_SP1.setEnabled(false);
         Option_SP1.setSelectedItem("Role");
         user_role_list_SP1.setVisible(false);
         //end
         
         //Revoke TP
        Option_TP1.setSelectedIndex(0);       
        ScriptText_TP1.setEnabled(false);  
        user_role_list_TP1.setVisible(false);
        
        //revoke Role****
         Option_AR1.setSelectedItem("--Please Select One--");
         ScriptText_AR1.setEnabled(false);
         checkEdit_AR1=false;  
        //End
       
         saveScript_TP.setEnabled(false);
         saveScript_SP.setEnabled(false);
         saveScript_AR.setEnabled(false);
         saveScript_SP1.setEnabled(false);
         saveScript_TP1.setEnabled(false);
         saveScript_AR1.setEnabled(false);
         
         SciptText_SP.setDisabledTextColor(Color.BLACK);
         scriptText_TP.setDisabledTextColor(Color.BLACK);
         ScriptText_AR.setDisabledTextColor(Color.BLACK);
         SciptText_SP1.setDisabledTextColor(Color.BLACK);
         ScriptText_TP1.setDisabledTextColor(Color.BLACK);
         ScriptText_AR1.setDisabledTextColor(Color.BLACK);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        assignSystemPrivPane = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        Option_SP = new javax.swing.JComboBox();
        user_role_list_SP = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        SciptText_SP = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        Table_SP = new javax.swing.JTable();
        show_SP = new javax.swing.JButton();
        editScript_SP = new javax.swing.JButton();
        deSelect_SP = new javax.swing.JButton();
        ok_SP = new javax.swing.JButton();
        Cancel_SP = new javax.swing.JButton();
        saveScript_SP = new javax.swing.JButton();
        assignObjPrivPane = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Table_privileges = new javax.swing.JTable();
        show_TP = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        scriptText_TP = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        list_table_TP = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        Option_TP = new javax.swing.JComboBox();
        saveScript_TP = new javax.swing.JButton();
        editScript_TP = new javax.swing.JButton();
        user_role_list_TP = new javax.swing.JComboBox();
        ok_TP = new javax.swing.JButton();
        cancel_TP = new javax.swing.JButton();
        selectAll_TP = new javax.swing.JButton();
        deselect_TP = new javax.swing.JButton();
        assignRole = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        list_roleAR = new javax.swing.JComboBox();
        Option_AR = new javax.swing.JComboBox();
        jScrollPane5 = new javax.swing.JScrollPane();
        ScriptText_AR = new javax.swing.JTextArea();
        showScript_AP = new javax.swing.JButton();
        editScript_AP = new javax.swing.JButton();
        list_user_role_AR = new javax.swing.JComboBox();
        ok_AP = new javax.swing.JButton();
        cancel_AP = new javax.swing.JButton();
        saveScript_AR = new javax.swing.JButton();
        roleOrUserName = new javax.swing.JLabel();
        revokeSR = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        Table_SP1 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        Option_SP1 = new javax.swing.JComboBox();
        user_role_list_SP1 = new javax.swing.JComboBox();
        DeSelect_SP1 = new javax.swing.JButton();
        show_SP1 = new javax.swing.JButton();
        editScript_SP1 = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        SciptText_SP1 = new javax.swing.JTextArea();
        cancel_SP1 = new javax.swing.JButton();
        ok_RSP = new javax.swing.JButton();
        saveScript_SP1 = new javax.swing.JButton();
        revokeObj = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        Table_privileges1 = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        ScriptText_TP1 = new javax.swing.JTextArea();
        ok_TP1 = new javax.swing.JButton();
        cancel_TP1 = new javax.swing.JButton();
        show_TP1 = new javax.swing.JButton();
        editScript_TP1 = new javax.swing.JButton();
        saveScript_TP1 = new javax.swing.JButton();
        SelectAll_TP1 = new javax.swing.JButton();
        deselect_TP1 = new javax.swing.JButton();
        user_role_list_TP1 = new javax.swing.JComboBox();
        Option_TP1 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        list_table_TP1 = new javax.swing.JComboBox();
        revokeRole = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        list_roleAR1 = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        Option_AR1 = new javax.swing.JComboBox();
        list_user_role_AR1 = new javax.swing.JComboBox();
        showScript_AP1 = new javax.swing.JButton();
        editScript_AP1 = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        ScriptText_AR1 = new javax.swing.JTextArea();
        cancel_AP1 = new javax.swing.JButton();
        ok_AP1 = new javax.swing.JButton();
        saveScript_AR1 = new javax.swing.JButton();
        refresh = new javax.swing.JButton();

        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        assignSystemPrivPane.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                assignSystemPrivPaneAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("To:");

        Option_SP.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--", "Role", "User", "Public" }));
        Option_SP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Option_SPActionPerformed(evt);
            }
        });

        user_role_list_SP.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));

        SciptText_SP.setColumns(20);
        SciptText_SP.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        SciptText_SP.setRows(5);
        jScrollPane1.setViewportView(SciptText_SP);

        Table_SP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"All Privileges", null},
                {"Create Session", null},
                {"Grant Any Object Privileges", null},
                {"Grant Any Privileges", null},
                {"Grant Any Role",  new Boolean(false)},
                {"Create Role",  new Boolean(false)},
                {"Drop Any Role", null},
                {"Create Tablespace",  new Boolean(false)},
                {"Drop Tablespace", null},
                {"Alter Tablespace", null},
                {"Unlimited Tablespace",  new Boolean(false)},
                {"Create Table", null},
                {"Create Any Table", null},
                {"Drop Any Table", null},
                {"Alter Any Table", null},
                {"Insert Any Table", null},
                {"Select Any Table", null},
                {"Create View", null},
                {"Create Any View", null},
                {"Drop Any View", null},
                {"Create Sequence", null},
                {"Create Any Sequence", null},
                {"Drop Any Sequence", null},
                {"Alter Any Sequence", null},
                {"Select Any Sequence", null},
                {"Create Materialized View", null},
                {"Create Any Materialized View", null},
                {"Drop Any Materialized View", null},
                {"Alter Any Materialized View",  new Boolean(false)},
                {"Drop Any Index", null},
                {"Create Any Index", null},
                {"Alter Any Index ", null},
                {"CREATE ANY DIRECTORY", null},
                {"DROP ANY DIRECTORY", null},
                {"DBA", null},
                {"Exp_FullL_Database", null},
                {"Imp_FullL_Database", null}
            },
            new String [] {
                "System Prviliges", "tick/untick"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(Table_SP);

        show_SP.setText("Show Script");
        show_SP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                show_SPActionPerformed(evt);
            }
        });
        show_SP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                show_SPKeyPressed(evt);
            }
        });

        editScript_SP.setText("Edit Script");
        editScript_SP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editScript_SPActionPerformed(evt);
            }
        });
        editScript_SP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                editScript_SPKeyReleased(evt);
            }
        });

        deSelect_SP.setText("DeSelect All");
        deSelect_SP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deSelect_SPActionPerformed(evt);
            }
        });
        deSelect_SP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deSelect_SPKeyPressed(evt);
            }
        });

        ok_SP.setText("Ok");
        ok_SP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ok_SPActionPerformed(evt);
            }
        });
        ok_SP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ok_SPKeyPressed(evt);
            }
        });

        Cancel_SP.setText("Cancel");
        Cancel_SP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cancel_SPActionPerformed(evt);
            }
        });

        saveScript_SP.setText("Save Script");
        saveScript_SP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveScript_SPActionPerformed(evt);
            }
        });
        saveScript_SP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saveScript_SPKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout assignSystemPrivPaneLayout = new javax.swing.GroupLayout(assignSystemPrivPane);
        assignSystemPrivPane.setLayout(assignSystemPrivPaneLayout);
        assignSystemPrivPaneLayout.setHorizontalGroup(
            assignSystemPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assignSystemPrivPaneLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(assignSystemPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(deSelect_SP)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(assignSystemPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(assignSystemPrivPaneLayout.createSequentialGroup()
                        .addGroup(assignSystemPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(assignSystemPrivPaneLayout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(jLabel6))
                            .addGroup(assignSystemPrivPaneLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(assignSystemPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(show_SP, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                                    .addComponent(editScript_SP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(saveScript_SP, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(assignSystemPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(assignSystemPrivPaneLayout.createSequentialGroup()
                                .addGroup(assignSystemPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(user_role_list_SP, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Option_SP, javax.swing.GroupLayout.Alignment.LEADING, 0, 148, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(assignSystemPrivPaneLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 233, Short.MAX_VALUE)
                        .addComponent(Cancel_SP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ok_SP)))
                .addGap(72, 72, 72))
        );
        assignSystemPrivPaneLayout.setVerticalGroup(
            assignSystemPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assignSystemPrivPaneLayout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(assignSystemPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Option_SP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(user_role_list_SP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73)
                .addGroup(assignSystemPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(assignSystemPrivPaneLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(show_SP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editScript_SP)
                        .addGap(18, 18, 18)
                        .addComponent(saveScript_SP))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(assignSystemPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ok_SP)
                    .addComponent(Cancel_SP))
                .addGap(60, 60, 60))
            .addGroup(assignSystemPrivPaneLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deSelect_SP)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Assign System Privileges", assignSystemPrivPane);

        assignObjPrivPane.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                assignObjPrivPaneAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        Table_privileges.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"All Privileges", null},
                {"Select", null},
                {"Delete", null},
                {"Insert", null},
                {"Update", null},
                {"References", null},
                {"Update", null}
            },
            new String [] {
                "Object Privileges", "Tick/Untick"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(Table_privileges);

        show_TP.setText("Show Script");
        show_TP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                show_TPActionPerformed(evt);
            }
        });
        show_TP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                show_TPKeyPressed(evt);
            }
        });

        scriptText_TP.setColumns(20);
        scriptText_TP.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        scriptText_TP.setRows(5);
        jScrollPane4.setViewportView(scriptText_TP);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Table:");

        list_table_TP.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));

        jLabel2.setText("To:");

        Option_TP.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--", "Role", "User", "Public" }));
        Option_TP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Option_TPActionPerformed(evt);
            }
        });

        saveScript_TP.setText("Save Script");
        saveScript_TP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveScript_TPActionPerformed(evt);
            }
        });
        saveScript_TP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saveScript_TPKeyPressed(evt);
            }
        });

        editScript_TP.setText("Edit Script");
        editScript_TP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editScript_TPActionPerformed(evt);
            }
        });
        editScript_TP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                editScript_TPKeyPressed(evt);
            }
        });

        user_role_list_TP.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));

        ok_TP.setText("Ok");
        ok_TP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ok_TPActionPerformed(evt);
            }
        });
        ok_TP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ok_TPKeyPressed(evt);
            }
        });

        cancel_TP.setText("Cancel");
        cancel_TP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_TPActionPerformed(evt);
            }
        });
        cancel_TP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancel_TPKeyPressed(evt);
            }
        });

        selectAll_TP.setText("Select All");
        selectAll_TP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAll_TPActionPerformed(evt);
            }
        });
        selectAll_TP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                selectAll_TPKeyPressed(evt);
            }
        });

        deselect_TP.setText("Deselect All");
        deselect_TP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deselect_TPActionPerformed(evt);
            }
        });
        deselect_TP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deselect_TPKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout assignObjPrivPaneLayout = new javax.swing.GroupLayout(assignObjPrivPane);
        assignObjPrivPane.setLayout(assignObjPrivPaneLayout);
        assignObjPrivPaneLayout.setHorizontalGroup(
            assignObjPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assignObjPrivPaneLayout.createSequentialGroup()
                .addGroup(assignObjPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(assignObjPrivPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addGroup(assignObjPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(assignObjPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(list_table_TP, 0, 152, Short.MAX_VALUE)
                            .addComponent(Option_TP, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(user_role_list_TP, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(assignObjPrivPaneLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(assignObjPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(selectAll_TP)
                            .addGroup(assignObjPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(show_TP)
                                .addGroup(assignObjPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(editScript_TP, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(saveScript_TP, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGroup(assignObjPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(assignObjPrivPaneLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(51, 51, 51)
                                .addComponent(ok_TP)
                                .addGap(18, 18, 18)
                                .addComponent(cancel_TP))
                            .addGroup(assignObjPrivPaneLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(deselect_TP)))))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        assignObjPrivPaneLayout.setVerticalGroup(
            assignObjPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assignObjPrivPaneLayout.createSequentialGroup()
                .addGroup(assignObjPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(assignObjPrivPaneLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(assignObjPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(list_table_TP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(assignObjPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(Option_TP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(user_role_list_TP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(assignObjPrivPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(assignObjPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectAll_TP)
                    .addComponent(deselect_TP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(assignObjPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, assignObjPrivPaneLayout.createSequentialGroup()
                        .addComponent(show_TP)
                        .addGap(18, 18, 18)
                        .addComponent(editScript_TP)
                        .addGap(18, 18, 18)
                        .addComponent(saveScript_TP)
                        .addGap(31, 31, 31))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, assignObjPrivPaneLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, assignObjPrivPaneLayout.createSequentialGroup()
                        .addGroup(assignObjPrivPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ok_TP)
                            .addComponent(cancel_TP))
                        .addGap(21, 21, 21))))
        );

        jTabbedPane1.addTab("Assign Object Privileges", assignObjPrivPane);

        assignRole.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                assignRoleAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel4.setText("To:");

        jLabel7.setText("From:");

        list_roleAR.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));

        Option_AR.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--", "Role", "User" }));
        Option_AR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Option_ARActionPerformed(evt);
            }
        });

        ScriptText_AR.setColumns(20);
        ScriptText_AR.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ScriptText_AR.setRows(5);
        jScrollPane5.setViewportView(ScriptText_AR);

        showScript_AP.setText("Show Script");
        showScript_AP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showScript_APActionPerformed(evt);
            }
        });
        showScript_AP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                showScript_APKeyPressed(evt);
            }
        });

        editScript_AP.setText("Edit Script");
        editScript_AP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editScript_APActionPerformed(evt);
            }
        });
        editScript_AP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                editScript_APKeyPressed(evt);
            }
        });

        list_user_role_AR.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));
        list_user_role_AR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                list_user_role_ARActionPerformed(evt);
            }
        });

        ok_AP.setText("Ok");
        ok_AP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ok_APActionPerformed(evt);
            }
        });
        ok_AP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ok_APKeyPressed(evt);
            }
        });

        cancel_AP.setText("Cancel");
        cancel_AP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_APActionPerformed(evt);
            }
        });
        cancel_AP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancel_APKeyPressed(evt);
            }
        });

        saveScript_AR.setText("Save Script");
        saveScript_AR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveScript_ARActionPerformed(evt);
            }
        });
        saveScript_AR.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saveScript_ARKeyPressed(evt);
            }
        });

        roleOrUserName.setText("Name:");

        javax.swing.GroupLayout assignRoleLayout = new javax.swing.GroupLayout(assignRole);
        assignRole.setLayout(assignRoleLayout);
        assignRoleLayout.setHorizontalGroup(
            assignRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assignRoleLayout.createSequentialGroup()
                .addGroup(assignRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(assignRoleLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(assignRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(assignRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(showScript_AP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editScript_AP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(saveScript_AR))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(assignRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(assignRoleLayout.createSequentialGroup()
                                .addGap(121, 121, 121)
                                .addComponent(cancel_AP)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ok_AP))
                            .addComponent(jScrollPane5)))
                    .addGroup(assignRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, assignRoleLayout.createSequentialGroup()
                            .addGap(66, 66, 66)
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(list_roleAR, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, assignRoleLayout.createSequentialGroup()
                            .addGroup(assignRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(assignRoleLayout.createSequentialGroup()
                                    .addGap(79, 79, 79)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(assignRoleLayout.createSequentialGroup()
                                    .addGap(64, 64, 64)
                                    .addComponent(roleOrUserName)))
                            .addGap(18, 18, 18)
                            .addGroup(assignRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(list_user_role_AR, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Option_AR, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(306, Short.MAX_VALUE))
        );
        assignRoleLayout.setVerticalGroup(
            assignRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assignRoleLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(assignRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(list_roleAR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(assignRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Option_AR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(assignRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(list_user_role_AR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roleOrUserName))
                .addGap(3, 3, 3)
                .addGroup(assignRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(assignRoleLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(assignRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ok_AP)
                            .addComponent(cancel_AP)))
                    .addGroup(assignRoleLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(showScript_AP)
                        .addGap(18, 18, 18)
                        .addComponent(editScript_AP)
                        .addGap(10, 10, 10)
                        .addComponent(saveScript_AR)))
                .addContainerGap(83, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Assign Role ", assignRole);

        revokeSR.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                revokeSRAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        Table_SP1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"All Privileges", null},
                {"Grant Any Privileges",  new Boolean(false)},
                {"Grant Any Role", null},
                {"Grant Any Object Privileges", null},
                {"Create Session", null},
                {"Create Table", null},
                {"Create View", null},
                {"Create Sequence", null},
                {"Create Procedure", null},
                {"Create Role",  new Boolean(false)},
                {"Create Synonym", null},
                {"Create Tablespace",  new Boolean(false)},
                {"Create Any Table", null},
                {"Create Any Index", null},
                {"Create Any View", null},
                {"Create Any Sequence", null},
                {"Create Any Procedure", null},
                {"Create Any Role", null},
                {"Create Any Synonym", null},
                {"Drop Tablespace", null},
                {"Drop Any Table", null},
                {"Drop Any Index", null},
                {"Drop Any View", null},
                {"Drop Any Sequence", null},
                {"Drop Any Procedure", null},
                {"Drop Any Synonym", null},
                {"Alter Any Table", null},
                {"Alter Any Index ", null},
                {"Alter Any Sequence", null},
                {"Alter Any Procedure",  new Boolean(false)},
                {"Insert Any Table", null},
                {"Select Any Table", null},
                {"Select Any Sequence", null},
                {"DBA", null},
                {"Unlimited Tablespace",  new Boolean(false)},
                {"Exp_FullL_Database", null},
                {"Imp_FullL_Database", null},
                {"Mgmt_User", null}
            },
            new String [] {
                "System Privileges", "tick/untick"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane6.setViewportView(Table_SP1);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("To:");

        Option_SP1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--", "Role", "User" }));
        Option_SP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Option_SP1ActionPerformed(evt);
            }
        });

        user_role_list_SP1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--PLease Select One--" }));

        DeSelect_SP1.setText("DeSelect All");
        DeSelect_SP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeSelect_SP1ActionPerformed(evt);
            }
        });

        show_SP1.setText("Show Script");
        show_SP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                show_SP1ActionPerformed(evt);
            }
        });
        show_SP1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                show_SP1KeyPressed(evt);
            }
        });

        editScript_SP1.setText("Edit Script");
        editScript_SP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editScript_SP1ActionPerformed(evt);
            }
        });
        editScript_SP1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                editScript_SP1KeyPressed(evt);
            }
        });

        SciptText_SP1.setColumns(20);
        SciptText_SP1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        SciptText_SP1.setRows(5);
        jScrollPane7.setViewportView(SciptText_SP1);

        cancel_SP1.setText("Cancel");
        cancel_SP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_SP1ActionPerformed(evt);
            }
        });
        cancel_SP1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancel_SP1KeyPressed(evt);
            }
        });

        ok_RSP.setText("Ok");
        ok_RSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ok_RSPActionPerformed(evt);
            }
        });
        ok_RSP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ok_RSPKeyPressed(evt);
            }
        });

        saveScript_SP1.setText("Save Script");
        saveScript_SP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveScript_SP1ActionPerformed(evt);
            }
        });
        saveScript_SP1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saveScript_SP1KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout revokeSRLayout = new javax.swing.GroupLayout(revokeSR);
        revokeSR.setLayout(revokeSRLayout);
        revokeSRLayout.setHorizontalGroup(
            revokeSRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(revokeSRLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(revokeSRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(DeSelect_SP1)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(revokeSRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(revokeSRLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(revokeSRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(show_SP1, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                            .addComponent(editScript_SP1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(saveScript_SP1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(revokeSRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(revokeSRLayout.createSequentialGroup()
                                .addGap(93, 93, 93)
                                .addComponent(cancel_SP1)
                                .addGap(18, 18, 18)
                                .addComponent(ok_RSP))
                            .addGroup(revokeSRLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(revokeSRLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jLabel8)
                        .addGap(31, 31, 31)
                        .addGroup(revokeSRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(user_role_list_SP1, 0, 143, Short.MAX_VALUE)
                            .addComponent(Option_SP1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(72, Short.MAX_VALUE))
        );
        revokeSRLayout.setVerticalGroup(
            revokeSRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(revokeSRLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DeSelect_SP1)
                .addContainerGap(15, Short.MAX_VALUE))
            .addGroup(revokeSRLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(revokeSRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Option_SP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(user_role_list_SP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(revokeSRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(revokeSRLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(show_SP1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editScript_SP1)
                        .addGap(9, 9, 9)
                        .addComponent(saveScript_SP1))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(revokeSRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancel_SP1)
                    .addComponent(ok_RSP))
                .addGap(55, 55, 55))
        );

        jTabbedPane1.addTab("Revoke System  Privileges", revokeSR);

        revokeObj.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                revokeObjAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        Table_privileges1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"All Privileges", null},
                {"Select", null},
                {"Delete", null},
                {"Insert", null},
                {"Update", null},
                {"References", null},
                {"Update", null}
            },
            new String [] {
                "Object Privileges", "Tick/Untick"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane8.setViewportView(Table_privileges1);

        ScriptText_TP1.setColumns(20);
        ScriptText_TP1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ScriptText_TP1.setRows(5);
        jScrollPane9.setViewportView(ScriptText_TP1);

        ok_TP1.setText("Ok");
        ok_TP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ok_TP1ActionPerformed(evt);
            }
        });
        ok_TP1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ok_TP1KeyPressed(evt);
            }
        });

        cancel_TP1.setText("Cancel");
        cancel_TP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_TP1ActionPerformed(evt);
            }
        });
        cancel_TP1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancel_TP1KeyPressed(evt);
            }
        });

        show_TP1.setText("Show Script");
        show_TP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                show_TP1ActionPerformed(evt);
            }
        });
        show_TP1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                show_TP1KeyPressed(evt);
            }
        });

        editScript_TP1.setText("Edit Script");
        editScript_TP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editScript_TP1ActionPerformed(evt);
            }
        });
        editScript_TP1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                editScript_TP1KeyPressed(evt);
            }
        });

        saveScript_TP1.setText("Save Script");
        saveScript_TP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveScript_TP1ActionPerformed(evt);
            }
        });
        saveScript_TP1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saveScript_TP1KeyPressed(evt);
            }
        });

        SelectAll_TP1.setText("Select All");
        SelectAll_TP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectAll_TP1ActionPerformed(evt);
            }
        });

        deselect_TP1.setText("Deselect All");
        deselect_TP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deselect_TP1ActionPerformed(evt);
            }
        });
        deselect_TP1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deselect_TP1KeyPressed(evt);
            }
        });

        user_role_list_TP1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));

        Option_TP1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--", "Role", "User", " " }));
        Option_TP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Option_TP1ActionPerformed(evt);
            }
        });

        jLabel3.setText("To:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Table:");

        list_table_TP1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));

        javax.swing.GroupLayout revokeObjLayout = new javax.swing.GroupLayout(revokeObj);
        revokeObj.setLayout(revokeObjLayout);
        revokeObjLayout.setHorizontalGroup(
            revokeObjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(revokeObjLayout.createSequentialGroup()
                .addGroup(revokeObjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(revokeObjLayout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(SelectAll_TP1)
                        .addGap(18, 18, 18)
                        .addComponent(deselect_TP1))
                    .addGroup(revokeObjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, revokeObjLayout.createSequentialGroup()
                            .addGap(264, 264, 264)
                            .addComponent(ok_TP1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cancel_TP1))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, revokeObjLayout.createSequentialGroup()
                            .addGap(25, 25, 25)
                            .addGroup(revokeObjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(revokeObjLayout.createSequentialGroup()
                                    .addGroup(revokeObjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(show_TP1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(saveScript_TP1)
                                        .addComponent(editScript_TP1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGap(40, 40, 40)
                                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(263, Short.MAX_VALUE))
            .addGroup(revokeObjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(revokeObjLayout.createSequentialGroup()
                    .addGap(349, 349, 349)
                    .addGroup(revokeObjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel5)
                        .addComponent(jLabel3))
                    .addGap(18, 18, 18)
                    .addGroup(revokeObjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(list_table_TP1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Option_TP1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(user_role_list_TP1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap(153, Short.MAX_VALUE)))
        );
        revokeObjLayout.setVerticalGroup(
            revokeObjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(revokeObjLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(revokeObjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SelectAll_TP1)
                    .addComponent(deselect_TP1))
                .addGap(18, 18, 18)
                .addGroup(revokeObjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(revokeObjLayout.createSequentialGroup()
                        .addComponent(show_TP1)
                        .addGap(18, 18, 18)
                        .addComponent(editScript_TP1)
                        .addGap(18, 18, 18)
                        .addComponent(saveScript_TP1))
                    .addComponent(jScrollPane9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(revokeObjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ok_TP1)
                    .addComponent(cancel_TP1))
                .addContainerGap())
            .addGroup(revokeObjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(revokeObjLayout.createSequentialGroup()
                    .addGap(24, 24, 24)
                    .addGroup(revokeObjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(list_table_TP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(revokeObjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(Option_TP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addComponent(user_role_list_TP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(270, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Revoke Object", revokeObj);

        revokeRole.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                revokeRoleAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel9.setText("From:");

        list_roleAR1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));

        jLabel10.setText("Revoke:");

        Option_AR1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--", "Role", "User" }));
        Option_AR1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Option_AR1ActionPerformed(evt);
            }
        });

        list_user_role_AR1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));

        showScript_AP1.setText("Show Script");
        showScript_AP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showScript_AP1ActionPerformed(evt);
            }
        });
        showScript_AP1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                showScript_AP1KeyPressed(evt);
            }
        });

        editScript_AP1.setText("Edit Script");
        editScript_AP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editScript_AP1ActionPerformed(evt);
            }
        });
        editScript_AP1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                editScript_AP1KeyPressed(evt);
            }
        });

        ScriptText_AR1.setColumns(20);
        ScriptText_AR1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ScriptText_AR1.setRows(5);
        jScrollPane10.setViewportView(ScriptText_AR1);

        cancel_AP1.setText("Cancel");
        cancel_AP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_AP1ActionPerformed(evt);
            }
        });
        cancel_AP1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancel_AP1KeyPressed(evt);
            }
        });

        ok_AP1.setText("Ok");
        ok_AP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ok_AP1ActionPerformed(evt);
            }
        });
        ok_AP1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ok_AP1KeyPressed(evt);
            }
        });

        saveScript_AR1.setText("Save Script");
        saveScript_AR1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveScript_AR1ActionPerformed(evt);
            }
        });
        saveScript_AR1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saveScript_AR1KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout revokeRoleLayout = new javax.swing.GroupLayout(revokeRole);
        revokeRole.setLayout(revokeRoleLayout);
        revokeRoleLayout.setHorizontalGroup(
            revokeRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(revokeRoleLayout.createSequentialGroup()
                .addGroup(revokeRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(revokeRoleLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(revokeRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(revokeRoleLayout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(list_roleAR1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(revokeRoleLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(33, 33, 33)
                                .addGroup(revokeRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(list_user_role_AR1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Option_AR1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(revokeRoleLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(revokeRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(revokeRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(showScript_AP1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editScript_AP1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(saveScript_AR1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(revokeRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(revokeRoleLayout.createSequentialGroup()
                                .addGap(121, 121, 121)
                                .addComponent(cancel_AP1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ok_AP1))
                            .addComponent(jScrollPane10))))
                .addContainerGap(306, Short.MAX_VALUE))
        );
        revokeRoleLayout.setVerticalGroup(
            revokeRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(revokeRoleLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(revokeRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(list_roleAR1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(revokeRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Option_AR1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(list_user_role_AR1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(revokeRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(revokeRoleLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(revokeRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ok_AP1)
                            .addComponent(cancel_AP1)))
                    .addGroup(revokeRoleLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(showScript_AP1)
                        .addGap(18, 18, 18)
                        .addComponent(editScript_AP1)
                        .addGap(10, 10, 10)
                        .addComponent(saveScript_AR1)))
                .addContainerGap(75, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Revoke Role", revokeRole);

        refresh.setIcon(refreshIcon(15));
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });
        refresh.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                refreshKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 686, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refresh)
                .addContainerGap(75, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 411, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    public Controller thisController = new Controller();
    int choice_TP=0;
    int choice_SP=0;
    int choice_RSP=0;
    int choice_RTP=0;
    boolean checkEdit;
   boolean  checkEdit_AR1;
    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        retriveRoleNameFromDB();

    }//GEN-LAST:event_refreshActionPerformed

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        retriveRoleNameFromDB();
         retrieveTblFromDB();
    }//GEN-LAST:event_formAncestorAdded

    private void refreshKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_refreshKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            refresh.doClick();
        }
    }//GEN-LAST:event_refreshKeyPressed

    private void saveScript_TPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveScript_TPActionPerformed
                int val = 0;

        //set button name for fileChooser
        UIManager.put("FileChooser.openDialogTitleText", "Load Script File");
        UIManager.put("FileChooser.openButtonText", "Save Script");
        
        //Browse file from drive
        JFileChooser fileChooser = new JFileChooser();

        try {
            val = fileChooser.showOpenDialog(null);
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Error opening the file dialogue",
                null, JOptionPane.ERROR_MESSAGE);
        }

        //if file is approve to open start to save the script to that file
        if (val == JFileChooser.APPROVE_OPTION) {
            String saveScriptPath = fileChooser.getSelectedFile().getAbsolutePath();
            if(saveScriptPath.endsWith(".sql")){
                thisController.writeScrpitForSave(saveScriptPath,scriptText_TP.getText());
            }else{
                saveScriptPath = saveScriptPath+".sql";
                thisController.writeScrpitForSave(saveScriptPath,scriptText_TP.getText());
            }
            JOptionPane.showMessageDialog(null, "Script is Saved.");
        }
    }//GEN-LAST:event_saveScript_TPActionPerformed

    private void show_TPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_show_TPActionPerformed
        callTable();
        scriptText_TP.setEnabled(false);
        saveScript_TP.setEnabled(true);
    }//GEN-LAST:event_show_TPActionPerformed

    private void Option_TPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Option_TPActionPerformed
        if(Option_TP.getSelectedItem()=="Role"){
            user_role_list_TP.setVisible(true);
            user_role_list_TP.setEnabled(true);
            thisController.connectiontoDB("getRole");
            ArrayList<String> arrList = new ArrayList<String>();
            arrList.addAll(thisController.arrList);
            user_role_list_TP.removeAllItems();
            user_role_list_TP.addItem("--Please Select One--");
            for(int i = 0; i<arrList.size();i++){
                user_role_list_TP.addItem(arrList.get(i));
            }
            choice_TP=0;
        }else 
            if(Option_TP.getSelectedItem()=="User"){
             user_role_list_TP.setVisible(true);
             user_role_list_TP.setEnabled(true);
             user_role_list_TP.removeAllItems();
             thisController.connectiontoDB("get_User");
             ArrayList<String> arrList = new ArrayList<String>();
             arrList.addAll(thisController.arrList);
             user_role_list_TP.addItem("--Please Select One--");
             for(int i = 0; i<arrList.size();i++){
                user_role_list_TP.addItem(arrList.get(i));
            }
             choice_TP=0;
         }else
              if(Option_TP.getSelectedItem()=="--Please Select One--"){
                  user_role_list_TP.removeAllItems(); 
                  user_role_list_TP.setVisible(false);
                  choice_TP=0;
         }else
              if(Option_TP.getSelectedItem()=="Public"){
                 user_role_list_TP.setEnabled(false);
                 choice_TP=1;
              }
        
               
    }//GEN-LAST:event_Option_TPActionPerformed

    private void ok_TPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ok_TPActionPerformed

        thisController.connectiontoDB("openConn");
     
        boolean success=false;
        try {
                if(choice_TP!=3){
                    if(user_role_list_TP.getSelectedIndex()!=0){
                    int reply = JOptionPane.showConfirmDialog(null, "Are you sure you would like to grant this to "
                +(String) user_role_list_TP.getSelectedItem(),
                "Click Yes or No", JOptionPane.YES_NO_OPTION);
                   if(reply == JOptionPane.YES_OPTION){
                   if(Option_TP.getSelectedItem()!="--Please Select One--"&& 
                           list_table_TP.getSelectedIndex()!=0){ 
                   callTable();
                   success=true;        
                   String script =  scriptText_TP.getText();
                   PreparedStatement st = connection.prepareStatement(script);
                   st.executeUpdate();
                   thisController.history(script);
                    }
                   }
                  }else {
                        JOptionPane.showMessageDialog(this,"Table/Role/User are missing",
                          "Error",JOptionPane.ERROR_MESSAGE);
                    }
                }else if(choice_TP==3){
                    //when user edit script
                   String script =  scriptText_TP.getText(); 
                   success=true;        
                   PreparedStatement st = connection.prepareStatement(script);
                   st.executeUpdate();
                   thisController.history(script);
                }         
                  
           
                   
        }catch (SQLException ex)
                {
                     success=false; 
                    JOptionPane.showMessageDialog(this,ex.getMessage());
               }
        if(success==true){
             JOptionPane.showMessageDialog(this, "Grant Succeeded ");
             scriptText_TP.setText("");
             choice_TP=0;
        }
    
    }//GEN-LAST:event_ok_TPActionPerformed

    private void editScript_TPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editScript_TPActionPerformed
        selectAll_TP.setVisible(false);
        deselect_TP.setVisible(false);        
        saveScript_TP.setEnabled(true);
        scriptText_TP.setEnabled(true);
        Table_privileges.setEnabled(false);
        list_table_TP.setEnabled(false);
        Option_TP.setEnabled(false);
        user_role_list_TP.setVisible(false);
        choice_TP=3;
    }//GEN-LAST:event_editScript_TPActionPerformed

    private void cancel_TPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_TPActionPerformed
        selectAll_TP.setVisible(true);
        deselect_TP.setVisible(true); 
        scriptText_TP.setText("");
        choice_TP=0;
        Option_TP.setSelectedItem("--Please Select One--");
        scriptText_TP.setEnabled(false);
       saveScript_TP.setEnabled(false);
        user_role_list_TP.setVisible(false);
        //Deselect ALL 
        for( int i =0; i<Table_privileges.getRowCount();i++){
            Table_privileges.setValueAt(false, i, 1);
            }
    }//GEN-LAST:event_cancel_TPActionPerformed

    private void deselect_TPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deselect_TPActionPerformed
           for( int i =0; i<Table_privileges.getRowCount();i++){
            Table_privileges.setValueAt(false, i, 1);
            }
    }//GEN-LAST:event_deselect_TPActionPerformed

    private void selectAll_TPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAll_TPActionPerformed
           for( int i =0; i<Table_privileges.getRowCount();i++){
            Table_privileges.setValueAt(true, i, 1);
            }
    }//GEN-LAST:event_selectAll_TPActionPerformed

    private void Option_SPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Option_SPActionPerformed
       if(Option_SP.getSelectedItem()=="--Please Select One--"){
           user_role_list_SP.setVisible(false);
           choice_SP=0;
            user_role_list_SP.removeAllItems();
       }else if(Option_SP.getSelectedItem()=="Role"){
            user_role_list_SP.setVisible(true);
           
            user_role_list_SP.removeAllItems();
            user_role_list_SP.addItem("--Please Select One--");
            thisController.connectiontoDB("getRole");
            ArrayList<String> arrList = new ArrayList<String>();
            arrList.addAll(thisController.arrList);

            for(int i = 0; i<arrList.size();i++){
                user_role_list_SP.addItem(arrList.get(i));
            }
            choice_SP=0;
       }else if(Option_SP.getSelectedItem()=="User"){
           user_role_list_SP.setVisible(true);
           
            user_role_list_SP.removeAllItems();
            user_role_list_SP.addItem("--Please Select One--");
             thisController.connectiontoDB("get_User");
             ArrayList<String> arrList = new ArrayList<String>();
             arrList.addAll(thisController.arrList);
             
             for(int i = 0; i<arrList.size();i++){
                user_role_list_SP.addItem(arrList.get(i));
            }
            choice_SP=0;
       }else if(Option_SP.getSelectedItem()=="Public"){
           user_role_list_SP.setVisible(false);
           choice_SP=1;
       }
    }//GEN-LAST:event_Option_SPActionPerformed

    private void show_SPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_show_SPActionPerformed
       
       callSPTable();
       saveScript_SP.setEnabled(true);
    }//GEN-LAST:event_show_SPActionPerformed

    private void editScript_SPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editScript_SPActionPerformed
         SciptText_SP.setEnabled(true);
        saveScript_SP.setEnabled(true);
         choice_SP=3;
    }//GEN-LAST:event_editScript_SPActionPerformed

    private void deSelect_SPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deSelect_SPActionPerformed
        for( int i =0; i<Table_SP.getRowCount();i++){
            Table_SP.setValueAt(false, i, 1);
            }
    }//GEN-LAST:event_deSelect_SPActionPerformed

    private void Cancel_SPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cancel_SPActionPerformed
        for( int i =0; i<Table_SP.getRowCount();i++){
            Table_SP.setValueAt(false, i, 1);
            }
        choice_SP=0;
       SciptText_SP.setText("");  
      user_role_list_SP.setVisible(false);
       SciptText_SP.setEnabled(false);   
        saveScript_SP.setEnabled(false);
    }//GEN-LAST:event_Cancel_SPActionPerformed

    private void ok_SPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ok_SPActionPerformed
       thisController.connectiontoDB("openConn");
     
        boolean success=false;
        try {
                if(choice_SP!=3 && choice_SP!=1){
                    if(user_role_list_SP.getSelectedIndex()!=0){
                    int reply = JOptionPane.showConfirmDialog(null, "Are you sure "
                            + "you would like to grant this to "
                +(String) user_role_list_SP.getSelectedItem(),
                "Click Yes or No", JOptionPane.YES_NO_OPTION);
                   if(reply == JOptionPane.YES_OPTION){
                   if(Option_SP.getSelectedItem()!="--Please Select One--"){ 
                   callSPTable();
                   success=true;        
                   String script =  SciptText_SP.getText();
                   PreparedStatement st = connection.prepareStatement(script);
                   st.executeUpdate();
                   thisController.history(script);
                     }
                   }
                  }else{
                       JOptionPane.showMessageDialog(this,"Role Or User is missing",
                          "Error",JOptionPane.ERROR_MESSAGE);
                    }
                }else if(choice_SP==3){
                    //when user edit script
                     int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to do this?",
                "Click Yes or No", JOptionPane.YES_NO_OPTION);
                   if(reply == JOptionPane.YES_OPTION){
                   String script =  SciptText_SP.getText(); 
                   success=true;        
                   PreparedStatement st = connection.prepareStatement(script);
                   st.executeUpdate();
                   thisController.history(script);
                }         
                }else if(choice_SP==1){
                      int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to grant this to public?",
                "Click Yes or No", JOptionPane.YES_NO_OPTION);
                   if(reply == JOptionPane.YES_OPTION){
                   callSPTable();
                   String script =  SciptText_SP.getText(); 
                   success=true;        
                   PreparedStatement st = connection.prepareStatement(script);
                   st.executeUpdate();
                }
                }
        }catch (SQLException ex)
                {
                     success=false; 
                    JOptionPane.showMessageDialog(this,ex.getMessage());
               }
        if(success==true){
             JOptionPane.showMessageDialog(this, "Grant Succeeded ");
             SciptText_SP.setText("");
             choice_SP=0;
        }
    }//GEN-LAST:event_ok_SPActionPerformed

    private void Option_ARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Option_ARActionPerformed
        if(Option_AR.getSelectedItem()=="Role"){
            list_user_role_AR.removeAllItems();
             thisController.connectiontoDB("getRole");
            ArrayList<String> arrList = new ArrayList<String>();
            arrList.addAll(thisController.arrList);
            list_user_role_AR.addItem("--Please Select One--");
            for(int i = 0; i<arrList.size();i++){
                list_user_role_AR.addItem(arrList.get(i));
            }
            
        }else if(Option_AR.getSelectedItem()=="User"){
            list_user_role_AR.removeAllItems();
             thisController.connectiontoDB("get_User");
             ArrayList<String> arrList = new ArrayList<String>();
             arrList.addAll(thisController.arrList);
             list_user_role_AR.addItem("--Please Select One--");
             for(int i = 0; i<arrList.size();i++){
                list_user_role_AR.addItem(arrList.get(i));
            }
        }
    }//GEN-LAST:event_Option_ARActionPerformed

    private void editScript_APActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editScript_APActionPerformed
        list_user_role_AR.setEnabled(false);
        Option_AR.setEnabled(false);
        list_roleAR.setEnabled(false);
        ScriptText_AR.setEnabled(true);
        checkEdit=true;
         saveScript_AR.setEnabled(true);
    }//GEN-LAST:event_editScript_APActionPerformed

    private void list_user_role_ARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_list_user_role_ARActionPerformed
       
    }//GEN-LAST:event_list_user_role_ARActionPerformed

    private void cancel_APActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_APActionPerformed
        list_user_role_AR.setEnabled(true);
        Option_AR.setEnabled(true);
        list_roleAR.setEnabled(true); 
       checkEdit=false;
       ScriptText_AR.setEnabled(false);
       ScriptText_AR.setText("");
       saveScript_AR.setEnabled(false);
    }//GEN-LAST:event_cancel_APActionPerformed

    private void ok_APActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ok_APActionPerformed
       if(checkEdit==false){
            int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to grant "
                            + (String) list_roleAR.getSelectedItem()+ " To "
                +(String) list_user_role_AR.getSelectedItem(),
                "Click Yes or No", JOptionPane.YES_NO_OPTION);
                   if(reply == JOptionPane.YES_OPTION){
               Boolean check = thisController.connectiontoDB("GrantRole");
                if(check == true){
            JOptionPane.showMessageDialog(this, "Grant succeeded!!");
            thisController.history(thisController.grantRole());

        }else{
            JOptionPane.showMessageDialog(this, thisController.errorMsg,
                "Error",JOptionPane.ERROR_MESSAGE);
            }
                   }
       }else if(checkEdit==true){
        thisController.connectiontoDB("openConn");
        boolean success=false;
           try {          
                  int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to do this?",
                "Click Yes or No", JOptionPane.YES_NO_OPTION);
                   if(reply == JOptionPane.YES_OPTION){
                   
                   success=true;        
                   String script =  ScriptText_AR.getText();
                   PreparedStatement st = connection.prepareStatement(script);
                   st.executeUpdate();
                   thisController.history(script);
                   }           
                   
        }catch (SQLException ex)
                {
                     success=false; 
                    JOptionPane.showMessageDialog(this,ex.getMessage());
               }
        if(success==true){
             JOptionPane.showMessageDialog(this, "Grant Succeeded ");
             ScriptText_AR.setText("");
        }
       }
    }//GEN-LAST:event_ok_APActionPerformed

    private void Option_SP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Option_SP1ActionPerformed
       if(Option_SP1.getSelectedItem()=="--Please Select One--"){
           user_role_list_SP1.setVisible(false);
           choice_RSP=0;
            user_role_list_SP1.removeAllItems();
       }else if(Option_SP1.getSelectedItem()=="Role"){
            user_role_list_SP1.setVisible(true);
           
            user_role_list_SP1.removeAllItems();
            thisController.connectiontoDB("getRole");
            ArrayList<String> arrList = new ArrayList<String>();
            arrList.addAll(thisController.arrList);
            user_role_list_SP1.addItem("--Please Select One--");
            for(int i = 0; i<arrList.size();i++){
                user_role_list_SP1.addItem(arrList.get(i));
            }
            choice_RSP=0;
       }else if(Option_SP1.getSelectedItem()=="User"){
           user_role_list_SP1.setVisible(true);
           
            user_role_list_SP1.removeAllItems();
             thisController.connectiontoDB("get_User");
             ArrayList<String> arrList = new ArrayList<String>();
             arrList.addAll(thisController.arrList);
             user_role_list_SP1.addItem("--Please Select One--");
             
             for(int i = 0; i<arrList.size();i++){
                user_role_list_SP1.addItem(arrList.get(i));
            }
            choice_RSP=0;
       }
    }//GEN-LAST:event_Option_SP1ActionPerformed

    private void DeSelect_SP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeSelect_SP1ActionPerformed
           for( int i =0; i<Table_SP1.getRowCount();i++){
            Table_SP1.setValueAt(false, i, 1);
            }
    }//GEN-LAST:event_DeSelect_SP1ActionPerformed

    private void show_SP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_show_SP1ActionPerformed
        RevokeSPtable();
        saveScript_SP1.setEnabled(true);
    }//GEN-LAST:event_show_SP1ActionPerformed

    private void editScript_SP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editScript_SP1ActionPerformed
       SciptText_SP1.setEnabled(true);
         choice_RSP=3;
         saveScript_SP1.setEnabled(true);
    }//GEN-LAST:event_editScript_SP1ActionPerformed

    private void cancel_SP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_SP1ActionPerformed
        for( int i =0; i<Table_SP1.getRowCount();i++){
                    Table_SP1.setValueAt(false, i, 1);
                    }
                choice_RSP=0;
               SciptText_SP1.setText(""); 
               Option_SP1.setSelectedItem("--Please Select One--");   
              user_role_list_SP1.setVisible(false);
               SciptText_SP1.setEnabled(false);
   
                saveScript_SP1.setEnabled(false);
    }//GEN-LAST:event_cancel_SP1ActionPerformed

    private void ok_RSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ok_RSPActionPerformed
         thisController.connectiontoDB("openConn");
     
        boolean success=false;
        try {
                if(choice_RSP!=3){
                    if(user_role_list_SP1.getSelectedItem()!=null){
                    int reply = JOptionPane.showConfirmDialog(null, "Are you sure you would like to revoke this from "
                +(String) user_role_list_SP1.getSelectedItem(),
                "Click Yes or No", JOptionPane.YES_NO_OPTION);
                   if(reply == JOptionPane.YES_OPTION){
                   if(Option_SP1.getSelectedItem()!="--Please Select One--"){ 
                   RevokeSPtable();
                   success=true;        
                   String script =  SciptText_SP1.getText();
                   PreparedStatement st = connection.prepareStatement(script);
                   st.executeUpdate();
                   thisController.history(script);
                     }
                   }
                  }else{
                       JOptionPane.showMessageDialog(this,"Role Or User is missing",
                          "Error",JOptionPane.ERROR_MESSAGE);
                    }
                }else if(choice_RSP==3){
                    //when user edit script
                   String script =  SciptText_SP1.getText(); 
                   success=true;        
                   PreparedStatement st = connection.prepareStatement(script);
                   st.executeUpdate();
                   thisController.history(script);
                }               
        }catch (SQLException ex)
                {
                     success=false; 
                    JOptionPane.showMessageDialog(this,ex.getMessage());
               }
        if(success==true){
             JOptionPane.showMessageDialog(this, "Revoke Succeeded ");
             SciptText_SP1.setText("");
             choice_RSP=0;
        }
    }//GEN-LAST:event_ok_RSPActionPerformed

    private void ok_TP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ok_TP1ActionPerformed
       thisController.connectiontoDB("openConn");
     
        boolean success=false;
        try {
                if(choice_RTP!=3){
                    if(user_role_list_TP1.getSelectedIndex()!=0){
                    int reply = JOptionPane.showConfirmDialog(null, "Are you sure you would like to grant this to "
                +(String) user_role_list_TP1.getSelectedItem(),
                "Click Yes or No", JOptionPane.YES_NO_OPTION);
                   if(reply == JOptionPane.YES_OPTION){
                   if(Option_TP1.getSelectedItem()!="--Please Select One--"&& 
                           list_table_TP1.getSelectedItem()!=""){ 
                   RevokeTPtable();
                   success=true;        
                   String script =  ScriptText_TP1.getText();
                   PreparedStatement st = connection.prepareStatement(script);
                   st.executeUpdate();
                   thisController.history(script);
                    }
                   }
                  }else {
                        JOptionPane.showMessageDialog(this,"Table/Role/User are missing",
                          "Error",JOptionPane.ERROR_MESSAGE);
                    }
                }else if(choice_RTP==3){
                    //when user edit script
                   String script =  ScriptText_TP1.getText(); 
                   success=true;        
                   PreparedStatement st = connection.prepareStatement(script);
                   st.executeUpdate();
                   thisController.history(script);
                }         
                  
           
                   
        }catch (SQLException ex)
                {
                     success=false; 
                    JOptionPane.showMessageDialog(this,ex.getMessage());
               }
        if(success==true){
             JOptionPane.showMessageDialog(this, "Revoke Succeeded ");
             ScriptText_TP1.setText("");
             choice_RTP=0;
        }
    }//GEN-LAST:event_ok_TP1ActionPerformed

    private void cancel_TP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_TP1ActionPerformed
      SelectAll_TP1.setVisible(true);
        deselect_TP1.setVisible(true); 
        ScriptText_TP1.setText("");
        choice_RTP=0;
        Option_TP1.setSelectedItem("--Please Select One--");
        ScriptText_TP1.setEnabled(false);
        user_role_list_TP1.setVisible(false);
        //Deselect ALL 
        for( int i =0; i<Table_privileges1.getRowCount();i++){
            Table_privileges1.setValueAt(false, i, 1);
            }
        saveScript_TP1.setEnabled(false);
    }//GEN-LAST:event_cancel_TP1ActionPerformed

    private void show_TP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_show_TP1ActionPerformed
        RevokeTPtable();
        ScriptText_TP1.setEnabled(false);
        saveScript_TP1.setEnabled(true);
    }//GEN-LAST:event_show_TP1ActionPerformed

    private void editScript_TP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editScript_TP1ActionPerformed
       SelectAll_TP1.setVisible(false);
        deselect_TP1.setVisible(false);        
        ScriptText_TP1.setEnabled(true);
        Table_privileges1.setEnabled(false);
        list_table_TP1.setEnabled(false);
        Option_TP1.setEnabled(false);
        user_role_list_TP1.setVisible(false);
        choice_RTP=3;
        saveScript_TP1.setEnabled(true);
    }//GEN-LAST:event_editScript_TP1ActionPerformed

    private void saveScript_TP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveScript_TP1ActionPerformed
               int val = 0;

        //set button name for fileChooser
        UIManager.put("FileChooser.openDialogTitleText", "Load Script File");
        UIManager.put("FileChooser.openButtonText", "Save Script");

        //Browse file from drive
        JFileChooser fileChooser = new JFileChooser();

        try {
            val = fileChooser.showOpenDialog(null);
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Error opening the file dialogue",
                null, JOptionPane.ERROR_MESSAGE);
        }

        //if file is approve to open start to save the script to that file
        if (val == JFileChooser.APPROVE_OPTION) {
            String saveScriptPath = fileChooser.getSelectedFile().getAbsolutePath();
            if(saveScriptPath.endsWith(".sql")){
                thisController.writeScrpitForSave(saveScriptPath,ScriptText_TP1.getText());
            }else{
                saveScriptPath = saveScriptPath+".sql";
                thisController.writeScrpitForSave(saveScriptPath,ScriptText_TP1.getText());
            }
            JOptionPane.showMessageDialog(null, "Script is Saved.");
        }
    }//GEN-LAST:event_saveScript_TP1ActionPerformed

    private void SelectAll_TP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectAll_TP1ActionPerformed
          for( int i =0; i<Table_privileges1.getRowCount();i++){
            Table_privileges1.setValueAt(true, i, 1);
            }
    }//GEN-LAST:event_SelectAll_TP1ActionPerformed

    private void deselect_TP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deselect_TP1ActionPerformed
         for( int i =0; i<Table_privileges1.getRowCount();i++){
            Table_privileges1.setValueAt(false, i, 1);
            }
    }//GEN-LAST:event_deselect_TP1ActionPerformed

    private void Option_TP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Option_TP1ActionPerformed
         if(Option_TP1.getSelectedItem()=="Role"){
            user_role_list_TP1.setVisible(true);
            user_role_list_TP1.setEnabled(true);
            thisController.connectiontoDB("getRole");
            ArrayList<String> arrList = new ArrayList<String>();
            arrList.addAll(thisController.arrList);
            user_role_list_TP1.removeAllItems();
            user_role_list_TP1.addItem("--Please Select One--");
            for(int i = 0; i<arrList.size();i++){
                user_role_list_TP1.addItem(arrList.get(i));
            }
            choice_RTP=0;
        }else 
            if(Option_TP1.getSelectedItem()=="User"){
             user_role_list_TP1.setVisible(true);
             user_role_list_TP1.setEnabled(true);
             user_role_list_TP1.removeAllItems();
             thisController.connectiontoDB("get_User");
             ArrayList<String> arrList = new ArrayList<String>();
             arrList.addAll(thisController.arrList);
             user_role_list_TP1.addItem("--Please Select One--");
             for(int i = 0; i<arrList.size();i++){
                user_role_list_TP1.addItem(arrList.get(i));
            }
             choice_RTP=0;
         }else
              if(Option_TP1.getSelectedItem()=="--Please Select One--"){
                  user_role_list_TP1.removeAllItems(); 
                  user_role_list_TP1.setVisible(false);
                  choice_RTP=0;
         }
    }//GEN-LAST:event_Option_TP1ActionPerformed

    private void Option_AR1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Option_AR1ActionPerformed
        if(Option_AR1.getSelectedItem()=="Role"){
            list_user_role_AR1.removeAllItems();
             thisController.connectiontoDB("getRole");
            ArrayList<String> arrList = new ArrayList<String>();
            arrList.addAll(thisController.arrList);
            list_user_role_AR1.addItem("--Please Select One--");
            for(int i = 0; i<arrList.size();i++){
                list_user_role_AR1.addItem(arrList.get(i));
            }
        }else if(Option_AR1.getSelectedItem()=="User"){
            list_user_role_AR1.removeAllItems();
             thisController.connectiontoDB("get_User");
             ArrayList<String> arrList = new ArrayList<String>();
             arrList.addAll(thisController.arrList);
             list_user_role_AR1.addItem("--Please Select One--");
             for(int i = 0; i<arrList.size();i++){
                list_user_role_AR1.addItem(arrList.get(i));
            }
        }
    }//GEN-LAST:event_Option_AR1ActionPerformed

    private void editScript_AP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editScript_AP1ActionPerformed
        list_user_role_AR1.setEnabled(false);
        Option_AR1.setEnabled(false);
        list_roleAR1.setEnabled(false);
        ScriptText_AR1.setEnabled(true);
        checkEdit_AR1=true;
        showScript_AP1.setEnabled(true);
    }//GEN-LAST:event_editScript_AP1ActionPerformed

    private void cancel_AP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_AP1ActionPerformed
      list_user_role_AR1.setEnabled(true);
        Option_AR1.setEnabled(true);
        list_roleAR1.setEnabled(true); 
       checkEdit_AR1=false;
       showScript_AP1.setEnabled(false);
       ScriptText_AR1.setEnabled(false);
       ScriptText_AR1.setText("");
    }//GEN-LAST:event_cancel_AP1ActionPerformed

    private void ok_AP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ok_AP1ActionPerformed
    if(checkEdit_AR1==false){    
         int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to revoke "
                            + (String) list_roleAR1.getSelectedItem()+ " From "
                +(String) list_user_role_AR1.getSelectedItem(),
                "Click Yes or No", JOptionPane.YES_NO_OPTION);
                   if(reply == JOptionPane.YES_OPTION){
               Boolean check = thisController.connectiontoDB("RevokeRole");
                if(check == true){
            JOptionPane.showMessageDialog(this, "Revoke succeeded!!");
            thisController.history(thisController.revokeRole());
        }else{
            JOptionPane.showMessageDialog(this, thisController.errorMsg,
                "Error",JOptionPane.ERROR_MESSAGE);
            }
                   }
    }else if(checkEdit_AR1==true){
        thisController.connectiontoDB("openConn");
        boolean success=false;
           try {              
                 int  reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to do this?",
                "Click Yes or No", JOptionPane.YES_NO_OPTION);
            
                   if(reply == JOptionPane.YES_OPTION){      
                   success=true;        
                   String script =  ScriptText_AR1.getText();
                   PreparedStatement st = connection.prepareStatement(script);
                   st.executeUpdate();
                   thisController.history(script);
                   }           
                   
        }catch (SQLException ex)
                {
                     success=false; 
                    JOptionPane.showMessageDialog(this,ex.getMessage());
               }
        if(success==true){
             JOptionPane.showMessageDialog(this, "Revoke Succeeded ");
             ScriptText_AR.setText("");
        }
         }
    }//GEN-LAST:event_ok_AP1ActionPerformed

    private void showScript_AP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showScript_AP1ActionPerformed
        showScriptRTP();
        showScript_AP1.setEnabled(true);
    }//GEN-LAST:event_showScript_AP1ActionPerformed

    private void showScript_APActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showScript_APActionPerformed
        showScript();
        saveScript_AR.setEnabled(true);
    }//GEN-LAST:event_showScript_APActionPerformed

    private void saveScript_SPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveScript_SPActionPerformed

        int val = 0;

        //set button name for fileChooser
        UIManager.put("FileChooser.openDialogTitleText", "Load Script File");
        UIManager.put("FileChooser.openButtonText", "Save Script");

        //Browse file from drive
        JFileChooser fileChooser = new JFileChooser();

        try {
            val = fileChooser.showOpenDialog(null);
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Error opening the file dialogue",
                null, JOptionPane.ERROR_MESSAGE);
        }

        //if file is approve to open start to save the script to that file
        if (val == JFileChooser.APPROVE_OPTION) {
            String saveScriptPath = fileChooser.getSelectedFile().getAbsolutePath();
            if(saveScriptPath.endsWith(".sql")){
                thisController.writeScrpitForSave(saveScriptPath,SciptText_SP.getText());
            }else{
                saveScriptPath = saveScriptPath+".sql";
                thisController.writeScrpitForSave(saveScriptPath,SciptText_SP.getText());
            }
            JOptionPane.showMessageDialog(null, "Script is Saved.");
        }
    }//GEN-LAST:event_saveScript_SPActionPerformed

    private void saveScript_SPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saveScript_SPKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            saveScript_SP.doClick();
        }
    }//GEN-LAST:event_saveScript_SPKeyPressed

    private void saveScript_ARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveScript_ARActionPerformed
        int val = 0;

        //set button name for fileChooser
        UIManager.put("FileChooser.openDialogTitleText", "Load Script File");
        UIManager.put("FileChooser.openButtonText", "Save Script");

        //Browse file from drive
        JFileChooser fileChooser = new JFileChooser();

        try {
            val = fileChooser.showOpenDialog(null);
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Error opening the file dialogue",
                null, JOptionPane.ERROR_MESSAGE);
        }

        //if file is approve to open start to save the script to that file
        if (val == JFileChooser.APPROVE_OPTION) {
            String saveScriptPath = fileChooser.getSelectedFile().getAbsolutePath();
            if(saveScriptPath.endsWith(".sql")){
                thisController.writeScrpitForSave(saveScriptPath,ScriptText_AR.getText());
            }else{
                saveScriptPath = saveScriptPath+".sql";
                thisController.writeScrpitForSave(saveScriptPath,ScriptText_AR.getText());
            }
            JOptionPane.showMessageDialog(null, "Script is Saved.");
        }
    }//GEN-LAST:event_saveScript_ARActionPerformed

    private void saveScript_SP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveScript_SP1ActionPerformed
               int val = 0;

        //set button name for fileChooser
        UIManager.put("FileChooser.openDialogTitleText", "Load Script File");
        UIManager.put("FileChooser.openButtonText", "Save Script");

        //Browse file from drive
        JFileChooser fileChooser = new JFileChooser();

        try {
            val = fileChooser.showOpenDialog(null);
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Error opening the file dialogue",
                null, JOptionPane.ERROR_MESSAGE);
        }

        //if file is approve to open start to save the script to that file
        if (val == JFileChooser.APPROVE_OPTION) {
            String saveScriptPath = fileChooser.getSelectedFile().getAbsolutePath();
            if(saveScriptPath.endsWith(".sql")){
                thisController.writeScrpitForSave(saveScriptPath,SciptText_SP1.getText());
            }else{
                saveScriptPath = saveScriptPath+".sql";
                thisController.writeScrpitForSave(saveScriptPath,SciptText_SP1.getText());
            }
            JOptionPane.showMessageDialog(null, "Script is Saved.");
        }
    }//GEN-LAST:event_saveScript_SP1ActionPerformed

    private void saveScript_AR1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveScript_AR1ActionPerformed
               int val = 0;

        //set button name for fileChooser
        UIManager.put("FileChooser.openDialogTitleText", "Load Script File");
        UIManager.put("FileChooser.openButtonText", "Save Script");

        //Browse file from drive
        JFileChooser fileChooser = new JFileChooser();

        try {
            val = fileChooser.showOpenDialog(null);
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Error opening the file dialogue",
                null, JOptionPane.ERROR_MESSAGE);
        }

        //if file is approve to open start to save the script to that file
        if (val == JFileChooser.APPROVE_OPTION) {
            String saveScriptPath = fileChooser.getSelectedFile().getAbsolutePath();
            if(saveScriptPath.endsWith(".sql")){
                thisController.writeScrpitForSave(saveScriptPath,ScriptText_AR1.getText());
            }else{
                saveScriptPath = saveScriptPath+".sql";
                thisController.writeScrpitForSave(saveScriptPath,ScriptText_AR1.getText());
            }
            JOptionPane.showMessageDialog(null, "Script is Saved.");
        }
    }//GEN-LAST:event_saveScript_AR1ActionPerformed

    private void deSelect_SPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deSelect_SPKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            deSelect_SP.doClick();
        }
    }//GEN-LAST:event_deSelect_SPKeyPressed

    private void show_SPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_show_SPKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            show_SP.doClick();
        }
    }//GEN-LAST:event_show_SPKeyPressed

    private void editScript_SPKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editScript_SPKeyReleased
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            editScript_SP.doClick();
        }
    }//GEN-LAST:event_editScript_SPKeyReleased

    private void ok_SPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ok_SPKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            ok_SP.doClick();
        }
    }//GEN-LAST:event_ok_SPKeyPressed

    private void selectAll_TPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_selectAll_TPKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            selectAll_TP.doClick();
        }
    }//GEN-LAST:event_selectAll_TPKeyPressed

    private void deselect_TPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deselect_TPKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            deselect_TP.doClick();
        }
    }//GEN-LAST:event_deselect_TPKeyPressed

    private void show_TPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_show_TPKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            show_TP.doClick();
        }
    }//GEN-LAST:event_show_TPKeyPressed

    private void editScript_TPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editScript_TPKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            editScript_TP.doClick();
        }
    }//GEN-LAST:event_editScript_TPKeyPressed

    private void saveScript_TPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saveScript_TPKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            saveScript_TP.doClick();
        }
    }//GEN-LAST:event_saveScript_TPKeyPressed

    private void ok_TPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ok_TPKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            ok_TP.doClick();
        }
    }//GEN-LAST:event_ok_TPKeyPressed

    private void cancel_TPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancel_TPKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            cancel_TP.doClick();
        }
    }//GEN-LAST:event_cancel_TPKeyPressed

    private void showScript_APKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_showScript_APKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            showScript_AP.doClick();
        }
    }//GEN-LAST:event_showScript_APKeyPressed

    private void editScript_APKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editScript_APKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            editScript_AP.doClick();
        }
    }//GEN-LAST:event_editScript_APKeyPressed

    private void saveScript_ARKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saveScript_ARKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            saveScript_AR.doClick();
        }
    }//GEN-LAST:event_saveScript_ARKeyPressed

    private void cancel_APKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancel_APKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            cancel_AP.doClick();
        }
    }//GEN-LAST:event_cancel_APKeyPressed

    private void ok_APKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ok_APKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            ok_AP.doClick();
        }
    }//GEN-LAST:event_ok_APKeyPressed

    private void show_SP1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_show_SP1KeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            show_SP1.doClick();
        }
    }//GEN-LAST:event_show_SP1KeyPressed

    private void editScript_SP1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editScript_SP1KeyPressed
          if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            editScript_SP1.doClick();
        }
    }//GEN-LAST:event_editScript_SP1KeyPressed

    private void saveScript_SP1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saveScript_SP1KeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            saveScript_SP1.doClick();
        }
    }//GEN-LAST:event_saveScript_SP1KeyPressed

    private void cancel_SP1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancel_SP1KeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            cancel_SP1.doClick();
        }
    }//GEN-LAST:event_cancel_SP1KeyPressed

    private void ok_RSPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ok_RSPKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            ok_RSP.doClick();
        }
    }//GEN-LAST:event_ok_RSPKeyPressed

    private void deselect_TP1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deselect_TP1KeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            deselect_TP.doClick();
        }
    }//GEN-LAST:event_deselect_TP1KeyPressed

    private void show_TP1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_show_TP1KeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            show_TP1.doClick();
        }
    }//GEN-LAST:event_show_TP1KeyPressed

    private void editScript_TP1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editScript_TP1KeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            editScript_TP1.doClick();
        }
    }//GEN-LAST:event_editScript_TP1KeyPressed

    private void saveScript_TP1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saveScript_TP1KeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            saveScript_TP1.doClick();
        }
    }//GEN-LAST:event_saveScript_TP1KeyPressed

    private void ok_TP1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ok_TP1KeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            ok_TP1.doClick();
        }
    }//GEN-LAST:event_ok_TP1KeyPressed

    private void cancel_TP1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancel_TP1KeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            cancel_TP1.doClick();
        }
    }//GEN-LAST:event_cancel_TP1KeyPressed

    private void showScript_AP1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_showScript_AP1KeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            showScript_AP1.doClick();
        }
    }//GEN-LAST:event_showScript_AP1KeyPressed

    private void editScript_AP1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editScript_AP1KeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            editScript_AP1.doClick();
        }
    }//GEN-LAST:event_editScript_AP1KeyPressed

    private void saveScript_AR1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saveScript_AR1KeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            saveScript_AR1.doClick();
        }
    }//GEN-LAST:event_saveScript_AR1KeyPressed

    private void cancel_AP1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancel_AP1KeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            cancel_AP1.doClick();
        }
    }//GEN-LAST:event_cancel_AP1KeyPressed

    private void ok_AP1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ok_AP1KeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            ok_AP1.doClick();
        }
    }//GEN-LAST:event_ok_AP1KeyPressed

    private void assignSystemPrivPaneAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_assignSystemPrivPaneAncestorAdded
        Cancel_SP.doClick();
    }//GEN-LAST:event_assignSystemPrivPaneAncestorAdded

    private void assignObjPrivPaneAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_assignObjPrivPaneAncestorAdded
        cancel_TP.doClick();
    }//GEN-LAST:event_assignObjPrivPaneAncestorAdded

    private void assignRoleAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_assignRoleAncestorAdded
        cancel_AP.doClick();
    }//GEN-LAST:event_assignRoleAncestorAdded

    private void revokeSRAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_revokeSRAncestorAdded
        cancel_SP1.doClick();
    }//GEN-LAST:event_revokeSRAncestorAdded

    private void revokeObjAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_revokeObjAncestorAdded
        cancel_TP1.doClick();
    }//GEN-LAST:event_revokeObjAncestorAdded

    private void revokeRoleAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_revokeRoleAncestorAdded
        cancel_AP1.doClick();
    }//GEN-LAST:event_revokeRoleAncestorAdded

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cancel_SP;
    private javax.swing.JButton DeSelect_SP1;
    private javax.swing.JComboBox Option_AR;
    private javax.swing.JComboBox Option_AR1;
    private javax.swing.JComboBox Option_SP;
    private javax.swing.JComboBox Option_SP1;
    private javax.swing.JComboBox Option_TP;
    private javax.swing.JComboBox Option_TP1;
    private javax.swing.JTextArea SciptText_SP;
    private javax.swing.JTextArea SciptText_SP1;
    private javax.swing.JTextArea ScriptText_AR;
    private javax.swing.JTextArea ScriptText_AR1;
    private javax.swing.JTextArea ScriptText_TP1;
    private javax.swing.JButton SelectAll_TP1;
    private javax.swing.JTable Table_SP;
    private javax.swing.JTable Table_SP1;
    private javax.swing.JTable Table_privileges;
    private javax.swing.JTable Table_privileges1;
    private javax.swing.JPanel assignObjPrivPane;
    private javax.swing.JPanel assignRole;
    private javax.swing.JPanel assignSystemPrivPane;
    private javax.swing.JButton cancel_AP;
    private javax.swing.JButton cancel_AP1;
    private javax.swing.JButton cancel_SP1;
    private javax.swing.JButton cancel_TP;
    private javax.swing.JButton cancel_TP1;
    private javax.swing.JButton deSelect_SP;
    private javax.swing.JButton deselect_TP;
    private javax.swing.JButton deselect_TP1;
    private javax.swing.JButton editScript_AP;
    private javax.swing.JButton editScript_AP1;
    private javax.swing.JButton editScript_SP;
    private javax.swing.JButton editScript_SP1;
    private javax.swing.JButton editScript_TP;
    private javax.swing.JButton editScript_TP1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    public static javax.swing.JComboBox list_roleAR;
    public static javax.swing.JComboBox list_roleAR1;
    private javax.swing.JComboBox list_table_TP;
    private javax.swing.JComboBox list_table_TP1;
    public static javax.swing.JComboBox list_user_role_AR;
    public static javax.swing.JComboBox list_user_role_AR1;
    private javax.swing.JButton ok_AP;
    private javax.swing.JButton ok_AP1;
    private javax.swing.JButton ok_RSP;
    private javax.swing.JButton ok_SP;
    private javax.swing.JButton ok_TP;
    private javax.swing.JButton ok_TP1;
    private javax.swing.JButton refresh;
    private javax.swing.JPanel revokeObj;
    private javax.swing.JPanel revokeRole;
    private javax.swing.JPanel revokeSR;
    private javax.swing.JLabel roleOrUserName;
    private javax.swing.JButton saveScript_AR;
    private javax.swing.JButton saveScript_AR1;
    private javax.swing.JButton saveScript_SP;
    private javax.swing.JButton saveScript_SP1;
    private javax.swing.JButton saveScript_TP;
    private javax.swing.JButton saveScript_TP1;
    private javax.swing.JTextArea scriptText_TP;
    private javax.swing.JButton selectAll_TP;
    private javax.swing.JButton showScript_AP;
    private javax.swing.JButton showScript_AP1;
    private javax.swing.JButton show_SP;
    private javax.swing.JButton show_SP1;
    private javax.swing.JButton show_TP;
    private javax.swing.JButton show_TP1;
    private javax.swing.JComboBox user_role_list_SP;
    private javax.swing.JComboBox user_role_list_SP1;
    private javax.swing.JComboBox user_role_list_TP;
    private javax.swing.JComboBox user_role_list_TP1;
    // End of variables declaration//GEN-END:variables


    public void retriveRoleNameFromDB(){

        thisController.connectiontoDB("getRole");
        
        //set the combo box with this array
        ArrayList<String> arrList = new ArrayList<String>();
        arrList.addAll(thisController.arrList);

        list_roleAR.removeAllItems();
         list_roleAR1.removeAllItems();
        
         list_roleAR.addItem("--Please Select One--");
         list_roleAR1.addItem("--Please Select One--");

        for(int i = 0; i<arrList.size();i++){
            list_roleAR.addItem(arrList.get(i));
              list_roleAR1.addItem(arrList.get(i));
     
           
        }
 
    }
 
 public void retrieveTblFromDB(){
     thisController.connectiontoDB("getTabName");
     ArrayList<String> arrList = new ArrayList<String>();
     arrList.addAll(thisController.arrList);
     list_table_TP.removeAllItems();
     list_table_TP1.removeAllItems();
     list_table_TP.addItem("--Please Select One--");
      list_table_TP1.addItem("--Please Select One--");

     for(int i=0; i<arrList.size();i++){
         list_table_TP.addItem(arrList.get(i));
         list_table_TP1.addItem(arrList.get(i));
     }    
 }
     public ImageIcon refreshIcon(int size) {
        ImageIcon icon = new ImageIcon(getClass().getResource("/Resources/Refresh.png"));
        Image img = icon.getImage() ;  
        Image newimg = img.getScaledInstance( size, size,  java.awt.Image.SCALE_SMOOTH ) ;  
        icon = new ImageIcon( newimg );
   
        return icon;    
    }
     
    public void callTable(){
        String script="";
        script = script.concat("Grant ");
        int i;
        for( i =0; i<Table_privileges.getRowCount();i++){
                    
                if(Table_privileges.getValueAt(i, 1)== true){
                    
                    script = script.concat(Table_privileges.getValueAt(i,0).toString()); 
                    
                     script = script.concat(" ,"); 
                if(Table_privileges.getSelectedRow()>1){
                      script = script.concat("\n"); 
                    }
                 }
                    
        }
  
                    int j = script.lastIndexOf(',');
                    if(script.equals("Grant ")){
                        //do nothing
                    }else{
                    script = script.substring(0,j);
                    }
    
          if(list_table_TP.getSelectedItem()!=""){
             script=script.concat("\n"+" On "+list_table_TP.getSelectedItem()
                            +"\n"+" To " );
              scriptText_TP.setText(script);
                            if(choice_TP!=1){
                            script = script.concat(user_role_list_TP.getSelectedItem().toString());
                            }else if (choice_TP==1){
                            script = script.concat("Public");
                            }
                  
                    scriptText_TP.setText(script);
                    }else{
                         JOptionPane.showMessageDialog(this,"Please Fill In All",
                          "Error",JOptionPane.ERROR_MESSAGE);
                    }
 
    }
    
    public void callSPTable(){
         String script="";
        script = script.concat("Grant ");
        int i;
        for( i =0; i<Table_SP.getRowCount();i++){
                    
                if(Table_SP.getValueAt(i, 1)== true){
                    if(Table_SP.getValueAt(i,0).toString()=="All Privileges"||
                            Table_SP.getValueAt(i,0).toString()=="Create Index" ||
                            Table_SP.getValueAt(i,0).toString()=="Create View"){
                        deSelect_SP.doClick();
                        Table_SP.setValueAt(true,i,1);
                 
                    }
                    script = script.concat(Table_SP.getValueAt(i,0).toString()); 
                                    
                     script = script.concat(" ,"); 
                    if(Table_SP.getSelectedRow()>1){
                      script = script.concat("\n"); 
                    }

                 }                   
        }
                    int j = script.lastIndexOf(',');
                    if(script.equals("Grant ")){
                        
                    }else{
                    script = script.substring(0,j);
                    }
                    SciptText_SP.setText(script);
 
        if(Option_SP.getSelectedItem()!="--Please Select One--"){
         script = script.concat("\n"+" To ");   
         
         if(choice_SP!=1){
         
         script = script.concat(user_role_list_SP.getSelectedItem().toString());
         }else if (choice_SP==1){
         script = script.concat("Public");
         }
                  
        SciptText_SP.setText(script);
         }else{
             JOptionPane.showMessageDialog(this,"Please Fill In First",
                          "Error",JOptionPane.ERROR_MESSAGE);
         }  
    }
    
    public void showScript(){
         ScriptText_AR.setText("Grant "+list_roleAR.getSelectedItem()+ "\n"+" To "
               +list_user_role_AR.getSelectedItem());
    }
    
    public void showScriptRTP(){
         ScriptText_AR1.setText("Revoke "+list_roleAR1.getSelectedItem()+ "\n"+" From "
               +list_user_role_AR1.getSelectedItem());
    }
   public void RevokeSPtable(){
         String script="";
        script = script.concat("Revoke ");
        int i;
        for( i =0; i<Table_SP1.getRowCount();i++){
                    
                if(Table_SP1.getValueAt(i, 1)== true){
                    if(Table_SP1.getValueAt(i,0).toString()=="All Privileges"||
                            Table_SP1.getValueAt(i,0).toString()=="Create Index" ||
                            Table_SP1.getValueAt(i,0).toString()=="Create View"){
                        DeSelect_SP1.doClick();
                        Table_SP1.setValueAt(true,i,1);
                 
                    }

                    script = script.concat(Table_SP1.getValueAt(i,0).toString()); 
                    
                     script = script.concat(" ,"); 
                    if(Table_SP1.getSelectedRow()>1){
                      script = script.concat("\n"); 
                    }        
                 }                   
        }
                    if(script.equals("Revoke ")){
                        //donothing
                    }else{
                        int j = script.lastIndexOf(',');
                        script = script.substring(0,j);                        
                    }
                    //SciptText_SP1.setText(script);
      
        if(Option_SP1.getSelectedItem()!="--Please Select One--"){
         script = script.concat("\n From ");       
         
         script = script.concat(user_role_list_SP1.getSelectedItem().toString());
                
        SciptText_SP1.setText(script);
         }else{
             JOptionPane.showMessageDialog(this,"Please Fill In First",
                          "Error",JOptionPane.ERROR_MESSAGE);
         }  
    }
   
  public void RevokeTPtable(){
  String script="";
        script = script.concat("Revoke ");
        int i;
        for( i =0; i<Table_privileges1.getRowCount();i++){
                    
                if(Table_privileges1.getValueAt(i, 1)== true){
                    
                    script = script.concat(Table_privileges1.getValueAt(i,0).toString()); 
                    
                     script = script.concat(" ,");  
                        if(Table_privileges1.getSelectedRow()>1){
                      script = script.concat("\n"); 
                    }   
                 }                    
        }
        if(script.equals("Revoke ")){
            //do nothing
        }else{
            int j = script.lastIndexOf(',');
            script = script.substring(0,j);
        }
          if(list_table_TP1.getSelectedItem()!=""){
             script=script.concat("\n"+" On "+list_table_TP1.getSelectedItem()
                            +"\n"+" From " );
              ScriptText_TP1.setText(script);
              
              script = script.concat(user_role_list_TP1.getSelectedItem().toString());
                   
                    ScriptText_TP1.setText(script);
                    }else{
                         JOptionPane.showMessageDialog(this,"Please Fill In All",
                          "Error",JOptionPane.ERROR_MESSAGE);
                    }
}
}