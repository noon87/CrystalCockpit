/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Controller.Controller;
import static Controller.Controller.connection;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author Ben
 */
public class CreateTable extends javax.swing.JPanel {
    //If user click on show script it will be true
    Boolean scriptChecked = false;
    Object[][] data = null;
    String[] columnName = new String[5];
    static int i=0;
    boolean f = false;

    /**
     * Creates new form CreateTable
     */
    
    public Controller thisController = new Controller();
   
    public CreateTable() {
        if(i==1){
            initComponents();
            AutoCompleteDecorator.decorate(fkname);
            AutoCompleteDecorator.decorate(pkName);
            constrains = null;
            fkname.setVisible(false);
            pkName.setVisible(false);
            jLabel8.setVisible(false);
            constraint_text.setVisible(false);
            link.setVisible(false);
            edit.setVisible(false);
            size.setEnabled(false);
            scriptText.setEnabled(false);
            save.setVisible(false);
            saveScript.setEnabled(false);
            constraint_text.setDisabledTextColor(Color.BLACK);
            scriptText.setDisabledTextColor(Color.BLACK);
        }
    }
    
    
        public void retriveData_TableName(){

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        ok = new javax.swing.JButton();
        tableName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        tbsList = new javax.swing.JComboBox();
        cancel = new javax.swing.JButton();
        addRow = new javax.swing.JButton();
        deleteSelectedRow = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        tbSizeOpt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        colName = new javax.swing.JTextField();
        keyType = new javax.swing.JComboBox();
        showScript = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        size = new javax.swing.JTextField();
        dataType = new javax.swing.JComboBox();
        editScript = new javax.swing.JButton();
        fkname = new javax.swing.JComboBox();
        pkName = new javax.swing.JComboBox();
        link = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        constraint_text = new javax.swing.JTextArea();
        edit = new javax.swing.JButton();
        save = new javax.swing.JButton();
        update = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        scriptText = new javax.swing.JTextArea();
        saveScript = new javax.swing.JButton();

        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel2.setText("New Table Name: ");

        ok.setText("Create");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });
        ok.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                okKeyPressed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Column Name", "Type", "Key", "Not Null"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        jLabel4.setText("Tablespace:");

        tbsList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));

        cancel.setText("Cancel");
        cancel.setMaximumSize(new java.awt.Dimension(800, 700));
        cancel.setMinimumSize(new java.awt.Dimension(200, 200));
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });
        cancel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancelKeyPressed(evt);
            }
        });

        addRow.setText("Add row");
        addRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRowActionPerformed(evt);
            }
        });
        addRow.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addRowKeyPressed(evt);
            }
        });

        deleteSelectedRow.setText("Delete selected row");
        deleteSelectedRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSelectedRowActionPerformed(evt);
            }
        });
        deleteSelectedRow.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deleteSelectedRowKeyPressed(evt);
            }
        });

        jLabel5.setText("Size of Table (opt)");

        jLabel1.setText("Column Name");

        jLabel6.setText("Data Type");

        jLabel9.setText("Key Type (opt)");

        keyType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Default", "PRIMARY KEY", "FOREIGN KEY", "NOT NULL", "CHECK" }));
        keyType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyTypeActionPerformed(evt);
            }
        });

        showScript.setText("Show Script");
        showScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showScriptActionPerformed(evt);
            }
        });
        showScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                showScriptKeyPressed(evt);
            }
        });

        jLabel3.setText("Size");

        dataType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--", "OTHERS", "VARCHAR2", "NUMBER", "BLOB", "CLOB", "DATA", "DATE" }));
        dataType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataTypeActionPerformed(evt);
            }
        });

        editScript.setText("Edit");
        editScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editScriptActionPerformed(evt);
            }
        });
        editScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                editScriptKeyPressed(evt);
            }
        });

        fkname.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One-" }));
        fkname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fknameActionPerformed(evt);
            }
        });

        pkName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));

        link.setText("Link");
        link.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkActionPerformed(evt);
            }
        });
        link.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                linkKeyPressed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("List of Primary Keys");

        constraint_text.setColumns(20);
        constraint_text.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        constraint_text.setRows(5);
        constraint_text.setEnabled(false);
        jScrollPane4.setViewportView(constraint_text);

        edit.setText("Edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });
        edit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                editKeyPressed(evt);
            }
        });

        save.setText("save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        save.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saveKeyPressed(evt);
            }
        });

        update.setIcon(thisController.refreshIcon(15));
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        update.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                updateKeyPressed(evt);
            }
        });

        scriptText.setColumns(20);
        scriptText.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        scriptText.setRows(5);
        jScrollPane2.setViewportView(scriptText);

        saveScript.setText("Save Script");
        saveScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveScriptActionPerformed(evt);
            }
        });
        saveScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saveScriptKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dataType, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(colName)
                            .addComponent(tbSizeOpt)
                            .addComponent(tableName)
                            .addComponent(addRow, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(size, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(30, 30, 30)
                                    .addComponent(tbsList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel9)
                                    .addGap(18, 18, 18)
                                    .addComponent(keyType, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(deleteSelectedRow))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(link)
                            .addComponent(fkname, 0, 163, Short.MAX_VALUE)
                            .addComponent(pkName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(saveScript, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(showScript, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                            .addComponent(editScript, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(save))
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ok, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(77, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tableName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(tbsList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tbSizeOpt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(colName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(keyType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fkname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel1))
                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel3)
                    .addComponent(size, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pkName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(link)
                    .addComponent(deleteSelectedRow)
                    .addComponent(addRow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(ok)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(showScript))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(edit)
                            .addComponent(save))
                        .addGap(29, 29, 29)
                        .addComponent(editScript)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveScript)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        tbsList.getAccessibleContext().setAccessibleName("tablespace");
        colName.getAccessibleContext().setAccessibleName("name");
        keyType.getAccessibleContext().setAccessibleName("key");
    }// </editor-fold>//GEN-END:initComponents

    private void showScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showScriptActionPerformed
       
            thisController.connectiontoDB("openConn");  
            saveScript.setEnabled(true);
            scriptChecked = true;
            script = "";
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            script = "CREATE TABLE " + tableName.getText() + "  ( "  ;
            try{
                String checkNull;
                for(int i= 0; i< table.getRowCount() ; i++)
                {
                    if(model.getValueAt(i, 2).equals("Default"))
                    {
                        model.setValueAt("", i, 2);
                    }
                    else if(model.getValueAt(i, 2).equals("FOREIGN KEY"))
                    {
                        model.setValueAt("", i, 2);
                    }else if (model.getValueAt(i, 2).equals("CHECK")){
                        model.setValueAt("", i, 2);
                    }
                    if(model.getValueAt(i, 3) == true)
                    {
                        checkNull = "NOT NULL"; 
                    }
                    else{checkNull = "NULL";}

                    script = script.concat( model.getValueAt(i, 0) +" " + model.getValueAt(i, 1) +
                            " "+checkNull +"  "+ model.getValueAt(i, 2) +", \n");
                }

                
                if(constrains!= null)
                {
                    script = script.concat(constrains);
                }
                else
                {
                    script = script.substring(0,script.lastIndexOf(",") );
                }
                

                script = script.concat("\n ) TABLESPACE " + tbsList.getSelectedItem());
                if(! tbSizeOpt.getText().equals(""))
                {
                    script = script.concat("\n STORAGE "  + "( INITIAL  "+ tbSizeOpt.getText()+ " )" );
                }
                
            }catch(ArrayIndexOutOfBoundsException ex){

                JOptionPane.showMessageDialog(this, "\n Numbre of the row is not correct "
                        +ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            catch(StringIndexOutOfBoundsException ex){

                JOptionPane.showMessageDialog(this, "\n Numbre of the row is not correct "
                        +ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }      
             try {
                connection.close();
            } catch (SQLException ex1) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
            }
            scriptText.setText(script);        
    }//GEN-LAST:event_showScriptActionPerformed

    private void deleteSelectedRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSelectedRowActionPerformed
    
        try{
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            int  row_delete = table.getSelectedRow();
            model.removeRow(row_delete);
        }catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this, "You need to select appropriate row"+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

        }
    
    }//GEN-LAST:event_deleteSelectedRowActionPerformed

    private void addRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRowActionPerformed
        String type = null;
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        if(dataType.getSelectedIndex()==1)
        {
            type = "Enter Type";
        }
        else if(dataType.getSelectedIndex()==3 || dataType.getSelectedIndex()==2)
        {
            type = dataType.getSelectedItem().toString();
            type = type.concat("(" + size.getText() + ")");
        }
        else
        {
            type = dataType.getSelectedItem().toString();
        }
        
        model.addRow(new Object[]{colName.getText(), type,keyType.getSelectedItem().toString(),true});
        
        colName.setText("");
        size.setText("");
    }//GEN-LAST:event_addRowActionPerformed

    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        boolean ch  = true;
        thisController.connectiontoDB("openConn");
        if(scriptChecked == false){
        int checkSure = JOptionPane.showConfirmDialog(null,
        "Are you sure you want to create the table?", "Notice", JOptionPane.YES_NO_OPTION);
        if(checkSure==0){ 

                script = "";
                DefaultTableModel model = (DefaultTableModel) table.getModel();

                script = "CREATE TABLE " + tableName.getText() + "  ( "  ;

                try{
                    String checkNull;
                    for(int i= 0; i< table.getRowCount() ; i++)
                    {
                        if(model.getValueAt(i, 2).equals("Default"))
                        {
                            model.setValueAt("", i, 2);
                        }
                        else if(model.getValueAt(i, 2).equals("FOREIGN KEY"))
                        {
                            model.setValueAt("", i, 2);
                        }else if(model.getValueAt(i, 2).equals("CHECK")){
                            model.setValueAt("",i,2);
                        }
                        if(model.getValueAt(i, 3) == true){
                            checkNull = "NOT NULL";
                        }
                        else{checkNull = "NULL";}
                        script = script.concat( model.getValueAt(i, 0) +" " + 
                                model.getValueAt(i, 1) + " "+checkNull +"  "+
                                model.getValueAt(i, 2) +", \n");
                    }
                if(constrains!= null)
                {
                    script = script.concat(constraint_text.getText());
                }
                else
                {
                    script = script.substring(0,script.lastIndexOf(",") );
                }
                
                    script = script.concat(" ) TABLESPACE " + tbsList.getSelectedItem());
                    if(! tbSizeOpt.getText().equals(""))
                    {
                        script = script.concat(" STORAGE  "  + "( INITIAL "+ tbSizeOpt.getText()+ " )" );
                    }
                    
                try {
                    PreparedStatement st = connection.prepareStatement(script);
                    st.executeUpdate();
                    thisController.history(script);

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    ch = false;
                }
                           
                if(ch == true){
                    model.setRowCount(0);
                    JOptionPane.showMessageDialog(this," Table created");
                    script = "";
                    constraint_text.setText("");
                }

                }catch(ArrayIndexOutOfBoundsException ex){

                    JOptionPane.showMessageDialog(this, "Numbre of the row is not correct "+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
                catch(StringIndexOutOfBoundsException ex){

                    JOptionPane.showMessageDialog(this, "Numbre of the row is not correct "+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
                script = "";
                tableName.setText("");
                tbSizeOpt.setText("");
                colName.setText("");
                scriptText.setText("");
                f = false;
                tableName.setEnabled(true);
                tbSizeOpt.setEnabled(true);
                colName.setEnabled(true);
                size.setEnabled(true);
                constrains = null;
                
            }
        }
        else{
            int checkSure = JOptionPane.showConfirmDialog(null,
            "Are you sure you want to create the table?", "Notice", JOptionPane.YES_NO_OPTION);
            if(checkSure==0){ 


                script = scriptText.getText();

                try {
                    PreparedStatement st = connection.prepareStatement(script);
                    st.executeUpdate();
                    thisController.history(script);

                }
                catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    ch = false;
                }
                if(ch == true){
                    DefaultTableModel model = (DefaultTableModel) table.getModel();
                    model.setRowCount(0);
                    JOptionPane.showMessageDialog(this," Table created");
                    script = "";
                    constraint_text.setText("");
                }
                script = "";
                tableName.setText("");
                tbSizeOpt.setText("");
                colName.setText("");
                scriptText.setText("");
                tableName.setEnabled(true);
                tbSizeOpt.setEnabled(true);
                colName.setEnabled(true);
                size.setEnabled(true);
                
            }
        }
        try {
           connection.close();
        } catch (SQLException ex1) {
           Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
        }     
    }//GEN-LAST:event_okActionPerformed

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        
            ArrayList<String> arr2 = new ArrayList<String>();
            arr2 = getTableNames();
            fkname.removeAllItems();
            fkname.addItem("--Please Select One--");
            for(int i = 0; i<arr2.size();i++){
                fkname.addItem(arr2.get(i));
            }
            
            thisController.connectiontoDB("openConn");
            ArrayList<String> arr = new ArrayList<String>();
            try
            {    
                
                Statement stmt = connection.createStatement();
                ResultSet rs = stmt.executeQuery ("select tablespace_name from user_tablespaces");
                while(rs.next()){
                    arr.add(rs.getString(1));
            }
            } catch (SQLException ex) 
            {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }  
            tbsList.removeAllItems();
            tbsList.addItem("--Please Select One--");
            for(int i = 0; i<arr.size();i++)
            {     
                tbsList.addItem(arr.get(i)); 
            }    
                        
                         try {
                connection.close();
            } catch (SQLException ex1) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
            }     
         DefaultTableModel model = (DefaultTableModel) table.getModel();  
         model.setRowCount(0);      
    }//GEN-LAST:event_formAncestorAdded

    private void dataTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataTypeActionPerformed
        if(dataType.getSelectedItem().equals("OTHERS"))
        {
            size.setEnabled(false);
        }
        else
        {
            size.setEnabled(true);
        }
    }//GEN-LAST:event_dataTypeActionPerformed

    private void editScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editScriptActionPerformed

        tableName.setEnabled(false);
        tbSizeOpt.setEnabled(false);
        colName.setEnabled(false);
        size.setEnabled(false);   
        scriptText.setEnabled(true);
        saveScript.setEnabled(true);
    }//GEN-LAST:event_editScriptActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed

        scriptChecked = false;
        constrains = null;
        script = "";
        tableName.setText("");
        tbSizeOpt.setText("");
        colName.setText("");
        scriptText.setText("");
        tableName.setEnabled(true);
        tbSizeOpt.setEnabled(true);
        colName.setEnabled(true);
        size.setEnabled(true);
        scriptChecked = false;
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
        saveScript.setEnabled(false);
        dataType.setSelectedIndex(0);
        tbsList.setSelectedIndex(0);
        keyType.setSelectedIndex(0);
        size.setText("");
        
    }//GEN-LAST:event_cancelActionPerformed

    private void keyTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyTypeActionPerformed
        if(keyType.getSelectedItem().equals("FOREIGN KEY"))
        {
            update.doClick();
            f = true;
            link.setVisible(true);
            fkname.setVisible(true);
            pkName.setVisible(true);
            jLabel8.setVisible(true);
            constraint_text.setVisible(true);
            edit.setVisible(true);
            save.setVisible(true);
            update.setVisible(true);
            fkname.setSelectedIndex(0);
            pkName.setSelectedIndex(0);
            constraint_text.setText("");
          
        }else if(keyType.getSelectedItem().equals("CHECK")){
            constraint_text.setVisible(true);
            constraint_text.setText("");
            constraint_text.setEnabled(true);
            save.setVisible(true);
            edit.setVisible(true);
            link.setVisible(true);
        
        }
        else
        {
            save.setVisible(false);
            edit.setVisible(false);
            link.setVisible(false);
            fkname.setVisible(false);
            pkName.setVisible(false);
            jLabel8.setVisible(false);
            constraint_text.setVisible(false);
            update.setVisible(false);
        }
    }//GEN-LAST:event_keyTypeActionPerformed
    
    //Return name of the database by Ben
    public  String getDBName(){
        
        
        thisController.connectiontoDB("openConn");
        String dbNameTmp = null;
        String script = "SELECT sys_context('userenv','instance_name') from dual"; 
        try {
            Statement stmQuery = connection.createStatement();      
            ResultSet rsQuery = stmQuery.executeQuery (script);
            rsQuery.next();
            dbNameTmp = rsQuery.getString(1);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "\n Problem with database name "+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        try {
              connection.close();
        } catch (SQLException ex1) {
           Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
        }
        return dbNameTmp;
    }
    
    //Return name of the all the tables and views user can access by Ben
        public  ArrayList<String> getTableNames(){
            ArrayList<String> Table_List = new ArrayList<String>();
            thisController.connectiontoDB("openConn");
       
        try {
            
            String script = "SELECT VIEW_NAME from USER_VIEWS";
            String script2 = "SELECT table_name from user_tables";

            Statement stmQuery = connection.createStatement();
            ResultSet rsQuery = stmQuery.executeQuery (script);
            
            while(rsQuery.next())
            {
                
                Table_List.add( rsQuery.getString(1));;
                
            }  
            
            Statement stmQuery2 = connection.createStatement();
            ResultSet rsQuery2 = stmQuery2.executeQuery (script2);
            while(rsQuery2.next())
            {
                Table_List.add( rsQuery2.getString(1));;
            }  
        } catch (SQLException ex) {
            Logger.getLogger(Controller.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
              connection.close();
        } catch (SQLException ex1) {
           Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
        }
        return Table_List;
    }

        //Return name of all the columns in the table in arguments by Ben
        public  String[] getTableColumnNames(String tableName){
                    
            thisController.connectiontoDB("openConn");
        
           int sizeTable;
           String[] Table_List = null;
           try {
            
            String script = "select count(*)  from user_tab_cols  where table_name = '"+ tableName +"'";            
            String script2 = ""
                    + "SELECT COLUMN_NAME "
                    + " FROM USER_TAB_COLS "
                    + " WHERE TABLE_NAME = '"+ tableName +"'"; 
                   
            
             Statement stmQuery = connection.createStatement();
             ResultSet rsQuery = stmQuery.executeQuery (script);
             rsQuery.next();
             sizeTable = rsQuery.getInt(1);
             
            int i=0;
            Table_List = new String[sizeTable];
            Statement stmQuery2 = connection.createStatement();
            ResultSet rsQuery2 = stmQuery2.executeQuery (script2);
            while(rsQuery2.next())
            {
                
                Table_List[i] = rsQuery2.getString(1);
                
                i++;
            }  
        } catch (SQLException ex) {
            Logger.getLogger(Controller.class.getName()).log(Level.SEVERE, null, ex);
        }
           
         
        try {
              connection.close();
        } catch (SQLException ex1) {
           Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
        }
           
        return Table_List;
     }    
    
        
        
    private void linkKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_linkKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            link.doClick();
        }
    }//GEN-LAST:event_linkKeyPressed

    private void addRowKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addRowKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            addRow.doClick();
        }
    }//GEN-LAST:event_addRowKeyPressed

    private void deleteSelectedRowKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deleteSelectedRowKeyPressed
           if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            deleteSelectedRow.doClick();
        }
    }//GEN-LAST:event_deleteSelectedRowKeyPressed

    private void showScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_showScriptKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            showScript.doClick();
        }
    }//GEN-LAST:event_showScriptKeyPressed

    private void editScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editScriptKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            editScript.doClick();
        }
    }//GEN-LAST:event_editScriptKeyPressed

    private void okKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_okKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            ok.doClick();
        }
    }//GEN-LAST:event_okKeyPressed

    private void cancelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancelKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            cancel.doClick();
        }
    }//GEN-LAST:event_cancelKeyPressed

    private void linkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkActionPerformed
        constraint_text.setEditable(false);
        if(keyType.getSelectedItem().equals("FOREIGN KEY"))
        {
            constrains = "";
            String consName = colName.getText().concat("_FK");
            constrains = "CONSTRAINT" + " " + consName + " \nFOREIGN KEY ( " +  colName.getText() 
                    + ") \n REFERENCES  " +  fkname.getSelectedItem().toString() + " (" 
                    + pkName.getSelectedItem().toString() + " )" ;
            constraint_text.setText(constrains);
        }else if (keyType.getSelectedItem().equals("FOREIGN KEY")){
            constrains = "";
            String consName = colName.getText().concat("_CK");
            constrains ="CONSTRAINT " + consName +"\nCHECK ("+
                    "write condition )";
            constraint_text.setText(constrains);
        }
    }//GEN-LAST:event_linkActionPerformed

    private void fknameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fknameActionPerformed

        if(f)
        {
            try {
                    thisController.connectiontoDB("openConn");
                    
                    String scriptPKey =
                                "select ucc.column_name"
                               + " from "
                               + " user_constraints uc "
                               + ", user_cons_columns ucc "
                               + " where "
                               + " uc.table_name = ucc.table_name "
                               + " and "
                               + " uc.constraint_name = ucc.constraint_name "
                               + " and "
                               + " uc.constraint_type = 'C' "
                               + " and "
                               + " uc.table_name = '" +  (String) fkname.getSelectedItem() + "'"
                               + " order by "
                               + " uc.table_name"
                               + ", uc.constraint_name"
                               + ", ucc.position ";

                        ArrayList<String> pKey = new ArrayList<String>();
                        Statement stmQuery = connection.createStatement();
                        ResultSet rsQuery = stmQuery.executeQuery (scriptPKey);

                        while(rsQuery.next())
                        {             
                            pKey.add( rsQuery.getString(1));
                        }
                        pkName.removeAllItems();
                        pkName.addItem("--Please Select One--");
                        for(int i=0;i<pKey.size();i++)
                        {
                            pkName.addItem(pKey.get(i));

                        }
                } catch (SQLException ex) {
                    Logger.getLogger(Controller.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                        connection.close();
                    } catch (SQLException ex1) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
                    }

        }
    }//GEN-LAST:event_fknameActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed

        constraint_text.setEditable(true);
        constraint_text.setEnabled(true);
    }//GEN-LAST:event_editActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed

        constrains = constraint_text.getText();
    }//GEN-LAST:event_saveActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed

        
        ArrayList<String> arr = new ArrayList<String>();
        arr = getTableNames();

        fkname.removeAllItems();
        fkname.addItem("--Please Select One");
        for(int i=0;i<arr.size();i++)
        {
            fkname.addItem(arr.get(i));
        }

    }//GEN-LAST:event_updateActionPerformed

    private void updateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_updateKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            update.doClick();
        }
    }//GEN-LAST:event_updateKeyPressed

    private void saveScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveScriptActionPerformed

        int val = 0;

        //set button name for fileChooser
        UIManager.put("FileChooser.openDialogTitleText", "Load Script File");
        UIManager.put("FileChooser.openButtonText", "Save Script");

        //Browse file from drive
        JFileChooser fileChooser = new JFileChooser();

        try {
            val = fileChooser.showOpenDialog(null);
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Error opening the file dialogue",
                null, JOptionPane.ERROR_MESSAGE);
        }

        //if file is approve to open start to save the script to that file
        if (val == JFileChooser.APPROVE_OPTION) {
            String saveScriptPath = fileChooser.getSelectedFile().getAbsolutePath();
            if(saveScriptPath.endsWith(".sql")){
                thisController.writeScrpitForSave(saveScriptPath,scriptText.getText());
            }else{
                saveScriptPath = saveScriptPath+".sql";
                thisController.writeScrpitForSave(saveScriptPath,scriptText.getText());
            }
            JOptionPane.showMessageDialog(null, "Script is Saved.");
        }
    }//GEN-LAST:event_saveScriptActionPerformed

    private void saveScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saveScriptKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            saveScript.doClick();
        }
    }//GEN-LAST:event_saveScriptKeyPressed

    private void editKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            edit.doClick();
        }
    }//GEN-LAST:event_editKeyPressed

    private void saveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saveKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            save.doClick();
        }
    }//GEN-LAST:event_saveKeyPressed

    private  String constrains;
    private  String script;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRow;
    private javax.swing.JButton cancel;
    private javax.swing.JTextField colName;
    private javax.swing.JTextArea constraint_text;
    private javax.swing.JComboBox dataType;
    private javax.swing.JButton deleteSelectedRow;
    private javax.swing.JButton edit;
    private javax.swing.JButton editScript;
    private javax.swing.JComboBox fkname;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JComboBox keyType;
    private javax.swing.JButton link;
    private javax.swing.JButton ok;
    private javax.swing.JComboBox pkName;
    private javax.swing.JButton save;
    private javax.swing.JButton saveScript;
    private javax.swing.JTextArea scriptText;
    private javax.swing.JButton showScript;
    private javax.swing.JTextField size;
    private javax.swing.JTable table;
    private javax.swing.JTextField tableName;
    private javax.swing.JTextField tbSizeOpt;
    private javax.swing.JComboBox tbsList;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
