/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Controller.*;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import static Controller.Controller.connection;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;



/**
 *
 * @author Nan
 * @Write Program by Nan and Andre
 * 
 * Create User Description
 * ========================
 * This function allow user to create new table into the current database.
 * This function checking 
 *  -"Password” and “Confirm Password” are same or not. I not same show dialog 
 *  box to user make sure let them to key in same password for both. 
 *  -Make sure user fill up all necessary information before process to 
 *  execute script. If information is not enough to execute script show 
 *  dialog box to user interface let user to fill up necessary information.
 *   -Password is hiding when user click on “Show Script” or “Edit Script”.
 *   -Show password level that is low or high.
 * Allow user to see script by pressing “Show Script” and also let user to 
 * change script by click on “Edit Script”.
 * At the same time, allow user to save current script into drive/temp drive. 
 * So that user can take that script to anywhere.
 * 
 * How Function work
 * =================
 * When Frame open, load all data from Database.
 * 
 * When user click on "Show Script" set the choose=2 and call actions() to
 * connect Controller's functions to execute statement.
 * 
 * When user click on "Edit Script" text area will enabled and allow user to
 * change current script. Than set choice=3 and call actions() to connect
 * Controller's functions to execute statement.
 * 
 * When user click on "Save Script", system show dialog box and allow user to
 * choose file to save script. And get directory from user choose one and set
 * into writeScrpitForSave(directory,script) to write the script into the file.
 * 
 * When user click on "OK", system start to run script. If script no error proceed
 * and if script is error show error message on user interface.
 * 
 * When user click "Cancel", system clean the GUI.
 * 
 * When user click "re-flash icon 'image'", system will load existing data on
 * pane.
 * 
 */
public class CreatUser extends javax.swing.JPanel {

    /**
     * Creates new form CreatUser
     */
    public CreatUser() {
        initComponents();
        AutoCompleteDecorator.decorate(defaultTbsList);
        saveScript.setEnabled(false);
        editScript.setEnabled(false);
        scriptText.setDisabledTextColor(Color.BLACK);
    }
    public int choice;
    public Controller thisController = new Controller();  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ok = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        pass2 = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        pass1 = new javax.swing.JPasswordField();
        jLabel4 = new javax.swing.JLabel();
        defaultTbsList = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cancel = new javax.swing.JButton();
        showScript = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        scriptText = new javax.swing.JTextArea();
        quotaOnDefTbs = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        editScript = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        update = new javax.swing.JButton();
        UIManager.put("ProgressBar.selectionBackground",Color.BLACK);
        UIManager.put("ProgressBar.selectionForeground",Color.BLACK);
        jProgressBar1 = new javax.swing.JProgressBar();
        saveScript = new javax.swing.JButton();

        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formActions(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel1.setText("Password:");

        ok.setText("Create");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });
        ok.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                okKeyPressed(evt);
            }
        });

        jLabel2.setText("Username:");

        jLabel3.setText("Confirm Password:");

        pass1.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                pass1CaretUpdate(evt);
            }
        });

        jLabel4.setText("Default Tablespace:");

        defaultTbsList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));

        jLabel5.setText("Quota on Default Tablespace:");

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });
        cancel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancelKeyPressed(evt);
            }
        });

        showScript.setText("Show Script");
        showScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showScriptActionPerformed(evt);
            }
        });
        showScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                showScriptKeyPressed(evt);
            }
        });

        scriptText.setColumns(20);
        scriptText.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        scriptText.setRows(5);
        scriptText.setWrapStyleWord(true);
        scriptText.setEnabled(false);
        jScrollPane1.setViewportView(scriptText);

        jLabel8.setText("Note: To set Priviligele please go to 'User Control' > 'Assign Role To User' ");

        editScript.setText("Edit Script");
        editScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editScriptActionPerformed(evt);
            }
        });
        editScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                editScriptKeyPressed(evt);
            }
        });

        jLabel7.setText("M");

        update.setIcon(thisController.refreshIcon(15));
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        update.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                updateKeyPressed(evt);
            }
        });

        jProgressBar1.setMaximum(4);
        jProgressBar1.setToolTipText("");
        jProgressBar1.setString("");
        jProgressBar1.setStringPainted(true);

        saveScript.setText("Save Script");
        saveScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveScriptActionPerformed(evt);
            }
        });
        saveScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saveScriptKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addComponent(cancel)
                        .addGap(18, 18, 18)
                        .addComponent(ok))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(pass2)
                                .addComponent(pass1)
                                .addComponent(username, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(defaultTbsList, javax.swing.GroupLayout.Alignment.LEADING, 0, 161, Short.MAX_VALUE))
                            .addComponent(quotaOnDefTbs, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel8)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(showScript, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                                .addComponent(editScript, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(saveScript, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(pass1)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(pass2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(defaultTbsList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(quotaOnDefTbs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(showScript, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editScript)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveScript)))
                .addGap(8, 8, 8)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancel)
                    .addComponent(ok, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        showScript.getAccessibleContext().setAccessibleName("Show Script \nto \nMake Additional Changes");
        showScript.getAccessibleContext().setAccessibleDescription("");
    }// </editor-fold>//GEN-END:initComponents

    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
 
        if(defaultTbsList.getSelectedIndex()!=0 
                && quotaOnDefTbs.getText().length()!=0)//Make sure user key in necessary information
        {
            //set the message for different type of password
            String message ="Are you sure you would like to create "
                    +(String) username.getText()+"user with weak password?";
            if(jProgressBar1.getString()=="Strong"){
                message = "Are you sure you would like to create "
                    +(String) username.getText()+" user?";
            }else if(jProgressBar1.getString().length()!= 0){
                message ="Are you sure you would like to create "
                    +(String) username.getText()+"user with "+
                        jProgressBar1.getString()+" password?";
            }

            //make sure user want to create user or not
            int reply = JOptionPane.showConfirmDialog(null, message, 
                    "Click Yes or No", JOptionPane.YES_NO_OPTION);

            if(reply == JOptionPane.YES_OPTION){
                if(pass1.getText().equals(pass2.getText())
                        && username.getText().length()!= 0
                        &&pass1.getText().length()!=0){//cehcking for null
                    if(choice==3){//User Clicked on Edit Script
                        enableAll(false);
                        String name = "";
                        String script = scriptText.getText();
                        name = script.substring(12);
                        
                        //hide the password
                        script = script.substring(0, script.indexOf("********")) + pass1.getText() +
                        script.substring(script.indexOf("********")+8);

                        //Get new user name
                        int spaceIndex = name.indexOf(" ");
                        
                        if (spaceIndex != -1)
                        {
                            name = name.substring(0, spaceIndex);
                        }

                        //set inot script to run 
                        thisController.script = script;
                        
                        //insert script and run the script
                        Boolean check = thisController.connectiontoDB("script");

                        if(check == true){//script is true and created new user
                            thisController.history(thisController.script);

                            //grant for history
                            thisController.connectiontoDB("openConn");
                            
                            String grant = "GRANT SELECT ANY TABLE,INSERT ANY TABLE,SELECT"
                            + " ANY SEQUENCE TO "+ name;     
                            
                            try{
                                Statement stmQuery = connection.createStatement();
                                stmQuery.executeQuery(grant);
                            }catch(SQLException ex){
                                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            try {
                                connection.close();
                            } catch (SQLException ex) {
                                Logger.getLogger(CreatUser.class.getName()).log(Level.SEVERE, null, ex);
                            }

                            JOptionPane.showMessageDialog(this, "New User is created");                  
                            clear();
                        }else{//Error found and show in GUI interface
                            JOptionPane.showMessageDialog(this, thisController.errorMsg,
                                "Error",JOptionPane.ERROR_MESSAGE);
                            scriptText.setEnabled(true);
                            pass1.setEnabled(true);
                            pass2.setEnabled(true);
                            editScript.setEnabled(true);
                            cancel.setEnabled(true);
                            ok.setEnabled(true);
                        }
                    }else{
                        choice = 1;//user didn't click on edit script and stright away click on 'create'
                        actions();
                    }   
                }else{
                    JOptionPane.showMessageDialog(this, "Username already exit or "
                            + "passwords are not mitchmatch. Try Again!!",
                            "Error",JOptionPane.ERROR_MESSAGE);  
                }   
            }else{
                clear();
            }
        }else{
            JOptionPane.showMessageDialog(this,"Please fill up correct information.");
        }
    }//GEN-LAST:event_okActionPerformed

    private void showScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showScriptActionPerformed
        //User Click on Show Script
        editScript.setEnabled(true);
        if(pass1.getText().equals(pass2.getText())
                && username.getText().length()!= 0
                &&pass1.getText().length()!=0){//checking for necessary information
            saveScript.setEnabled(true);
            choice = 2;
            actions();//show the script on text area
        }else{
            clear();
            JOptionPane.showMessageDialog(this, "Please fill up necessary information. Try Again!!",
                    "Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_showScriptActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        clear();
    }//GEN-LAST:event_cancelActionPerformed

    private void editScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editScriptActionPerformed
        //User Click on edit script
        JOptionPane.showMessageDialog(this,"Password must be change in"+
                "Password Field.",
                "Password",JOptionPane.INFORMATION_MESSAGE);
        
        choice = 3;//set choice 3 'that user want to run edit script
        username.setEnabled(false);
        defaultTbsList.setEnabled(false);
        quotaOnDefTbs.setEnabled(false);
        showScript.setEnabled(false);
        scriptText.setEnabled(true);
    }//GEN-LAST:event_editScriptActionPerformed

    private void formActions(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formActions
        retrieveDataFromDB();
    }//GEN-LAST:event_formActions

    private void showScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_showScriptKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            showScript.doClick();
        }
    }//GEN-LAST:event_showScriptKeyPressed

    private void editScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editScriptKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            editScript.doClick();
        }
    }//GEN-LAST:event_editScriptKeyPressed

    private void cancelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancelKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            cancel.doClick();
        }
    }//GEN-LAST:event_cancelKeyPressed

    private void okKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_okKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            ok.doClick();
        }
    }//GEN-LAST:event_okKeyPressed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        retrieveDataFromDB();
    }//GEN-LAST:event_updateActionPerformed

    private void updateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_updateKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            update.doClick();
        }
    }//GEN-LAST:event_updateKeyPressed

    private void pass1CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_pass1CaretUpdate
        //checking password is weak or strong
        String pw = pass1.getText().toString();
        int value = checkPasswordStrength(pw);
        jProgressBar1.setValue(value);
        switch (value) {
            case 0: jProgressBar1.setString("");
                break;
            case 1: jProgressBar1.setString("Very Weak");
                break;
            case 2: jProgressBar1.setString("Weak");
                break;
            case 3: jProgressBar1.setString("Getting There");
                break;
            case 4: jProgressBar1.setString("Strong");
                break;
        }
    }//GEN-LAST:event_pass1CaretUpdate

    private void saveScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveScriptActionPerformed
        //User clicked on save script
        int val = 0;

        //set button name for fileChooser
        UIManager.put("FileChooser.openDialogTitleText", "Load Script File");
        UIManager.put("FileChooser.openButtonText", "Save Script");
        
        //Browse file from drive
        JFileChooser fileChooser = new JFileChooser();

        try {
            val = fileChooser.showOpenDialog(null);
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Error opening the file dialogue",
                null, JOptionPane.ERROR_MESSAGE);
        }

        //if file is approve to open start to save the script to that file
        if (val == JFileChooser.APPROVE_OPTION) {
            String saveScriptPath = fileChooser.getSelectedFile().getAbsolutePath();
            if(saveScriptPath.endsWith(".sql")){
                thisController.writeScrpitForSave(saveScriptPath,scriptText.getText());
            }else{
                saveScriptPath = saveScriptPath+".sql";
                thisController.writeScrpitForSave(saveScriptPath,scriptText.getText());
            }
            JOptionPane.showMessageDialog(null, "Script is Saved.");
        }
    }//GEN-LAST:event_saveScriptActionPerformed

    private void saveScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saveScriptKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            saveScript.doClick();
        }
    }//GEN-LAST:event_saveScriptKeyPressed

    private void actions(){
        //do functions based on user choice
        if(choice == 1){//When user clicked 'Create' without click on edit script
            Boolean check = thisController.connectiontoDB("CreateUser");
            if(check == true){
                thisController.history(thisController.createUser());
                
                //grant for history
                thisController.connectiontoDB("openConn");
                String grant = "GRANT SELECT ANY TABLE,INSERT ANY TABLE,SELECT"
                + " ANY SEQUENCE TO "+ username.getText();                
                try{
                    Statement stmQuery = connection.createStatement();
                    stmQuery.executeQuery(grant);
                }catch(SQLException ex){
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    connection.close();
                } catch (SQLException ex) {
                    Logger.getLogger(CreatUser.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                JOptionPane.showMessageDialog(this, "New User Created");
                clear();
            }else{
                JOptionPane.showMessageDialog(this, thisController.errorMsg,
                        "Error",JOptionPane.ERROR_MESSAGE);
                enableAll(true);
                scriptText.setEnabled(false);
                scriptText.setText("");
            }
        }else if (choice == 2){//When user click on show script
            String script = thisController.createUser();
            script = script.substring(0, script.indexOf("D BY")+5) + "********" +
                    script.substring(script.indexOf("D BY")+5 + pass1.getText().length());
            scriptText.setText(script);
        }else {
            JOptionPane.showMessageDialog(this, thisController.errorMsg,
                    "Error",JOptionPane.ERROR_MESSAGE);
            clear();
        }
    }
    
    private void retrieveDataFromDB(){
        
        //get the list of tablespaces
        thisController.connectiontoDB("getTbs");
  
        //set the list of tablespaces into array
        ArrayList<String> arrList = new ArrayList<String>();
        arrList.addAll(thisController.arrList);
        
        //remove existing data
        defaultTbsList.removeAllItems();
        defaultTbsList.addItem("--Please Select One--");
        
        //added tablespaces list from dtabase to gui design
        for(int i = 0; i<arrList.size();i++){
            defaultTbsList.addItem(arrList.get(i));
        }        
    }
    
    private void clear(){//clear all information
        username.setText("");
        username.setEnabled(true);
        pass1.setText("");
        pass1.setEnabled(true);
        pass2.setText("");
        pass2.setEnabled(true);
        defaultTbsList.setEnabled(true);
        quotaOnDefTbs.setEnabled(true);
        quotaOnDefTbs.setText("0");
        showScript.setEnabled(true);
        editScript.setEnabled(true);
        scriptText.setText("");
        scriptText.setEnabled(false);
        defaultTbsList.setSelectedIndex(0);
        saveScript.setEnabled(false);
        editScript.setEnabled(false);
    }
    
    private void enableAll(boolean b){//enabled all the gui designs
        username.setEnabled(b);
        pass1.setEnabled(b);
        pass2.setEnabled(b);
        defaultTbsList.setEnabled(b);
        quotaOnDefTbs.setEnabled(b);
        showScript.setEnabled(b);
        editScript.setEnabled(b);
        scriptText.setEnabled(b);
        cancel.setEnabled(b);
        ok.setEnabled(b);
    }

    //Checking password level
    private int checkPasswordStrength(String password) {
        Color[] PB_COLORS = {Color.red, Color.red, Color.yellow, Color.yellow, Color.green};
        int strength = 0;
        
        String[] partialRegexChecks = {".*[a-z].*", // lower
            ".*[A-Z].*", // upper
            ".*[\\d].*", // digits
            ".*[^A-Za-z0-9].*" // symbols
        };

        if (password.matches(partialRegexChecks[0])) {
            strength++;
        }
        if (password.matches(partialRegexChecks[1])) {
            strength++;
        }
        if (password.matches(partialRegexChecks[2])) {
            strength++;
        }
        if (password.matches(partialRegexChecks[3])) {
            strength++;
        }
        if(strength == 4) strength = 3;
        if(password.length() >= 8)
            strength++;
        
        jProgressBar1.setForeground(PB_COLORS[strength]);
        return strength;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    public static javax.swing.JComboBox defaultTbsList;
    private javax.swing.JButton editScript;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton ok;
    public static javax.swing.JPasswordField pass1;
    private static javax.swing.JPasswordField pass2;
    public static javax.swing.JTextField quotaOnDefTbs;
    private javax.swing.JButton saveScript;
    public static javax.swing.JTextArea scriptText;
    private javax.swing.JButton showScript;
    private javax.swing.JButton update;
    public static javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
}