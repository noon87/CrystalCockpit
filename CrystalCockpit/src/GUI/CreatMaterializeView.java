/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Controller.Controller;
import static Controller.Controller.connection;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author Ben
 */
public class CreatMaterializeView extends javax.swing.JPanel {

    /**
     * Creates new form CreatMaterializeView
     */
    public Controller thisController = new Controller();
    static int i=0;
    boolean checkEdit = false;
    public CreatMaterializeView() {
        if(i==1){
            initComponents();
            table_store = new ArrayList<String>();
            column_store = new ArrayList<String>();
            saveScript.setEnabled(false);
            AutoCompleteDecorator.decorate(tableName);
            AutoCompleteDecorator.decorate(columnName);
            jTextArea1.setDisabledTextColor(Color.BLACK);
            scriptText.setDisabledTextColor(Color.BLACK);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        create = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        showScript = new javax.swing.JButton();
        tableName = new javax.swing.JComboBox();
        addBtn = new javax.swing.JButton();
        matViewName = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        scriptText = new javax.swing.JTextArea();
        columnName = new javax.swing.JComboBox();
        cancel = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        editScript = new javax.swing.JButton();
        clearScript = new javax.swing.JButton();
        update = new javax.swing.JButton();
        saveScript = new javax.swing.JButton();

        jButton2.setText("jButton2");

        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel3.setText("Select Table");

        create.setText("Create");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });
        create.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                createKeyPressed(evt);
            }
        });

        jLabel2.setText("Name");

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        showScript.setText("Show Script");
        showScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showScriptActionPerformed(evt);
            }
        });
        showScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                showScriptKeyPressed(evt);
            }
        });

        tableName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));
        tableName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableNameActionPerformed(evt);
            }
        });

        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });
        addBtn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addBtnKeyPressed(evt);
            }
        });

        scriptText.setColumns(20);
        scriptText.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        scriptText.setRows(5);
        scriptText.setWrapStyleWord(true);
        scriptText.setEnabled(false);
        jScrollPane2.setViewportView(scriptText);

        columnName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });
        cancel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancelKeyPressed(evt);
            }
        });

        jLabel4.setText("Select Column");

        editScript.setText("Edit Script");
        editScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editScriptActionPerformed(evt);
            }
        });
        editScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                editScriptKeyPressed(evt);
            }
        });

        clearScript.setText("Clear Script");
        clearScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearScriptActionPerformed(evt);
            }
        });
        clearScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                clearScriptKeyPressed(evt);
            }
        });

        update.setIcon(thisController.refreshIcon(15));
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        update.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                updateKeyPressed(evt);
            }
        });

        saveScript.setText("Save Script");
        saveScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveScriptActionPerformed(evt);
            }
        });
        saveScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saveScriptKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addBtn)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(18, 18, 18)
                                    .addComponent(columnName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3))
                                    .addGap(29, 29, 29)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(matViewName, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                                        .addComponent(tableName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(showScript, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                            .addComponent(editScript, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                            .addComponent(clearScript, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                            .addComponent(saveScript, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(update)
                                .addGap(18, 18, 18)
                                .addComponent(cancel)
                                .addGap(18, 18, 18)
                                .addComponent(create)))))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(matViewName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tableName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(columnName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addBtn))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(showScript, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editScript, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clearScript)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveScript)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(create)
                        .addComponent(cancel))
                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed

        if(!checkEdit){
            //Not edited
            if(matViewName.getText().length()!=0
                    && tableName.getSelectedIndex()!=0
                    && columnName.getSelectedIndex()!= 0){//checking null
                
           int checkSure = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to create the materialized view?", 
                "Notice", JOptionPane.YES_NO_OPTION);
           if(checkSure==0){ 
                boolean ch = true;
                thisController.connectiontoDB("openConn");  
                String script = "";
                scriptText.setEnabled(false);
                String fileds = " ";
                String tables = " ";
                scriptText.setText("");
                
                for(int i=0;i<table_store.size();i++){
                    fileds = fileds.concat(" "+ table_store.get(i) +"."+column_store.get(i)+",");
                    tables = tables.concat(" "+ table_store.get(i)+",");
                }

                if(tables.length()!=0){
                    int j = tables.lastIndexOf(',');
                    tables = tables.substring(0,j);           
                }
                if(fileds.length()!=0){
                    int j = fileds.lastIndexOf(',');
                    fileds = fileds.substring(0,j);
                }
                
                script = "CREATE MATERIALIZED VIEW " + matViewName.getText() +
                        "\n AS SELECT" + fileds + "\n from" + tables;
                try{
                
                    PreparedStatement st = connection.prepareStatement(script);
                    st.executeUpdate();
                    thisController.history(script);

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    ch = false; 
                }
                if(ch == true){
                      JOptionPane.showMessageDialog(this,"MATERIALIZED  View created");
                      matViewName.setText("");
                      jTextArea1.setText("");
                      scriptText.setText("");
                      tableName.setSelectedIndex(0);
                      columnName.setSelectedIndex(0);
                }
                try {
                    connection.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }

                scriptText.setEditable(false);    
                table_store.clear();
                column_store.clear();
                matViewName.setText("");
                matViewName.setEnabled(true);
                jTextArea1.setText("");
                scriptText.setEditable(true);
                script = "";     
           }
            }else{
                JOptionPane.showMessageDialog(this, "Please fill up correct infromation.");
            }
        }
        else//User click on edit script
        {
            int checkSure = JOptionPane.showConfirmDialog(null,
            "Are you sure you want to delete the table?", "Notice", JOptionPane.YES_NO_OPTION);
            if(checkSure==0){
                script = scriptText.getText();
                boolean ch = true;
                try {

                    thisController.connectiontoDB("openConn");    
                    PreparedStatement st = connection.prepareStatement(script);
                    st.executeUpdate();
                    thisController.history(script);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    ch = false;
                }
                if(ch == true){
                    JOptionPane.showMessageDialog(this,"MATERIALIZED  View created");
                    matViewName.setText("");
                    matViewName.setEnabled(true);
                    jTextArea1.setText("");
                    scriptText.setText("");
                    tableName.setSelectedIndex(0);
                    columnName.setSelectedIndex(0);
                }
                try {
                      connection.close();
                } catch (SQLException ex1) {
                   Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }

                ArrayList<String> arr = new ArrayList<String>();
                arr = getTableNames();
                tableName.removeAllItems();
                tableName.addItem("--Please Select One--");
                for(int i = 0; i<arr.size();i++){
                    if(arr.get(i).toUpperCase().equals("HISTORY")){}else{
                    tableName.addItem(arr.get(i));
                    }
                }
                table_store.clear();
                column_store.clear();
                matViewName.setText("");
                matViewName.setEnabled(true);
                jTextArea1.setText("");
                scriptText.setEditable(true);
                script = "";           
            }
        }
    }//GEN-LAST:event_createActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        table_store.clear();
        column_store.clear();
        matViewName.setText("");
        matViewName.setEnabled(true);
        jTextArea1.setText("");
        scriptText.setText("");
        script = "";
        saveScript.setEnabled(false);
        tableName.setSelectedIndex(0);
        columnName.setSelectedIndex(0);
    }//GEN-LAST:event_cancelActionPerformed

    private void tableNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableNameActionPerformed
        String tableSelected;
        tableSelected = (String) tableName.getSelectedItem();
        if(tableName.getSelectedIndex()==0){ 
            //do nothing 
        }else{
            ArrayList<String> arr = new ArrayList<String>();
            arr.addAll(Arrays.asList(getTableColumnNames(tableSelected)));
            columnName.removeAllItems();
            columnName.addItem("--Please Select One--");
            for(int i = 0; i<arr.size();i++){
                columnName.addItem(arr.get(i));
                
            }
        }
    }//GEN-LAST:event_tableNameActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        if(columnName.getSelectedIndex()!=0){
        table_store .add((String) tableName.getSelectedItem());
        column_store.add((String) columnName.getSelectedItem());
        
        jTextArea1.append(((String) columnName.getSelectedItem())+ "\n");
        }else{
            JOptionPane.showMessageDialog(this, "Pleae Select column name.");
        }
        
    }//GEN-LAST:event_addBtnActionPerformed

    private void showScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showScriptActionPerformed
        script = "";
        scriptText.setEnabled(false);
        String fileds = " ";
        String tables = " ";
        scriptText.setText("");
        for(int i=0;i<table_store.size();i++){
            fileds = fileds.concat(" "+table_store.get(i) +"."+column_store.get(i)+"," );
            tables = tables.concat(" "+ table_store.get(i)+",");
        }

        if(tables.length()!=0){
            int j = tables.lastIndexOf(',');
            tables = tables.substring(0,j);           
        }
        
        if(fileds.length()!=0){
           int j = fileds.lastIndexOf(',');
           fileds = fileds.substring(0,j);
       }
        
        script = "CREATE MATERIALIZED VIEW " + matViewName.getText() + 
                "\n AS SELECT" + fileds + "\n from" + tables;
        scriptText.setEditable(false);
        scriptText.append(script);
        saveScript.setEnabled(true);
    }//GEN-LAST:event_showScriptActionPerformed

    private void editScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editScriptActionPerformed
        checkEdit = true;
        scriptText.setEditable(true);
        scriptText.setEnabled(true);
        matViewName.setEnabled(false);
        script = "";
        saveScript.setEnabled(true);
    }//GEN-LAST:event_editScriptActionPerformed

    private void clearScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearScriptActionPerformed

        table_store.clear();
        column_store.clear();
        script = "";
        scriptText.setText("");
        jTextArea1.setText("");
        scriptText.setEditable(true);
        matViewName.setEnabled(true);
        saveScript.setEnabled(false);

    }//GEN-LAST:event_clearScriptActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        ArrayList<String> arr = new ArrayList<String>();
        arr = getTableNames();
        tableName.removeAllItems();
        tableName.addItem("--Please Slect One--");
        for(int i = 0; i<arr.size();i++){
            if(arr.get(i).toUpperCase().equals("HISTORY")){}else{
            tableName.addItem(arr.get(i));
            }
        }
    }//GEN-LAST:event_updateActionPerformed

    private void addBtnKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addBtnKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            addBtn.doClick();
        }
    }//GEN-LAST:event_addBtnKeyPressed

    private void showScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_showScriptKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            showScript.doClick();
        }
    }//GEN-LAST:event_showScriptKeyPressed

    private void editScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editScriptKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            editScript.doClick();
        }
    }//GEN-LAST:event_editScriptKeyPressed

    private void clearScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clearScriptKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            clearScript.doClick();
        }
    }//GEN-LAST:event_clearScriptKeyPressed

    private void updateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_updateKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            update.doClick();
        }
    }//GEN-LAST:event_updateKeyPressed

    private void cancelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancelKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            cancel.doClick();
        }
    }//GEN-LAST:event_cancelKeyPressed

    private void createKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_createKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            create.doClick();
        }
    }//GEN-LAST:event_createKeyPressed

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded

        ArrayList<String> arr = new ArrayList<String>();
        arr = getTableNames();
        tableName.removeAllItems();
        tableName.addItem("--Please Select One--");
        for(int i = 0; i<arr.size();i++){
            if(arr.get(i).toUpperCase().equals("HISTORY")){}else{
            tableName.addItem(arr.get(i));
            }
        }
    }//GEN-LAST:event_formAncestorAdded

    private void saveScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveScriptActionPerformed

        int val = 0;

        //set button name for fileChooser
        UIManager.put("FileChooser.openDialogTitleText", "Load Script File");
        UIManager.put("FileChooser.openButtonText", "Save Script");

        //Browse file from drive
        JFileChooser fileChooser = new JFileChooser();

        try {
            val = fileChooser.showOpenDialog(null);
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Error opening the file dialogue",
                null, JOptionPane.ERROR_MESSAGE);
        }

        //if file is approve to open start to save the script to that file
        if (val == JFileChooser.APPROVE_OPTION) {
            String saveScriptPath = fileChooser.getSelectedFile().getAbsolutePath();
            if(saveScriptPath.endsWith(".sql")){
                thisController.writeScrpitForSave(saveScriptPath,scriptText.getText());
            }else{
                saveScriptPath = saveScriptPath+".sql";
                thisController.writeScrpitForSave(saveScriptPath,scriptText.getText());
            }
            JOptionPane.showMessageDialog(null, "Script is Saved.");
        }
    }//GEN-LAST:event_saveScriptActionPerformed

    private void saveScriptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saveScriptKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            saveScript.doClick();
        }
    }//GEN-LAST:event_saveScriptKeyPressed

  
    //Return name of the database by Ben
    public  String getDBName(){
        
        
        thisController.connectiontoDB("openConn");
        try {
              connection.close();
        } catch (SQLException ex1) {
           Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
        }
        
        
        String dbNameTmp = null;
        String script = "SELECT sys_context('userenv','instance_name') from dual"; 
        try {
            Statement stmQuery = connection.createStatement();
            
            ResultSet rsQuery = stmQuery.executeQuery (script);
            rsQuery.next();
            dbNameTmp = rsQuery.getString(1);
                   
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "\n Problem with database name "
                    +ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        try {
              connection.close();
        } catch (SQLException ex1) {
           Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
        }
        return dbNameTmp;
    }
    
    //Return name of the all the tables and views user can access by Ben
        public  ArrayList<String> getTableNames(){
            ArrayList<String> Table_List = new ArrayList<String>();
            thisController.connectiontoDB("openConn");
       
        try {
            
            String script = "SELECT VIEW_NAME from USER_VIEWS";
            String script2 = "SELECT table_name from user_tables";

            Statement stmQuery = connection.createStatement();
            ResultSet rsQuery = stmQuery.executeQuery (script);
            
            while(rsQuery.next())
            {
                
                Table_List.add( rsQuery.getString(1));;
                
            }  
            
            Statement stmQuery2 = connection.createStatement();
            ResultSet rsQuery2 = stmQuery2.executeQuery (script2);
            while(rsQuery2.next())
            {
                Table_List.add( rsQuery2.getString(1));;
            }  
        } catch (SQLException ex) {
            Logger.getLogger(Controller.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
              connection.close();
        } catch (SQLException ex1) {
           Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
        }
        return Table_List;
    }

        //Return name of all the columns in the table in arguments by Ben
        public  String[] getTableColumnNames(String tableName){
            thisController.connectiontoDB("openConn");
        
           int sizeTable;
           String[] Table_List = null;
           try {
            
            String script = "select count(*)  from all_tab_cols  where table_name = '"+ tableName +"'";            
            String script2 = ""
                    + "SELECT COLUMN_NAME "
                    + " FROM ALL_TAB_COLS "
                    + " WHERE TABLE_NAME = '"+ tableName +"'"; 
                   
            
             Statement stmQuery = connection.createStatement();
             ResultSet rsQuery = stmQuery.executeQuery (script);
             rsQuery.next();
             sizeTable = rsQuery.getInt(1);
            int i=0;
            Table_List = new String[sizeTable];
            Statement stmQuery2 = connection.createStatement();
            ResultSet rsQuery2 = stmQuery2.executeQuery (script2);
            while(rsQuery2.next())
            {
                
                Table_List[i] = rsQuery2.getString(1);
                i++;
            }  
        } catch (SQLException ex) {
            Logger.getLogger(Controller.class.getName()).log(Level.SEVERE, null, ex);
        }
           
         
        try {
              connection.close();
        } catch (SQLException ex1) {
           Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex1);
        }
           
        return Table_List;
     }    
    
   
private String script;
private ArrayList<String> table_store;
private ArrayList<String> column_store;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton cancel;
    private javax.swing.JButton clearScript;
    private javax.swing.JComboBox columnName;
    private javax.swing.JButton create;
    private javax.swing.JButton editScript;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField matViewName;
    private javax.swing.JButton saveScript;
    private javax.swing.JTextArea scriptText;
    private javax.swing.JButton showScript;
    private javax.swing.JComboBox tableName;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}