/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Controller.Controller;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author Nan
 * @Write Program by Nan
 * 
 * Defragmentation Table Description
 * ==================================
 * Allow user to select which table that user want to defragment.
 * Show the current situation in text area.
 * 
 * How Function work
 * =================
 * When Frame open, load all data from Database.
 * 
 * When user click on "Defragment", call check space function from controller.
 * If space is enough to defragment proceed and if not let user to make same space
 * from drive.
 * 
 * After space is enough, create the temporary folder. Than start to do defragmentation 
 * by calling method from controller. 
 * 
 * After defragmentation complete remove temporary folder.
 */

public class DefragmentationTable extends javax.swing.JPanel {

    /**
     * Creates new form DefragmentationTable
     */
    
    public DefragmentationTable() {
        initComponents();
        progressBar.setVisible(false);
        statusFile.setEnabled(false);
        AutoCompleteDecorator.decorate(tableList);
        
        statusFile.setDisabledTextColor(Color.BLACK);
    }
    
    public Controller thisController = new Controller();
    public static String _tableName;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        defragment = new javax.swing.JButton();
        tableList = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        statusFile = new javax.swing.JTextArea();
        progressBar = new javax.swing.JProgressBar();
        update = new javax.swing.JButton();
        clearText = new javax.swing.JButton();

        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel1.setText("Select Table ");

        defragment.setText("Defragment");
        defragment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defragmentActionPerformed(evt);
            }
        });
        defragment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                defragmentKeyPressed(evt);
            }
        });

        tableList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please Select One--" }));

        statusFile.setColumns(20);
        statusFile.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        statusFile.setRows(5);
        jScrollPane1.setViewportView(statusFile);

        update.setIcon(thisController.refreshIcon(15));
        update.setToolTipText("");
        update.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        update.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                updateKeyPressed(evt);
            }
        });

        clearText.setText("Clear Text");
        clearText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTextActionPerformed(evt);
            }
        });
        clearText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                clearTextKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(clearText)
                        .addGap(18, 18, 18)
                        .addComponent(defragment))
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tableList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE))
                .addGap(19, 19, 19))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(tableList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(defragment)
                    .addComponent(clearText))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
  
    private void defragmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defragmentActionPerformed

        if(tableList.getSelectedIndex()!=0){
            statusFile.setText("");
            tableList.setEnabled(false);
            defragment.setEnabled(false);
            clearText.setEnabled(false);

            thisController.connectiontoDB("getTabSize");
            addStatus("Checking free space......");
            thisController.checkSpace();

            if(thisController._checkSpace == true){
                _tableName = tableList.getSelectedItem().toString();
                
                addStatus("Analyzing Table ....");
                thisController.connectiontoDB("analyze");
                addStatus("Table analyzed.");
                
                thisController.connectiontoDB("getTableBlockSize");
                final int beforeSize = thisController.blockSize;
                final int beforeFreeBlock = thisController.emptyBlocks;
                
                System.out.println(beforeSize);
                addStatus("The size of table before defragnment is "+beforeSize+"KB.");
                addStatus("The free blocks before defragnment is "+beforeFreeBlock+".");
                
                addStatus("Space is enough to make defragmentation.");

                SwingWorker sw = new SwingWorker<Boolean,Integer>(){
                    protected Boolean doInBackground()throws Exception{
                        progressBar.setVisible(true);
                        publish(0);
                        addStatus("Creating temporary folder....");
                        thisController.createTempFolder();
                        addStatus("Temporary folder is created.");

                        publish(10);
                        addStatus("Start defragment....");
                        thisController.defgTable();
                        
                        addStatus("Analyzing Table ....");
                        thisController.connectiontoDB("analyze");
                        addStatus("Table analyzed.");
                                           
                        thisController.connectiontoDB("getTableBlockSize");
                        
                        int afterSize = thisController.blockSize;
                        int afterFreeBlock = thisController.emptyBlocks;
                        System.out.println(afterSize);
                        addStatus("The size of table after defragnment is "+afterSize+"KB.");
                        addStatus("The free blocks after defragnment is "+afterFreeBlock+".");
                        int totalDiff = beforeSize-afterSize;
                        
                        addStatus("Total different between before and after is "+totalDiff+"KB.");
                        
                        addStatus("Table is defragmented.");

                        publish(95);

                        tableList.setEnabled(true);
                        defragment.setEnabled(true);
                        return true;
                    }

                    protected void process(List<Integer> chunks) {
                        for (Integer i : chunks)
                        progressBar.setValue(i);
                    }
                    protected void done() {
                        try{
                            boolean b = get();
                            if(b){
                                progressBar.setValue(100);
                                
                                
                                
                                
                                tableList.setSelectedIndex(0);
                                progressBar.setVisible(false);
                                clearText.setEnabled(true);
                            }
                        }catch (ExecutionException ex) {
                            Logger.getLogger(MigrationTable.class.getName()).log(Level.SEVERE, null, ex);
                            statusFile.setText("");
                        } catch (InterruptedException ex) {
                            Logger.getLogger(MigrationTable.class.getName()).log(Level.SEVERE, null, ex);
                            statusFile.setText("");
                        }
                    }
                };
                sw.execute();
                progressBar.setVisible(false);
            }else{
                JOptionPane.showMessageDialog(this, "Hard drive space is not enought to defragment.\n"
                        + "Please manage your space and try it again.",
                            "Error",JOptionPane.ERROR_MESSAGE);
                tableList.setSelectedIndex(0);
            }
        }else{
            JOptionPane.showMessageDialog(this, "Please select correct name.",
                            "Error",JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_defragmentActionPerformed

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        retrieveDataFromDB();
        statusFile.setText("");
        progressBar.setVisible(false);
    }//GEN-LAST:event_formAncestorAdded

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed

        retrieveDataFromDB();
    }//GEN-LAST:event_updateActionPerformed

    private void updateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_updateKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            update.doClick();
        }
    }//GEN-LAST:event_updateKeyPressed

    private void defragmentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_defragmentKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            defragment.doClick();
        }
    }//GEN-LAST:event_defragmentKeyPressed

    private void clearTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTextActionPerformed
        statusFile.setText("");
    }//GEN-LAST:event_clearTextActionPerformed

    private void clearTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clearTextKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            clearText.doClick();
        }
    }//GEN-LAST:event_clearTextKeyPressed

    private void retrieveDataFromDB(){
        
        //get the list of table
        thisController.connectiontoDB("getTab");
  
        //set the list of table into array
        ArrayList<String> arrList = new ArrayList<String>();
        arrList.addAll(thisController.arrList);
        
        //remove existing data
        tableList.removeAllItems();
        tableList.addItem("--Please Select One--");
        
        //added table list from dtabase to gui design
        for(int i = 0; i<arrList.size();i++){
            tableList.addItem(arrList.get(i));
        }        
    }
    
    public static void addStatus(String status) {
        if (status == null) {
            statusFile.setText("");
        } else {
            if (statusFile.getText().equals("")) {
                statusFile.setText(status);
            } else {
                statusFile.setText(statusFile.getText() + "\n" + status);
            }
        }

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearText;
    private javax.swing.JButton defragment;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JProgressBar progressBar;
    public static javax.swing.JTextArea statusFile;
    public static javax.swing.JComboBox tableList;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}